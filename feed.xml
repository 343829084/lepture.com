<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Just lepture]]></title>
    <link href="http://lepture.com/feed.xml" rel="self" />
    <link href="http://lepture.com/" />
    <updated>2014-05-09T16:56:47.599296+08:00</updated>
    <id>http://lepture.com/</id>
    <entry>
        <title type="html"><![CDATA[適合閱讀的中文字體]]></title>
        <link href="http://lepture.com/zh/2014/chinese-fonts-and-yue-css"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-05-09T15:35:00+08:00</updated>
        <published>2014-05-09T15:35:00+08:00</published>
        <id>http://lepture.com/zh/2014/chinese-fonts-and-yue-css</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>我時常更新自己的博客程序，也時常更新自己的博客主題。偏右言：「世上有兩種前端工程師，寫博客的，和寫博客的。」我之謂也。我的博客主題一直保持着簡潔的樣式，保持着我認爲適合閱讀的文字排版。</p>
<p>中文閱讀上，我以爲最大的問題便是字體。不像英文，使用 Web Fonts 的代價相當低廉，中文因爲文字量大的原因，整個字體文件偏大，暫不適合使用 Web Fonts。在這樣的情形下，我們只能儘量利用作業系統自身的字體了。</p>
<h2>Mac</h2>
<p>Mac 上默認的中文字體是華文黑體（STHeiti）與華文宋體，我個人認爲質量是不錯的。紙質書的印刷，普遍使用的是宋體，然而在現在的顯示器上，宋體的表現並不令人滿意。</p>
<p>宋體的結構相比於黑體要複雜許多，比如橫線起筆處微小的回鉤，橫豎撇捺點鉤都沒有那麼簡單。這些細膩的處理在現在的顯示器上都無法完美地體現，也許等到 Retina 普及後，宋體才能重拾其在紙質書的光輝。</p>
<p>而黑體則不一樣，結構簡潔，形體勻稱，合適在顯示器上閱讀。所以目前我的選擇是黑體。Mac 上還有一款讚譽頗多的黑體，冬青黑體（Hiragino Sans GB）。</p>
<figure><img src="//dn-lepture.qbox.me/blog/18px-mac-stheiti.png" alt="華文黑體" /><figcaption>Mac 上 18px 的華文黑體</figcaption></figure><figure><img src="//dn-lepture.qbox.me/blog/18px-mac-hiragino.png" alt="冬青黑體" /><figcaption>Mac 上 18px 的冬青黑體</figcaption></figure><p>我個人以爲兩者都還不錯，冬青黑體整體看來更爲飽滿，偏扁平，而華文黑體則偏瘦一點，比如你看兩者的「口」字。我個人隨大流，選擇了贊譽頗多的冬青黑體。</p>
<h2>Windows</h2>
<p>因爲我個人一直使用的是 Mac，對視窗系統沒有太多了解，只知道中易宋體與微軟雅黑。所以只能對這兩者做對比。</p>
<figure><img src="//dn-lepture.qbox.me/blog/18px-win-yahei.png" alt="微軟雅黑" /><figcaption>Windows 上 18px 的微軟雅黑</figcaption></figure><p>也許只是個人原因，微軟雅黑看起來不夠圓潤，甚至有鋸齒感。當然，這與 Windows 的字體渲染有關，非微軟雅黑字體之過。但是也有人覺得 Windows 上的微軟雅黑比 Mac 上的冬青黑體更好，嫌棄 Mac 的字體渲染太模糊。我個人認爲 16px 的中易宋體在 Windows 上是更好的選擇。</p>
<figure><img src="//dn-lepture.qbox.me/blog/16px-win-simsun.png" alt="中易宋體" /><figcaption>Windows 上 16px 的中易宋體</figcaption></figure><p>Windows 的字體渲染偏銳利，微軟雅黑的顯示就有點尷尬，但是中易宋體是點陣字體，正好利用到了 Windows 的字體渲染優勢。我們看到中易宋體的內容非常清晰悅目。</p>
<figure><img src="//dn-lepture.qbox.me/blog/18px-win-simsun.png" alt="中易宋體" /><figcaption>Windows 上 18px 的中易宋體</figcaption></figure><p>但是受限於點陣字體，一旦到 18px 時，渲染效果就沒法看了。所以使用中易宋體時就必須保證字體大小在 18px 以下。</p>
<p>那麼，在 Windows 上，我的選擇是 16px 的中易宋體。但是我並非實際使用者，有 Windows 使用者反饋說微軟雅黑挺好的。於是暫時先用微軟雅黑吧。還是希望能有更多的 Windows 使用者的反饋。</p>
<h2>Linux</h2>
<p>在使用 Mac 之前，我一直使用的是 Ubuntu，所有的經驗也都停留在那一時期。也不知道過了這許多年，Linux 上的字體渲染發展得如何了。</p>
<p>Linux 上我的選擇是 18px 的文泉驛微米黑。因爲 Linux 用戶自己喜歡折騰，我的選擇也許無關痛癢。</p>
<h2>The Code</h2>
<p>這些經驗最終彙集到了 <a href="https://github.com/lepture/yue.css">yue.css</a> 這個樣式庫。尤其是對 Windows 的處理，反反覆覆，時而會把微軟雅黑添加進來，時而又移出。到寫作此文時，字體樣式便成了：</p>
<pre><code class="lang-css">.yue {
  font: 400 18px/1.62 &quot;Georgia&quot;, &quot;Xin Gothic&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft YaHei&quot;, sans-serif;
}
.windows .yue {
  font-size: 16px;
  font-family: &quot;Georgia&quot;, &quot;Xin Gothic&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;SimSun&quot;, sans-serif;
}
</code>
</pre><p>Windows 使用 16px 是爲了兼容 Windows XP。在 XP 上，沒有微軟雅黑只有中易宋體，在這種情況下會 Fallback 到中易宋體，而 18px 會導致字體變形。你可能需要一句 JavaScript 來添加 <code>.windows</code> 的 class：</p>
<pre><code class="lang-javascript">if(/windows/i.test(navigator.userAgent)){
  document.getElementsByTagName(&#39;html&#39;)[0].className += &#39; windows&#39;
}
</code>
</pre><p>至於 16px，我個人以爲偏小。但是還有許多網站在使用 14px，甚至於還有 12px 的。以現在顯示器的分辨率，14px 的文字閱讀起來就有點吃力了。當然，也有可能我高估了高分屏的普及率了。</p>
<h2>Criticism</h2>
<ol>
<li>豆瓣的日誌影評書評等內容皆是 12px 的，必須點名批評一下。現在已經是 2014 年了，這個字體大小真的看起來很累。</li>
<li>知乎的內容是 13px 的，比起 12px 也好不了多少。不過專欄字體大小有 16px 了，還算不錯。</li>
<li>簡書用 18px 的宋體，這個在 Windows 下是沒有辦法忍受的。但是最不能忍受的還是楷體的標題。</li>
</ol>
<h2>yue.css</h2>
<p>對於文字排版，我並沒有專業的素養。愚之所言，不過個人經驗罷了。最後這些經驗彙集成了樣式集 <a href="https://github.com/lepture/yue.css">yue.css</a>。</p>
<p>yue.css 不是一個樣式重置(reset)，不會影響到其它標籤的樣式。你所需要的只是給內容區域加上 <code>.yue</code> 的 class。簡潔實用，目前用於我的博客，<a href="https://yuehu.io/">閱乎</a>，當然還有別的朋友在用。</p>
<p>如果你對文字排版有興趣，可以使用 yue.css。如果你對 yue.css 有意見，也歡迎反饋給我。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[沒有時間的大理]]></title>
        <link href="http://lepture.com/zh/2014/wander-in-dali"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-04-29T19:26:00+08:00</updated>
        <published>2014-04-29T19:26:00+08:00</published>
        <id>http://lepture.com/zh/2014/wander-in-dali</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>大理古城閒步時，偶爾與人搭話，被問及「何時來大理」又「打算呆多久」時，我總是輕描一句「忘記了」又或者「不知道」。假使不刻意去想想的話，還真無法可知。譬如我是什麼時候離開昆明的，如果沒有 <a href="/zh/2014/a-trip-in-kunming">昆明的遊記</a> 在這裏，也許是真的想不起來了。</p>
<p>在大理，時間是一件挺無關緊要的事物，只在這催人前行催人寫下一篇遊記的時刻才顯得實實在在。更多的時候，時間被人遺忘，留下的是如畫風景，是過往人事。</p>
<p>大理最有名的是洱海與蒼山，有蒼洱一日遊的旅遊線路。我從來沒有想過要跟團旅遊，可是在第二日便跟團出遊了，結果意外地感覺不錯，拍了幾張還滿意的照片，因爲不擅長又懶於後期處理，只隨便整理了幾張洱海風景。</p>
<figure><img src="http://dn-lepture.qbox.me/blog/pure-erhai.jpg/thumbnail" alt="洱海與遠山" /><figcaption>洱海與遠山 by Epl-5</figcaption></figure><figure><img src="http://dn-lepture.qbox.me/blog/erhai-and-vallige.jpg/thumbnail" alt="洱海與村落" /><figcaption>洱海與村落 by Epl-5</figcaption></figure><figure><img src="http://dn-lepture.qbox.me/blog/erhai-and-border.jpg/thumbnail" alt="洱海" /><figcaption>洱海 by Epl-5</figcaption></figure><p>還有蒼山遠眺的風景。乘纜車上蒼山，入天龍洞，拾級而上，一路行人各處留影。洞中光線不好，小彩燈的點綴並不適合拍照，而遊客相機不停，只管留下「到此一遊」的足跡。待得出洞後，心胸頓時開闊，遠眺山下洱海，斜入洱海的幾爿地，遍布白牆青瓦的村子又或者鬱鬱蔥蔥的田地。洱海對面的羣山躺在白雲遮蔽的陰影裏，近處是土黃的未有種植的格子田，田邊又是這白牆青瓦的村落橫躺在國道旁。</p>
<hr>
<p>蒼洱一日遊有三條線，我們這條是民俗線，是同住的三個妹子的朋友幫忙訂的。她們一行與我同日到大理，我們是在下關到大理古城的公車上認識的。到古城時，天色已經黑，我陪她們找客棧入住。她們已經預訂好了一家，叫「石門客棧」，可是無論百度地圖亦或高德地圖，循着地圖走到目的地總是撲個空。而且「石門客棧」的電話又打不通，我們傾向於認爲這家客棧是不存在的，最後只好放棄，隨處找找，選定了人民路上段與博愛路相交處的「大熊餐吧（杭州人家）」。</p>
<p>這條線路整體感覺還行<sup class="footnote-ref" id="fnref-1"><a href="#fn-1" rel="footnote">1</a></sup>，中途有兩個購物點，一是玉器，一是銀器。早晨十點出發，下午六點回城。一路上介紹白族特色，講大理是「男人的天堂，女人的天下」，講大理的「風花雪月」<sup class="footnote-ref" id="fnref-2"><a href="#fn-2" rel="footnote">2</a></sup>。導遊是白族人，戴一環扁平的銀手鐲，喜歡用一些驚人的詞彙，比如「刁民」指「雕民」，比如「嫖客」指「漂客」。白族民居同漢族民居頗不相同，是坐南朝北，進門有一屏白壁，白壁鉓以水墨畫，大約因爲日照過甚，只以這白壁反光照亮堂室。</p>
<p>旅途中下過水，上過山，賞過秀，品過茶。到得旅程結束，在古城裏見到了她們另一羣朋友，抱着在路上撿到的小狗，給這小狗找主人呢。幫我們訂票的朋友也在，叫高翔，又煩他陪我們去買褲子。在護國路上段一家白族人那裏買的，洋人街與人民路這邊的攤鋪始終砍不下價錢。賣衣服的「金花」打趣高翔，問靖雅是不是他女朋友。結果深夜遊玩結束，回到就寝處便發生了尷尬的表白事件。</p>
<hr>
<p>這一路與許多人聊過天，比如擺攤賣明信片的，他讀工科，畢業後就不曾工作，一直在路上，自己拍點照片印成明信片來賣，據說也有日入千圓的經歷，我也光顧了他一下，給朋友寄去的明信片便是在他這兒買的。他也偶爾幫人拍拍寫真。像今天，他身邊便有個姑娘，大約等到下午些時候便要去拍寫真。</p>
<figure><img src="//dn-lepture.qbox.me/blog/me-with-postcards.jpg/thumbnail" alt="我在大理" /><figcaption>走在寄明信片的路上 by iPhone</figcaption></figure><p>比如走在路上，被擺地攤賣襪子的姑娘叫住，說是認識我，之前在 <a href="/zh/2014/a-trip-in-kunming">昆明傾城青年旅舍</a> 和他們打過招呼。他們男女朋友一起辭職出來玩，一邊又擺攤賣點東西，賺點旅費。我便坐下與他們聊聊天。到收攤時，問他們住在哪裏，結果竟然是我們不曾找到的「石門客棧」。我隨後便同他們去這客棧瞧瞧，這個時候曉霞、靖雅、小巧她們已經離開古城了。</p>
<p>在客棧處又意外地遇到的拍寫真的姑娘，也遇到了後來一起去雙廊的凌雲與阿友。客棧老闆是 90 後，和我一樣是湖北人。客棧地理位置特別偏僻，已經出了古城，與地圖上的位置風牛馬不相及，網上預訂需慎重啊。因爲便宜，隔天我也搬了過來住，還順帶了一個小伙。</p>
<p>我們是在早點鋪子裏認識的，他昨天剛到大理，現在已經準備離開了，覺得大理不好玩。我同他聊了聊，講大理的好，講風景，講人物，講擺攤的人，講有意思的店鋪，講大理不能急要細細品味。結果他便留了下來，隨我去住了便宜的床位，這一住下來就住了好幾天，到我離開古城時，他還沒有離開大理。</p>
<p>他帶我去一家木制玩具店玩。這家店在人民路上，據說洋人街也有。各式木制玩具，許多是拼圖類的，還有華容道，可以免費試玩。我們玩得倒是不亦樂乎，後來還假裝店員，幫忙推銷——「這款是我們店賣得最好的，只要八十六，你可以搭配這款一起，買兩個可以九折」。</p>
<hr>
<p>中午的時候，我們去博愛路南端的一然堂吃齋飯。一然堂 5 圓一人隨便吃，但是不能剩飯剩菜。一然堂是佛門之地，我們一邊吃素，一邊看講經的電視。淨空法師講道：「佛不是神仙，他是人，佛只是一種學位，佛好比是博士，菩薩是碩士，阿修羅是學士。」<sup class="footnote-ref" id="fnref-3"><a href="#fn-3" rel="footnote">3</a></sup>他又講：「佛的學位叫無上正等正覺。」淨空法師講得通俗易懂，觀念又貼近生活，挺有意思的。</p>
<p>後來又隨同客棧的朋友一起去慈緣齋素食館吃飯，這家素食館就更有趣了，是完全免費的，隨便吃，也是不能剩飯剩菜，吃完歸還餐盤就可以走了，而且這裏的飯菜比一然堂味道更好。沿着博愛路往南走，出了偏南門，擡頭便能見到。他們家也放電視，有不同的人講經，我們看的還是淨空法師，但是內容是《了凡四訓》。</p>
<hr>
<figure><img src="//dn-lepture.qbox.me/blog/shuanglang-erhai.jpg/thumbnail" alt="雙廊的洱海" /><figcaption>雙廊的洱海 by Epl-5</figcaption></figure><p>洱海一圈遍布着古村古鎮，比如說喜州，比如說雙廊。剛好同住的朋友要去雙廊，我便隨他們一起去了。跳過了不少地方，頗爲可惜。我們是申時出發的，將到雙廊時，正是落日時分，只能在車上瞟一眼日落，等到下車時，太陽已經隱沒在蒼山裏了。</p>
<p>可是並沒有什麼可惜的，因爲隔天便又見落日了。在暖暖客棧後山遠觀夕陽一點點落下，直到藏身於對面的蒼山。夕陽染醉了山邊的雲層，涂一沫酡紅的酒暈，也染醉了我們，我們像一羣醉酒的人，神經病似地唱着各種各樣的歌。抒情的，戀愛的，勵志的。等到天色已暗，習習涼風，忍不住打個寒噤時才肯罷休。</p>
<p>我們入住的這家暖暖客棧風評不錯，是凌雲帶我們來的，也不清楚她是怎麼知道的。店員妹子們人都特別好，又漂亮又可愛。如果球技不佳，不要和小希打桌球，可以找小向練練手，但是假如你是個高手，記得找老闆瓜哥來一局，也許就免房費了。午餐可以在暖暖搭伙，假使你很能吃的話，也可以挑戰一下五碗飯，興許也免房費了。</p>
<p>途次雙廊，更多的時候是在客棧度過的。因爲雙廊在修建各種房屋，路上散着一堆堆的泥沙，而且多是小巷，行路多有不便，所以只隨便走了走。在客棧打打桌球，玩玩牌，晚上的時候玩「殺人」，一直玩到一兩點。認識了一起去瀘沽湖的朋友，TiTi、春天、阿布還有一起過來的阿友。</p>
<p>格格總不加入我們的遊戲，一直在牆角的木桌安靜地畫畫。她有個小本子，打算在暖暖做義工期間畫滿整個本子。最近她在做「精緻手繪明信片義賣」，鉛筆畫的各式圖案，搭配一枚鳥羽，文藝極了，有點「千里送鵝毛的意思」。</p>
<figure><img src="//dn-lepture.qbox.me/blog/postcards-by-gege.jpg/thumbnail" alt="格格畫的明信片" /><figcaption>格格畫的明信片 from WeChat Moments</figcaption></figure><p>因爲人暖，在暖暖度過了暖暖的時光，離開的時候，是小樣的生日，於是又多留了一日。燭光中的小樣閉眼許願，大家唱着生日歌，畫面定格，手機相機閃爍，留下這一時刻。</p>
<hr>
<p>從瀘沽湖回來，返程回古城前又去了一趟沙溪，可惜時日不多。沙溪是一個適合長住的地方，浮光掠影的一瞥享受不了那份安逸。</p>
<p>沙溪號稱是茶馬古道唯一倖存的古集市，古鎮很小，遊客多集中在有「千年集市」之譽的寺登街。有一條溪流，沿着寺登街，一路淌下來，也許這便是沙溪。這裏外國人尤其多，經營咖啡館小飯店的多非本地人。古鎮一圈繞着多處村莊，閒暇時一個人跑到村子裏去玩了玩，聽當地老人們的聊天。</p>
<p>雖然是小住，卻幸運地遇到了週五的集市。街道兩邊遍佈着攤鋪，賣早點的，賣菜的，賣水果的，賣衣服的。街市上的人背着竹簍子走來走去，尋覓着，還有像我這樣的看客無聊地晃荡着。集市上遇着一位外國小夥，也背着竹簍來趕集，身邊是當地的老奶奶，他已在村子裏的「奶奶」家住了一個月了。</p>
<p>早餐在集市吃了份豌豆涼粉，挺美味的，當地人都會買一大份回家當菜吃。可惜時間催人，中午便要離開了。</p>
<hr>
<p>一路過來，最喜歡的還是大理。真羨慕奚媛妹子，住在了這樣一個山青水秀人傑地靈的地方。在大理的時光，還要感謝奚媛帶我去吃當地美食，又煩她一起爬山，去桃溪谷探探山泉，回三文筆茶場的莫催茶室喝茶。</p>
<p>品着茶，從半山腰的茶室遠眺洱海蒼山，遠眺山下大理，觀茶室姑娘練毛筆字，練蘇軾的《赤壁賦》，生活多麼愜意。多想留在大理住下，可惜我不是歸人，是個過客。</p>
<div class="footnotes">
<hr>
<ol><li id="fn-1"><p>因爲沒有跟團的經歷，沒有比較，只是個人感覺。<a href="#fnref-1" rev="footnote">&#8617;</a></p></li>
<li id="fn-2"><p>下关风，上关花，苍山雪，洱海月。<a href="#fnref-2" rev="footnote">&#8617;</a></p></li>
<li id="fn-3"><p>那個時候我還不知道淨空法師，是 <a href="https://twitter.com/mathena/status/453141498993733632">徐宥告訴我的</a>。<a href="#fnref-3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[到昆明看看天空]]></title>
        <link href="http://lepture.com/zh/2014/a-trip-in-kunming"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-04-05T00:59:00+08:00</updated>
        <published>2014-04-05T00:59:00+08:00</published>
        <id>http://lepture.com/zh/2014/a-trip-in-kunming</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>離開深圳前的幾天，每天下着雨，時而點綴兩三點，時而又傾盆如瀉。天陰沉沉的，整個人也陰沉沉的，渾身散發着一股懶洋洋的氣息，寫不了代碼，寫不了文章，每日裏只以電視與動畫度日，一口氣看完了《半澤直樹》與《Fate/Zero》。</p>
<p>大清早去趕飛機，在機場麥記吃早餐，忽而雷鳴，訇然乍響，又聽得麥記員工談前一天飛機延誤的事，立馬擔心航班是否會取消，結果卻是意外的準點。</p>
<p>到昆明後，一出機場便遇見了藍天，以及藍天裏飄着的幾團白雲。雖然睡眼矇矓，心情卻是格外好了。於是開始尋找住處，最後選定了翠湖附近的這家「昆明傾城青年旅舍」。</p>
<p>沿旅舍門口的公路下去，大約兩三分鍾便到翠湖公園。進門兩邊是水塘，一邊在曬塘，裸露的灰土地，縱橫耙過的格子襯衫般的幾條橫線，時而落下數只白鷺，修長的腳，修長的脖子，修長的冠羽，閒步於塘間，啄食於塘間。另一邊卻是滿池水的荷塘，也有白鷺紅嘴鷗<sup class="footnote-ref" id="fnref-gull"><a href="#fn-gull" rel="footnote">1</a></sup>漫步於荷上，迫暮的時候，七八位老爺子蹲於水塘邊，手持了半臂長鏡頭的相機，正拍攝着紅嘴鷗的閒步、展翅、飛翔。</p>
<p>路兩邊的花壇裏種滿了三色堇<sup class="footnote-ref" id="fnref-viola"><a href="#fn-viola" rel="footnote">2</a></sup>，紅黃紫白藍的底，中間染一抹深色。道兩旁隔幾步便是三五老爺子老奶奶一起，小提琴，二胡，琵琶，鼓，或是唱歌，或是戲曲。順路去九龍塘看黑天鵝，路遇一家子在公園遊玩，小姑娘又是異樣的可愛，齊劉海的直髮，扎了個馬尾，一雙黑亮的眼睛，蹦蹦跳跳着。在九龍塘喂食黑天鵝，小姑娘時而分我幾片饅頭，用以喂食天鵝或者塘裏的魚。</p>
<p>夕陽晚照，醉染的雲層，道兩旁的拂柳，微風吹過，襯衣也跟着擺起來，愜意快哉。</p>
<figure><img src="//dn-lepture.qbox.me/blog/green-lake-in-sunset.jpg/thumbnail" alt="夕陽下的翠湖" /><figcaption>夕陽下的翠湖</figcaption></figure><hr>
<p>雲南大學離湖不遠，我是第二日中午些時候去的。校園閒逛，倒沒什麼可敘的。可是有這樣清澈的藍天，連成一片的白雲，身處何處已經無所謂了。中午的太陽稍嫌熱了點，可是當它隱在了大片的雲層裏，一時半會又不能出來，氣溫一下子就降了下來，稍稍吹點風，也不禁會打個冷噤。</p>
<p>太陽藏身於雲層裏，有時也憐憫世人地從縫隙裏漏幾筆光，直把雲層邊緣照得發亮，邊緣是乾乾淨淨的白，裏面卻稍顯烏青了點。</p>
<figure><img src="//dn-lepture.qbox.me/blog/yunnan-university.jpg/thumbnail" alt="雲南大學" /></figure>
<hr>
<p>在昆明，我並沒有刻意地逛景點，只是隨便走走，看看藍天，看看白雲，生活就已經足夠愜意了。更多的時候，我是呆在這家「傾城青年旅舍」，在二樓的咖啡廳裏，上上網，經營一下 <a href="https://yuehu.io/">閱乎</a>，或者點杯咖啡，寫幾行代碼，又或者隨便找兩三人搭幾句話。</p>
<p>店員都是美麗可愛的姑娘，與我同齡的，十八歲的。有姐妹，召慧、召芳，十八歲的小蓉，有酒窩的盼盼，都是賣萌的齊劉海。大家隨便聊聊，打打檯球，像熟人一般，甚至我也曾被誤會成店員了。</p>
<p>有在咖啡廳裏準備複試考研的女生，有開電腦看電視劇的，聊天的，看書的，打桌球的。長得異域風情的實際又是華人的普通話不太利索的英國姑娘 Alice，中文說得異常流利梳一尾辮子的荷蘭漢子 Fred，為了能發彈舌音而做手術矯正舌頭的俄羅斯老頭安德烈。向晚的時候，甚至還有西藏來的喇嘛過來吃飯聊天。</p>
<p>我時常在想我是內向的還是外向的，彷彿沒有定數。有時羞於與人相談，有時又相談甚歡。今晚是在昆明的最後一晚，明天就去 <a href="/zh/2014/wander-in-dali">大理</a> 了。但是，也許明早我又決定先不走了，誰知道呢！</p>
<hr>
<p>Extra Tips:</p>
<ol>
<li>昆明的公共交通不好，很難等到公交車</li>
<li>昆明的飯菜裏常有薄荷，如果不喜歡，記得提前說</li>
<li>昆明氣候偏乾燥，從溼潤地過來的人注意保溼</li>
</ol>
<div class="footnotes">
<hr>
<ol><li id="fn-gull"><p>紅嘴鷗是昆明冬季的一大特色，現在正是紅嘴鷗離開昆明的時間。<a href="#fnref-gull" rev="footnote">&#8617;</a></p></li>
<li id="fn-viola"><p>有一個生物學的博士同學真好，每每遇到不認識的植物，拍照問問總能得到正確答案。<a href="#fnref-viola" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[閱乎，你好]]></title>
        <link href="http://lepture.com/zh/2014/introduce-yuehu"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-03-31T02:30:00+08:00</updated>
        <published>2014-03-31T02:30:00+08:00</published>
        <id>http://lepture.com/zh/2014/introduce-yuehu</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>這篇文章放在草稿箱裏已經兩週了，標題改了又改刪了又刪，始終無法起一個滿意的標題，也始終無法動筆寫下正文。一方面是因爲近來中文閱讀量太少，缺乏中文語感，另一方面也是因爲 <a href="https://yuehu.io/">閱乎</a> 做得還不夠好。</p>
<p>可是看到 <a href="http://yedingding.com/2014/03/12/bootstrapping-your-startup-idea.html">@yedingding 說</a>：</p>
<blockquote><p>我们每天都能给自己找很多理由说发布时机未到，比如产品不够完美需要再改进，比如怕给用户的第一印象不好， 比如如果有某些新功能会更好，比如还需要再多测试一会，尤其是当资金暂时充足时。请放弃这些想法，ship it，ship it，不要怕。</p>
</blockquote><p>雖然這並不是創業，閱乎對我而言是一個 side project，我仍然需要一份工作來養活自己。但是道理是一樣的，也許我應該寫一篇介紹閱乎的「軟文」了。</p>
<h2>閱乎是什麼</h2>
<p>你從名字就可以看出來，<a href="https://yuehu.io/">閱乎</a> 是一個閱讀的地方，但是這樣一個解釋是毫無意義的。要解釋閱乎是什麼，就不得不談一談閱乎的歷史。</p>
<p>2012 年夏末，我們短暫嘗試過由少量編輯每日推薦中文互聯網上的精華文章，每篇文章都包含我們的推薦語。那個時候，我們的域名是 <a href="https://yuehu.io/">yuehu.me</a>。</p>
<figure><img src="//dn-lepture.qbox.me/blog/original-yuehu.png/thumbnail" alt="最初的閱乎" /><figcaption>最初的閱乎，每篇文章都包含我們的推薦語</figcaption></figure><p><a href="http://lishun.me/">李順</a> 是這樣描述的，「一篇文章 + 我們的推薦語 = 閱乎」。但是寫推薦語是一件挺耗費腦力的事，尤其是像我，沒有 <a href="http://imquyi.com">@rangerqu</a> 的才華，沒有 <a href="http://www.fangkc.cn">方可成</a> 的洞見，沒有 <a href="http://ritawu.me/blog/">@rita</a> 的學識，總害怕寫出的東西毫無意義。除了挖苦與諷刺，我能寫點什麼呢！這樣耗費人力而又沒有收入的事很難長久，加上大家都是有身份證的人，時間總是不夠用的。</p>
<p>後來的改版我便去掉了寫推薦語，改爲展示摘要，畢竟推薦的主體還是文章，讀者想看的也是文章。但是我們做了一件額外的事——更良好的閱讀體驗，也做了一件多餘的事——在閱乎寫作。這些變化與錯誤，你都可以在 <a href="https://yuehu.io/about/1">關於閱乎</a> 一文裏察覺到。</p>
<p>現在的閱乎，套用李順的定義：一篇推薦 + 更好的閱讀體驗 = 閱乎。當我說更好的閱讀體驗時，其實並沒有太大的底氣，許多網站的閱讀體驗都不錯的，比如我的個人博客，比如你看到的這篇文章。但是還有一些時候是這樣的：</p>
<figure><img src="//dn-lepture.qbox.me/blog/yuehu-vs-sina.png/thumbnail" alt="新浪與閱乎" /><figcaption>新浪博客應該是我見過的最爛的博客服務商了，但是不明白爲何有這麼多人用</figcaption></figure><p>真實效果對比 <a href="http://blog.sina.com.cn/s/blog_4cd5148f01018amn.html">新浪</a> vs <a href="http://yuehu.io/editors-picks/77">閱乎</a>，或者 <a href="//dn-lepture.qbox.me/blog/yuehu-vs-sina.png">查看大圖</a>。</p>
<h2>道德困境</h2>
<p>閱乎會抓取網頁，解析出該網頁的正文內容，在閱乎展示，以達到「更好的閱讀體驗」。但是這樣的做法，就我個人而言是不妥的，近乎於盜竊。我自己的博客內容當然是無所謂的，但是你可能並不樂意。</p>
<p>一方面我希望你能在閱乎有一個愉快的閱讀體驗，一方面我也希望閱乎能給別人帶去讀者。這兩者之間有矛盾，但又不僅僅只有矛盾。比如前幾天推薦的 <a href="http://yuehu.io/editors-picks/124">我爲什麼是一個悲觀主義者</a> 便爲木遙 <a href="https://twitter.com/lepture/status/448347448423882752">帶去了</a> <a href="http://guojing.me/blog/2014/03/25/i-am-still-blogging/">讀者</a>。</p>
<p>我曾嘗試過在閱讀文章頁面載入原網頁的 iframe，默認展示原網頁，在頂部提供一個「在閱乎閱讀」的按鈕，當點擊該按鈕後，展示閱乎解析後的內容。但是許多網站是不允許作爲 iframe 被載入的，於是你可能 <a href="https://twitter.com/acgtyrant/status/445467368383193088">看到的是一片空白</a>。</p>
<p>在嘗試了幾種方案後，現在的形式是儘可能的鏈接到原文，同時也提供在閱乎閱讀的功能。比如你看 <a href="http://yuehu.io/editors-picks">編輯推薦</a>，當你瀏覽該頁面時，點標題會跳轉到原網頁，而標題正是讀者最喜歡點擊的部分，將標題鏈接設爲原網頁，正好體現了「儘可能的鏈接到原文」。假如你在閱乎閱讀，假如你要在閱乎閱讀  <a href="http://yuehu.io/editors-picks/130">清人笔记里的广东“老举”</a>  這篇文章，假如你沒有註冊閱乎，沒有登錄閱乎，你將無法看到全文內容，你只能看到摘要。這樣做並非爲了逼迫讀者註冊閱乎，大多數時候，讀者是懶得註冊的，設置這樣一個門檻正是爲了爲原文帶去讀者。</p>
<p>我也不知道怎麼樣的方式更好，一種「又要當婊子，又想立牌坊」的尷尬。如果你有更好的方案，歡迎反饋給我。</p>
<h2>推薦什麼</h2>
<p>閱乎目前主打的功能是「合輯」，這是一個由多人（也可以是一人）編輯維護的文章集，代表了某類話題下這些編輯的口味。推薦什麼內容由人決定，而不是機器與算法。</p>
<p>李順曾在最初的關於閱乎裏寫道：</p>
<blockquote><p>聪明的软件工程师、科学家们在研究“推荐算法”，就是为了能够从互联网上挖掘出值得一读的内容。
这要是成功了，就可以用极低的成本解决上面说的问题。利用现有的技术，你已经能够每天读到一份由机器自动生成的，只属于你个人的“杂志”了。</p>
</blockquote><p>這種「只屬於你個人的雜誌」不會在閱乎出現。一是我並沒有這份實力，二是我並不認同這一概念。木遙在 <a href="http://blog.farmostwood.net/697.html">我爲什麼是一個悲觀主義者</a> 一文裏提到了「社會的極化」這樣一個觀點：</p>
<blockquote><p>一旦每个人可以定制自己的视野，他就会放弃倾听、宽容和讨论的责任，只是躲在自己的天地里任性地选择自己喜欢的声音。长此以往，每个人都会沿着自己的方向走向极端。</p>
</blockquote><p>由人來推薦，這種對「個性化」的擔憂則不必了。因爲人總會有自己偏見，這些偏見保證了你總能接觸到非個性化的觀點，而它們便會體現在這「合輯」裏。</p>
<p>如果你有興趣經營一份合輯，主題將由你自己來決定，它可以是某一領域內的文章推薦，比如 <a href="https://yuehu.io/pythonic-notes">Pythonic Notes</a>，它也可以是無法言寓的人文類主題，比如 <a href="https://yuehu.io/editors-picks">編輯推薦</a>。</p>
<p>我將主要維護 <a href="https://yuehu.io/editors-picks">編輯推薦</a> 與 <a href="https://yuehu.io/be-a-programmer">我們都是程序員</a> 。這兩個合輯都是開放合輯，歡迎大家投遞文章。</p>
<h2>新的開始</h2>
<p>閱乎誕生很久了，然而我從未在自己的博客上寫過。這裏寫下閱乎的第一篇「軟文」，表明它已經到了能被自己認可的地步了。</p>
<p>古人云，一鼓作氣，再而衰，三而竭。已經改過數次版了，幾乎到了「三而竭」的地步。於是更新了域名，從 .me 換作了 .io，假裝是一個新的開始，而不至於立馬就竭了。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[當我談開源時我談些什麼]]></title>
        <link href="http://lepture.com/zh/2014/my-thought-on-opensource"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-03-12T18:10:00+08:00</updated>
        <published>2014-03-12T18:10:00+08:00</published>
        <id>http://lepture.com/zh/2014/my-thought-on-opensource</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>哦，不要在意這個標題。我知道你們看過《當我談跑步時我談些什麼》，也看過《當我們談論愛情時我們在談論什麼》。</p>
<p>那麼當我談開源時我要談些什麼呢？我以爲第一點要弄清楚的是開源是什麼。一般人眼裏的開源是怎麼樣的，我不知道，只能不懷惡意地揣測，大抵是指免費的可以查看到源代碼的軟體吧。</p>
<p>當然，這不過是我個人的猜測。我眼中的開源遠不止如此，開源不僅僅只有軟體和代碼。英文的開源一詞乃 Open Source，至於 Source 是什麼，並沒有明確的限定。它可以是 Open-source software<sup class="footnote-ref" id="fnref-open-source"><a href="#fn-open-source" rel="footnote">1</a></sup>，可以是 Open-source content，可以是 Open-source journalism，可以是 Open-source university，甚至於 <a href="http://en.wikipedia.org/wiki/Open_politics">Open-source politics</a>。</p>
<p>例如我曾閒暇無聊時整理過<a href="https://github.com/lepture/chinalaw">中華人民共和國的法律</a>，它不是軟體，不是代碼，但是我一樣認爲這是一個開源庫。本質上來說，它甚至不是源<sup class="footnote-ref" id="fnref-source"><a href="#fn-source" rel="footnote">2</a></sup>。但是換一個角度來看，它又是第一個整理成 Markdown 格式的法律集，那麼從這個角度來說，也可看作是源了。</p>
<p>因爲職業的關係，我所能談的也只有 Open-source code 了。但是萬不要以爲開源就只有代碼，你可以開源任何事物。</p>
<hr>
<p>你也許不知道，我是 GitHub 上最活躍的大陸華人<sup class="footnote-ref" id="fnref-github-top"><a href="#fn-github-top" rel="footnote">3</a></sup>。創建了一個又一個的開源庫，挖了許多坑，也填了許多坑。這樣看來彷彿我挺熱衷於開源的，其實不然，我是屬於消極開源的一類人。</p>
<p>例如我曾在 <a href="/en/2013/unpleasant-open-source">The Unpleasant Part of Open Source</a> 一文裏提到：</p>
<blockquote><p>We open source not because people need us. We just happen to open source things that solve our problems, and wish it may help other people.
Open source can be a business for a company, but not for individuals.</p>
</blockquote><p>開源對我來說是一件順便的事，沒有什麼崇高的目的。與理想無關，更多的是一種實用主義。我寫了一個 Python 庫，順便放在 GitHub 上做管理，順便發布到 PyPI 裏方便下載安裝。一切都是因爲順便。有時覺得對別人會挺有用的，便會特地去<a href="http://www.reddit.com/r/Python/comments/1yz7bl/markdown_parsers_in_python/">宣傳宣傳</a>。比如最近寫的一個 <a href="/en/2014/markdown-parsers-in-python">Markdown 解析器</a> <a href="https://github.com/lepture/mistune">mistune</a>。但是更多的時候，我並不會刻意去做太多，沒有那麼多精力。</p>
<p>聽起來彷彿挺沒有責任心。其實不然，我寫的東西還是很不錯的。雖然是順便爲之，測試用例、文檔卻是一樣都不會少的，而且代碼也寫得漂亮<sup class="footnote-ref" id="fnref-code-style"><a href="#fn-code-style" rel="footnote">4</a></sup>。既然有打算給別人用，文檔是必不可少的，許多程序員不喜歡寫文檔，我不在其列，我認爲沒有文檔的程序不叫開源程序。如果你有興趣，可以隨便看看我寫的文檔：</p>
<ul>
<li><a href="https://github.com/lepture/flask-oauthlib">Flask-OAuthlib</a>: <a href="https://flask-oauthlib.readthedocs.org/">flask-oauthlib.readthedocs.org/</a></li>
<li><a href="https://github.com/lepture/otpauth">otpauth</a>: <a href="https://pythonhosted.org/otpauth/">pythonhosted.org/otpauth/</a></li>
</ul>
<hr>
<p>開源代碼分兩類，一類是 Software(Application)，一類是 Library（庫）。Software 是針對使用者的，是一個可直接使用的程序；Library 是針對開發者的，爲開發者編寫代碼提供便利。比如 Gitlab 是一個 Open Source Software，而 Gitlab 使用的 Rails 框架則是一個 Library。對一般人來說，接觸的更多的應該是開源軟體。</p>
<p>初入行時，我寫過一個運行在 GAE 上的博客，這是 Software。後來慢慢就不再寫 Software 了，改寫 Library 了。因爲 Software 很容易讓我廢棄掉，一旦不再使用，就沒有動力去更新了。而 Library 則不然，你輕易不會廢棄掉，即使你不再使用，因爲功能單一明確，很容易讓別人接手。比如 <a href="https://github.com/lepture/flask-wtf">lepture/flask-wtf</a> 這個庫便是從旁人那裏接手過來的。</p>
<p>自己使用<sup class="footnote-ref" id="fnref-dog-food"><a href="#fn-dog-food" rel="footnote">5</a></sup>是一個很重要的原則。如果一個庫自己不再使用，而有其他人來提 Bug 或者 feature，我是懶得搭理的。沒有金錢收入，自己又不用，哪裏有心思修改刪增呢！以前寫了一個 Python 庫，叫 Livereload，是一個 Software。剛開始時用了一段時間，後來便廢棄了。然而不時還有人來提 issue，因爲我暫時用不着，便不太搭理人。而後靈光乍現，<a href="/en/2013/new-life-of-livereload">將 Livereload 從 Software 改成 Library</a>，便又能吃自己的狗糧了。也下定了決心，以後要少寫軟體，多寫庫。</p>
<p>但是我偶爾還會寫一些開源軟體，專注於單一的功能，代碼量足夠小。這樣即使我不再使用它，只需要花少量的時間就能了解它，修改它。最近的例子就是 <a href="https://github.com/lepture/rewatch">rewatch</a>，區區 80 幾行代碼，賞心悅目。</p>
<hr>
<p>有的同學可能覺得開源是一件很偉大的事，我頗不以爲然。大可不必看得太重，當然也不可輕賤。看得太重，便會生怯，妄自菲薄，以爲這樣崇高的事自己是做不了的。假使有志於做點貢獻，我也有些許建議。</p>
<ul>
<li>首先註冊一個 GitHub 賬戶，學習一下 Git 的使用。現在多數開源庫都託管在  GitHub 上的。</li>
<li>從使用別人的庫開始，在 GitHub 上 Star 一下別人的庫，讓開發者知道有人關注他寫的東西。</li>
<li>遇到好東西，幫忙作者宣傳一下，也算是在做貢獻</li>
<li>在使用過程中，你不可避免的會遇到各種各樣的問題，即時反饋給開發者。</li>
<li>有能力的話，不妨修復這些問題，然後給作者發 pull request，說明清楚你解決了什麼問題。</li>
<li>你遇到了一個問題，又找不到好的方案，於是你開始自己解決這些問題，同時公開了你的解決方案。</li>
</ul>
<p>我並不贊同刻意地參與，最有效的參與便是使用。在使用過程中發現問題，反饋問題，解決問題。開始的時候，多關注一些小項目，更少的代碼量有助於你理解它，發現它的問題，複雜的項目會讓人望而生怯，讓你裹足不前。</p>
<p>我並不總是在寫自己的代碼，也會給別人<a href="https://github.com/hhatto/python-hoedown/issues/5">提問題</a>，也會給別人<a href="https://github.com/chjj/marked/pull/129">發 patch</a>。但是前提是，我在使用，而且在使用過程中遇到了問題。也許你發現的並不是什麼大問題，比如文檔裏的某個單詞寫錯了，沒有關係，大膽地給作者發 pull request 吧。</p>
<p>最後，在參與的過程中注意一下「<a href="https://github.com/seajs/seajs/blob/master/CONTRIBUTING.md">如何向开源社区提问题</a>」。</p>
<div class="footnotes">
<hr>
<ol><li id="fn-open-source"><p>開源軟體，這大約就是一般人眼裏的開源，也就是所謂狹義的開源。<a href="#fnref-open-source" rev="footnote">&#8617;</a></p></li>
<li id="fn-source"><p>Source 的本意即是來源、出處、根源。<a href="#fnref-source" rev="footnote">&#8617;</a></p></li>
<li id="fn-github-top"><p>最活躍並不代表什麼，說起來也沒有什麼特別拿得出手的東西。最近活躍度變低了，名次一直在掉，但是截止到寫這篇文章依舊是大陸區第一。<a href="#fnref-github-top" rev="footnote">&#8617;</a></p></li>
<li id="fn-code-style"><p>我喜歡漂亮的代碼。漂亮多半時候指的是代碼風格，也偶爾指漂亮的邏輯。<a href="#fnref-code-style" rev="footnote">&#8617;</a></p></li>
<li id="fn-dog-food"><p>所謂 Eat your own dog food 是也。<a href="#fnref-dog-food" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown Parsers in Python]]></title>
        <link href="http://lepture.com/en/2014/markdown-parsers-in-python"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-02-26T16:55:00+08:00</updated>
        <published>2014-02-26T16:55:00+08:00</published>
        <id>http://lepture.com/en/2014/markdown-parsers-in-python</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>There are many markdown parsers in Python. Misaka was my favorite one.
However, misaka is deprecated now, and the successor which is called
hoedown still has issues to solve. That's why it is a <strong>was</strong>. But I still
love it.</p>
<p>Here is a list of markdown parsers for Python in my knowledge:</p>
<ul>
<li>Misaka: A python binding for Sundown. (CPython required)</li>
<li>Hoedown: A python binding for Hoedown, successor of Misaka.</li>
<li>Discount: A python binding for Discount. (CPython required)</li>
<li>cMarkdown: Markdown for Python, accelerated by C. (CPython required)</li>
<li>Markdown: A pure markdown parser, the very first implementation.</li>
<li>Markdown2: Another pure markdown parser.</li>
</ul>
<p>And I've just released another pure markdown parser too, which is called
<strong><a href="https://github.com/lepture/mistune">mistune</a></strong>.</p>
<h2>Misaka</h2>
<p><a href="https://github.com/FSX/misaka">Misaka</a> was my favorite markdown parser. It
is a python binding of Sundown, which means that it has all the features
that Sundown provides.</p>
<p>It is super fast! Actually, it is the top one in my benchmarks. Since it is
a binding of a C library, no wonder that it is this fast. If speed is what
you want, you should try misaka, and as well as other bindings of a C library.</p>
<p>But misaka is more than speed. It is the custom renderer feature that catches
my heart. I am so fond of it, that's why I implement the custom renderer
feature in my own markdown parser <strong>mistune</strong>.</p>
<p>A quick and very useful sample is <a href="http://misaka.61924.nl/manual/#toc_15">code highlighting</a>.</p>
<p>However, it is a binding of a C libary. It requires CPython, if you prefer
PyPy, you have no access to it. Some App Engines have a limitation on compiling
C libraries too, you can't use misaka in this case. And even if you are
using CPython, it is still difficult to install it on a Windows OS.</p>
<blockquote><p>Visual Studio's support for C is not optimal and most VS compilers are
missing stdint.h, which is needed to compile Misaka.</p>
</blockquote><p>If you are on a Windows, may god helps you. I don't care it a shit.</p>
<p>Footnote feature is missing in Misaka. Maybe many of you don't need such a
thing, in this case, misaka has nothing bad. It is stable, efficient, and
has many GFM features.</p>
<p>The only trouble is Sundown is deprecated.<sup class="footnote-ref" id="fnref-sundown-deprecated"><a href="#fn-sundown-deprecated" rel="footnote">1</a></sup></p>
<h2>Hoedown</h2>
<p>Because the Sundown library is deprecated, here comes hoedown<sup class="footnote-ref" id="fnref-c-hoedown"><a href="#fn-c-hoedown" rel="footnote">2</a></sup>,
which is the fork of the original Sundown. It has a Python binding also
called as hoedown.</p>
<p>Since Hoedown is the successor of Sundown, and <a href="https://github.com/hhatto/python-hoedown">python-hoedown</a> is the successor of Misaka, all features
that misaka has, python-hoedown has them too. But python-hoedown is more
than that.</p>
<ol>
<li>It is PyPy compatible.</li>
<li>It has footnote feature.</li>
</ol>
<p>It looks promissing, and even misaka's author recommends it. I've tried it,
but failed with one issue, <a href="https://github.com/hhatto/python-hoedown/issues/5">a magic error</a> that I can't do anything:</p>
<pre><code>terminated by signal SIGSEGV (Address boundary error)
</code></pre>
<p>This isssue is not fixed yet. Once it does, hoedown would be a good choice
for non-AE users.</p>
<h2>cMarkdown &amp; Discount</h2>
<p><a href="https://github.com/paulsmith/cMarkdown">cMarkdown</a> is much like Misaka,
except that it is based on upskirt<sup class="footnote-ref" id="fnref-upskirt"><a href="#fn-upskirt" rel="footnote">3</a></sup> rather than sundown. The
history is very interesting, sundown is a fork of upskirt, hoedown is a
fork of sundown. And now, sundown is deprecated, upskirt is missing. The
new markdown parser that vmg promised is still not available.</p>
<p>cMarkdown has all the disadvantages of Misaka, and it is a little slower
than Misaka. This means you really should use misaka instead of cMarkdown.</p>
<hr>
<p>Discount is a joke for me, I can't even install it successfully! There is
not much to say. But I do know that Discount is slower than Sundown.</p>
<h2>Markdown &amp; Markdown2</h2>
<p><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a> is the very first markdown parser in pure Python. It is
good, except the documentation. However, I miss the renderer feature in
misaka, which is not in Python-Markdown.</p>
<p>Python-Markdown is not that slow as I expected, since Python-Markdown2
calls itself as:</p>
<blockquote><p>A fast and complete implementation of Markdown in Python.</p>
</blockquote><p>But it is not true. Python-Markdown2 is much slower than Python-Markdown.
I have no idea why it says itself fast. All features that 2 has, the older
one has too.</p>
<p>The benchmark shows that Python-Markdown2 is almost twice slower than
Python-Markdown. No wonder it is 2.</p>
<h2>Mistune</h2>
<p><a href="https://github.com/lepture/mistune">Mistune</a> is a new (just released)
markdown parser. It is the <strong>fastest</strong> one in all pure Python implementations.
Almost <strong>4 times faster</strong><sup class="footnote-ref" id="fnref-bench"><a href="#fn-bench" rel="footnote">4</a></sup> than Python-Markdown in pure Python
environment, almost <strong>5 times faster</strong> with Cython's help.</p>
<p>I didn't expect it to be so fast when I wrote it. I know it would be a fast
one, but I didn't know that it would be 4 times faster and even 5 times
faster.</p>
<hr>
<p>I have never thought of creating a Markdown parser my own. But it has been
months since I reported the issue to Hoedown. The issue is still there,
not solved a bit. Because it is a C binding, I am not able to do any help,
the only thing I can do is waiting.</p>
<p>I don't use Python-Markdown or Python-Markdown2, because they have no renderer
feature, and they are slow.</p>
<p>I have <a href="/en/2013/unpleasant-open-source">introduced renderer feature to marked</a>, which is
finally merged. And now I am trying to add the <a href="https://github.com/chjj/marked/pull/351">footnote feature</a>.
It occured to me that I can port marked to Python, since I know marked well,
and I know it is the fastest in all pure JavaScript implementations. It
would be fast in Python too, and it really does.</p>
<hr>
<p>If you are looking for a fast, full featured<sup class="footnote-ref" id="fnref-mistune-features"><a href="#fn-mistune-features" rel="footnote">5</a></sup> and pure
Python implementation, Mistune is a good choice. It also has renderer
feature just like Misaka. You can always influnce the rendering results
with custom renderers.</p>
<pre><code class="lang-python">import mistune
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter

class MyRenderer(mistune.Renderer):
    def block_code(self, code, lang):
        if not lang:
            return &#39;\n&lt;pre&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/pre&gt;\n&#39; % \
                mistune.escape(code.strip())
        lexer = get_lexer_by_name(lang, stripall=True)
        formatter = HtmlFormatter()
        return highlight(code, lexer, formatter)

renderer = MyRenderer()
md = mistune.Markdown(renderer=renderer)
print(md.render(&#39;Some Markdown text.&#39;))
</code>
</pre><h2>Additional Notes</h2>
<p>I did a benchmark on my MacBook Air, <a href="https://github.com/lepture/mistune/issues/1">view the results</a>.
You can run the benchmark script yourself: <a href="https://github.com/lepture/mistune/blob/master/tests/bench.py">bench.py</a></p>
<pre><code>Parsing the Markdown Syntax document 1000 times...
Mistune: 12.7255s
Mistune (with Cython): 9.74075s
Misaka: 0.550502s
Markdown: 46.4342s
Markdown2: 78.2267s
cMarkdown: 0.664128s
Discount is not available
</code></pre>
<hr>
<p>Mistune can be compiled with Cython if you have Cython installed already.</p>
<pre><code>$ pip install cython mistune
</code></pre>
<p>The magic happens in the <code>setup.py</code> script. I'd like to introduce this part
another time.</p>
<p><em>This post and all posts in markdown format on this site are rendered with
mistune.</em></p>
<div class="footnotes">
<hr>
<ol><li id="fn-sundown-deprecated"><p>Sundown is deprecated a year ago with a <a href="https://github.com/vmg/sundown/commit/37728fb2d7137ff7c37d0a474cb827a8d6d846d8">commit</a> by vmg, but the new markdown parser is still missing.<a href="#fnref-sundown-deprecated" rev="footnote">&#8617;</a></p></li>
<li id="fn-c-hoedown"><p>Hoedown is a fork of Sundown, it is a C library. It reverted the <a href="https://github.com/hoedown/hoedown/commit/aa43a77283c613662033039eddb477f2e0fd3d63">deprecated message</a> 5 months ago.<a href="#fnref-c-hoedown" rev="footnote">&#8617;</a></p></li>
<li id="fn-upskirt"><p>Links about upskirt are missing now, they are all 404.<a href="#fnref-upskirt" rev="footnote">&#8617;</a></p></li>
<li id="fn-bench"><p>I've did a benchmark on all markdown parsers I know. <a href="https://github.com/lepture/mistune/issues/1">Checkout the Benchmarks</a>.<a href="#fnref-bench" rev="footnote">&#8617;</a></p></li>
<li id="fn-mistune-features"><p>Mistune is full featured, it has autolink, strikethrough, table,
fenced code, footnotes. And you can't disable them. I believe that
it is a good design to enable all these features, since they are the
standards in the real world now.<a href="#fnref-mistune-features" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[成熟這種病]]></title>
        <link href="http://lepture.com/zh/2014/when-you-grow-up"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-02-21T00:00:00+08:00</updated>
        <published>2014-02-21T00:00:00+08:00</published>
        <id>http://lepture.com/zh/2014/when-you-grow-up</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <blockquote><p>你這樣做又有什麼用呢？這在天朝算個什麼事！</p>
</blockquote><p>你時常能聽到這樣的聲音吧？或許你就是這聲音的吟誦者。你一點一點長大，失去了好奇心，失去了探索欲，妥協<sup class="footnote-ref" id="fnref-compromise"><a href="#fn-compromise" rel="footnote">1</a></sup>，退讓，連帶着連別人的反抗也要嗤之以鼻了。你把這叫成熟<sup class="footnote-ref" id="fnref-not-accomplished"><a href="#fn-not-accomplished" rel="footnote">2</a></sup>。</p>
<p>哦，這說的不是你，也許是我，未來的我。請你不要介懷。我時常擔心自己也會麻木，需要點自我暗示。有時想想，其實有點多餘，因爲我經常能被稱作幼稚呢！</p>
<hr>
<p>昨天 @chloerei 提了一句「<a href="https://twitter.com/chloerei/status/436499925652602882">自己不做，还要泼别人冷水</a>」。這說的是 V2EX 上的一篇帖子，<a href="https://www.v2ex.com/t/100888?p=1">我向工业信息化部发了一份申诉，为了 GitHub</a>。</p>
<p>其實我並不知道 GitHub 又出問題了，因爲之前出過一次，已經把 fastly 的 CDN 加入到代理列表裏了。可惜沒有邁出投訴的一步。無論如何，有人邁出了這一步，而後還有附議者，總是叫人高興的。</p>
<p>於這幸事之中又不免打擊之言——「我不怀疑，肯定无效」。</p>
<p>也許吧。即使是徒勞的反抗，但那又怎麼樣！有些事的意義不在於做成功了，而在於做的過程。更何況，我是相信有效果的。</p>
<blockquote><p>你可能不是第一个申诉，但也不会是最后一个。</p>
</blockquote><p>这句评论颇有点巴士运动<sup class="footnote-ref" id="fnref-bus-boycott"><a href="#fn-bus-boycott" rel="footnote">3</a></sup>的味道，因为「帕克斯不是第一位在巴士上拒絕讓座給白人的黑人」。Rosa Parks<sup class="footnote-ref" id="fnref-rosa-parks"><a href="#fn-rosa-parks" rel="footnote">4</a></sup> 在当时也不是名人，与「李开复、周鸿祎」更是没得比。</p>
<p>稍晚些時候，收到 rnw.org 的採訪郵件，詢問我對 GitHub 被屏蔽一事的看法，以及此事對我的影響。因爲忙於寫<a href="https://github.com/lepture/mistune">一個庫</a>，沒能及時回覆，深表歉意。</p>
<hr>
<p>這件事倒讓我想起之前的<a href="https://www.v2ex.com/t/57677">每日投诉电信计划</a>了，是關於中國電信在網頁中插廣告的事。結果挺好的，中國電信停止向寬帶用戶推送第三方廣告。（那電信自己的呢？，存疑。）</p>
<p>雖然我不能肯定自己起到了什麼作用，恐怕主要還是靠 @Fenng 等關注者多的人，因爲名人的影響力在那裏嘛。但是做過了，而且堅持了那麼久，還是挺開心的，當作形爲藝術罷。</p>
<p>這過程裏，傷害了不少客服的心，頗過意不去。也收穫了詆譭與讚譽。譭之者不過言「蚍蜉撼大樹」，仿佛我不知道似的。</p>
<hr>
<p>知乎有一句廣告辭——<strong>認真你就贏了</strong>。深得我心。成熟卻讓你失去了較真的勇氣，總是在關鍵時刻提醒著你：這樣做又有什麼用呢？更何況，還有「被送快遞」的風險。</p>
<p>政治味稍微多了點，談一個更生活化的例子。比如說智能手機，即使你一遍遍地教過了父母，但是他們依然手足無措。你給一個小孩子玩，什麼都不用教，過會兒他就會用了，即使他還不識字。</p>
<p>小孩子無所畏懼，拿到手上左按按右按按，按得多了也就會了。但是父母不會，他們從不左按右按，總是依照你所教的步驟一步一步按下去，還總是擔心按錯了。這就是成熟病呀。他們不曾想，即使按錯了也沒什麼大不了的。正如你想多了一樣，「查水表」這種事並不會輕易發生。</p>
<p>你看，雖然我寫得一塌糊涂，完全不知所云，但是仍然有發表出來的勇氣，也見得暫未患這成熟病了。最後送上顾城的一首詩，望君喜歡。</p>
<blockquote><p>天是灰色的<br>路是灰色的<br>楼是灰色的<br>雨是灰色的<br>在一片死灰中<br>走过两个孩子<br>一个鲜红<br>一个淡绿</p>
</blockquote><div class="footnotes">
<hr>
<ol><li id="fn-compromise"><p>中文妥協一詞與英文 compromise 頗不相同，中文的妥協更多時候只是一方的退讓。<a href="#fnref-compromise" rev="footnote">&#8617;</a></p></li>
<li id="fn-not-accomplished"><p>當我談成熟時，這個成熟只限定於本文的意義。它是非普適的，亦不是你認爲的意義。<a href="#fnref-not-accomplished" rev="footnote">&#8617;</a></p></li>
<li id="fn-bus-boycott"><p>The Montgomery Bus Boycott, a seminal event in the U.S. civil rights movement, was a political and social protest campaign against the policy of racial segregation on the public transit system of Montgomery, Alabama.<a href="#fnref-bus-boycott" rev="footnote">&#8617;</a></p></li>
<li id="fn-rosa-parks"><p>Rosa Louise McCauley Parks was an African-American civil rights activist, whom the United States Congress called "the first lady of civil rights" and "the mother of the freedom movement".<a href="#fnref-rosa-parks" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[New life of livereload]]></title>
        <link href="http://lepture.com/en/2013/new-life-of-livereload"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-12-31T13:30:00+08:00</updated>
        <published>2013-12-31T13:30:00+08:00</published>
        <id>http://lepture.com/en/2013/new-life-of-livereload</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>I created <a href="https://github.com/lepture/python-livereload">livereload</a>
(implemented in Python) one year and 8 months ago. The first version was
released on May 4th, 2012. I had been working on it for a while, but I
didn't enjoy it myself.</p>
<p><a href="http://livereload.com/">LiveReload</a> is a Mac software that monitors
changes in the file system. A quote from the official website:</p>
<blockquote><p>As soon as you save a file, it is preprocessed as needed, and the browser
is refreshed.</p>
</blockquote><p>And my implementation in Python is a command line tool that simulates the
behavior of LiveReload, a bit like <a href="https://github.com/guard/guard">guard</a>.</p>
<p>The reason why I created this project is pretty simple. I was working in a
Python-only development environment, it would be nice that everything is
in Python. However, things changed in the last year, I am more a front end
developer than a back end pythonist. I enjoy nodejs, I also enjoy other
languages like ruby and golang.</p>
<p>Anyway, I don't like to start another server for watching file changes only,
the original design of Guardfile is not good enough, at least I am not
satisfied. The simulation just doesn't work for me.</p>
<blockquote class="cite-quote"><p>most things have some design behind,
as people copy it, the original design gets obscured and forgotten,
the original design might no longer apply</p>
<cite>Armin Ronacher</cite>
</blockquote><p>This is a slide of a talk by Armin Ronacher — <a href="https://speakerdeck.com/mitsuhiko/thinking-outside-the-box">Thinking Outside The Box</a>.</p>
<h2>Create something I will use in the daily life</h2>
<p>The original copied one has nothing new, nothing special for Python that
I would use it in my daily life. This makes me sad. So I have no much
enthusiasm in the maintainence of it.</p>
<p>But I do believe that livereload is a good idea. Maybe I just did it wrong.
One day, a brilliant idea came to me — livereload for wsgi.</p>
<p>A simple example of the idea:</p>
<pre><code class="lang-python">from livereload import Server

server = Server(wsgi_app)
server.watch(&#39;static/app.css&#39;)
server.serve()
</code>
</pre><p>Wow, that looks good. It seems something that I will use in my daily life.
Since I prefer Flask, I can write the scripts with Flask-Script in a
<code>manage.py</code> file:</p>
<pre><code class="lang-python">app = create_app()

@manager.command
def liveserver(port=5000):
    from livereload import Server
    server = Server(app.wsgi_app)
    server.watch(&#39;static/*.css&#39;)
    server.serve(port=port)
</code>
</pre><p>And whenenver a css file changes, the browser will refresh it itself.</p>
<p>Actually, my environment of front end development is far more complex,
I use rework for css processing, component for javascript modular. The
real example would be gorgeous.</p>
<p>Take a peep of my scripts:</p>
<pre><code class="lang-python">@manager.command
def liveserver(port=5000):
    from livereload import Server

    server = Server(app.wsgi_app)
    server.watch(&#39;assets/styles/*.css&#39;, &#39;make -C assets rework&#39;)
    server.watch(&#39;assets/lib/*.js&#39;, &#39;make -C assets build&#39;)
    server.watch(&#39;app/templates&#39;)
    server.serve(port)
</code>
</pre><h2>Do one job, and do it well</h2>
<p>Version 2.0 of livereload is more a library rather than an application.
Which means other libraries in Python can easily bundle it in. I hope it
can be a great library.</p>
<p>The executable command line tool is removed from livereload. It may come
back again, but not soon. The compilers like uglifyjs, lesscss, slim,
CoffeeScript are removed from livereload too.</p>
<p>For now, livereload will focus on one thing — livereload. And livereload
well.</p>
<p>The lack of compilers does not affect much. Since livereload provides you
a way to execute shell command. As you can see in the above example that
<code>server.watch</code> supports executing shell commands, so that we can do:</p>
<pre><code class="lang-python">server.watch(&#39;src/foo.js&#39;, &#39;uglifyjs src/foo.js -m -o build/foo.js&#39;)
</code>
</pre><p>That's why compilers are removed, since every compiler is some sort of a
shell command, there is no reason for wrapping them in Python any more.</p>
<p>By removing compilers, livereload focuses on the server implementation,
and file watcher. The core code is much simple now.</p>
<h2>Take advantage of existed tools</h2>
<p>We programers like to reinvent tools. Sometimes we create things better
than the old ones, sometimes we fail. The most valuable tool I learned
in the last two years is Makefile.</p>
<p>I think every programer should know Makefile, and take the advantage of
it. Like what I did/do in my daily life. The examples above are using
Makefile:</p>
<pre><code>server.watch('assets/styles/*.css', 'make -C assets rework')
</code></pre>
<h2>The future</h2>
<p>The rewritted version 2.0 of livereload was released days ago. There are
features not implmented, bugs not fixed, but the concept works well. It
is not just an implementation <strong>of Python</strong>, it is an implementation
<strong>for Python</strong>.</p>
<p>The code is much more pretty than before. It is well documented and tested.
I hope people will enjoy it. It is a library now, I am looking forward to
libraries that depend on this project and making the web development of
more fun.</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Unpleasant Part of Open Source]]></title>
        <link href="http://lepture.com/en/2013/unpleasant-open-source"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-12-06T16:40:00+08:00</updated>
        <published>2013-12-06T16:40:00+08:00</published>
        <id>http://lepture.com/en/2013/unpleasant-open-source</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>It has been 9 months since I sent the <a href="https://github.com/chjj/marked/pull/129">renderer feature</a> to marked.
It was merged some days ago, when I finally lost my patience and created
a forked project named <a href="https://github.com/lepture/markit">markit</a>.</p>
<p>I do not suggest you use markit right now. We are working on marked. And
we hope that renderer feature will be available soon.</p>
<hr>
<p>Why it takes so much time for one pull request? Reason varies from people
to people. Maybe he is focusing on other projects. Maybe he just doesn't
like this feature. Maybe FUD.</p>
<blockquote class="cite-quote"><p>marked does so many weird optimizations that I'm worried only I understand</p>
<cite>Christopher Jeffrey</cite>
</blockquote><p>I don't blame <a href="https://github.com/chjj">Christopher Jeffrey</a>. On the
contrary, he did a great job. marked is a well written, good designed
project. I appreciate his humility for I've read the code of markdown-js
which I am just too stupid to understand.</p>
<p>It is usually the fear of breaking things, the uncertainty of the changes,
and the doubt of the people that stops us.</p>
<hr>
<p>We open source not because people need us. We just happen to open source
things that solve our problems, and wish it may help other people. Open
source can be a business for a company, but not for individuals.</p>
<blockquote class="cite-quote"><p>Lots of people in the Open Source community develop something that solve
particular problems they have themselves.</p>
<cite>Armin Ronacher</cite>
</blockquote><p>I created <a href="create-oauth-server">Flask-OAuthlib</a> for my own, because I
needed to create an OAuth 2 server at that time. I contribute to OAuthLib,
because I need to fix that bug or add that feature for Flask-OAuthlib. I
don't contribute for my own amusement.</p>
<p>Armin Roncher wrote in his recent post <a href="http://lucumr.pocoo.org/2013/11/28/emotional-programming/">Emotional Programming in Open Source</a>:</p>
<blockquote><p>I found it quite hard this year to work on my own projects because the
bug trackers were full of things I personally did not really care about.
The things I wrote over the last few years all work so well for me, that
I don't need to fix problems or add things.</p>
</blockquote><p>That is true for individual devlopers. At least that is true for me.</p>
<p>Individual developers open source in their own time, they don't get paid.
However, sometimes, they are too good to accept features that they don't
care. This is the time for us to give our thanks, our stars and our tweets.</p>
<hr>
<p>Our stars and tweets matter a lot. A good library should be promoted. Yes,
I mean <a href="https://github.com/idan/oauthlib">OAuthLib</a>. The funny things is that python-oauth2 has
more stars than OAuthLib. python-oauth2 is not really designed for OAuth 2,
it is OAuth 1. What a sarcastic reality!</p>
<p>That's why we should promote the good libraries. Let them to be known. This
encourages developers and makes them happy — but sometimes it may be a
burden to them.</p>
<p>It takes time to build a good library — the design, the documentation, and
the test cases.</p>
<hr>
<p>Somtimes, when you finish a good project, a good name for your project is
already taken by another people. And when you find out that it is only a
spawn of a unix command, you feel angry that you have to name your project
as "something 2". That is really disappointed.</p>
<p>May you happy, may the developers happy.</p>
<blockquote><p>high quality of lots of Open Source code is that the developers are
generally happier writing it</p>
</blockquote> ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[寫一篇武俠等讀者]]></title>
        <link href="http://lepture.com/zh/2013/wuxia-novel"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-12-03T21:11:00+08:00</updated>
        <published>2013-12-03T21:11:00+08:00</published>
        <id>http://lepture.com/zh/2013/wuxia-novel</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>這是一篇武俠小說，是 2008 年寫作的，可是未完成。前些時候，翻閱以前練手的作品，無意間發現的，可是竟想不起來要寫一個甚麼樣的故事了。</p>
<p>這一系列，前後快五萬字了，但是我對後面的故事並不滿意。即使滿意了，也不知道接下來要寫些甚麼，所以不如推倒重來，重新構思一個故事。遺憾的是，我並不擅長寫故事，我喜歡寫景，寫環境，寫氛圍，寫心理，唯獨故事是個軟肋。如果將這些裝飾去掉，這個故事恐怕又無趣極了。</p>
<p>但是楔子部分我還是挺喜歡的，雖然很多情節的發展無法理解，有些情景又過於飄逸，人物塑造沒有特點。可是畢竟是自己寫的，總忍不住要包庇一下。如果有可能的話，希望能夠寫完。</p>
<p>之前申請了一個郵件列表 <a href="http://tinyletter.com/lepture">tinyletter.com/lepture</a>，我將在這個郵件列表裡更新新的章節。如果有興趣的話，請訂閱之。訂閱者多於 200 人後，我將開始構思這個故事。所以想要繼續看下去的同學，廣泛傳播之。</p>
<p>下面先預覽一下我將保留的楔子部分吧。</p>
<h2>楔子</h2>
<p>桂花蒸的夜，到处弥漫着一股热烘烘的清新。刚过了中秋，月还是银盘似的满月，然而月光不像平时般清冷，是暖玉里散发出的光泽，温润莹澈。</p>
<p>月光照朱楼，照在二楼的丫鬟鸣翠身上。她着一袭翠竹底色的描白敞袖褂子，下面是藕合色齐踝长裙，发钗已经退去了，头发顺背直披下来。这时候她正凭栏远望那一轮圆月，凭空里轻声叹了口气。她卷起袖子，两只胳膊搭在栏干上，月光直泻过来，越发显得她膀子白净了，然而偏偏于这白净的手臂上刻下了几道血痕，是鞭子抽打过的。鸣翠低头瞟了瞟，咬了咬嘴，便又向着月亮瞧去。</p>
<p>她屋里还有两个丫鬟同住，下人们的住所自然是略嫌挤些，倒没什么可抱怨的。她听到身后有动静，便回过头来看了看，是鸣微。</p>
<p>鸣翠便放下了袖子，问她道：“你怎么醒了？”</p>
<p>鸣微掀起毯子下床过来，伸了伸胳膊，舒展一下筋骨，道：“这天怪热的，竟被热醒了！你怎么还没睡？”</p>
<p>鸣翠便又转过头去看月亮，轻声道：“虽然热，你倒是披一件衣裳，比不得夏天，到底是入了秋，仔细着凉。你也过来看月亮吧。”</p>
<p>鸣微笑道：“哪里就着凉了！”说着便过去了。她只穿了一件月白色里背心，光着脚，头发是枕过后的凌乱的发式，她便张手理了理，拉顺了披到背后。鸣微道：“你倒是好心，你们大姑娘竟不曾替你想过？手伸过来给我看看，我这里还有些药膏，是上月张大夫来时我私底下向他要的，拿来给你涂涂。”</p>
<p>鸣翠苦笑道：“我们小姐也真是命苦了，自小便死了亲娘，而今大了些，老爷竟要将她嫁给一个傻子，换了是我，我也是不肯嫁的。”</p>
<p>鸣微叫道：“哎呀呀，大小姐。你左右不过一个丫鬟，将来最多不过放出去配个小厮罢了。你倒想想，楚王的傻儿子总要强过那些灰孙子的灰儿子吧。”</p>
<p>“你们嚷什么呢？还不睡么！”是屋子里另一个丫鬟的声音。</p>
<p>鸣翠轻声道：“小声点吧，别把她给吵起来了。——我们是丫鬟，小姐可不是。阖府上下，哪个不觉得把小姐嫁给个傻子委屈了小姐！就我们这样的人家，要招俊俏哥儿作上门女婿，那少说也得来个千把人。真搞不懂老爷是怎么想的，居然要将小姐嫁给个傻子！”</p>
<p>鸣微道：“你倒是少说点吧，仔细给人告去了老爷，又是一顿好打！其实老爷也不容易了，自从夫人去了，这么些年来也没——阿嚏！”</p>
<p>鸣翠道：“快进去焐一焐。我说的吧，叫你仔细着了凉，你又不听。哎呀，经你一闹，搅得人越发睡不着了，你快进去睡去，让我一个人静静，过会儿也好去睡觉。”</p>
<p>月影映在蟹色的暮空里，仿佛一张药膏子，贴在划破了的天空，一息突兀的沉痛。鸣翠终究没有睡下，直愣愣地瞧着远方，“不知道小姐现在怎么样了？！”</p>
<hr>
<p>她小姐叫李溆茗，刚过了十五岁，正是谈婚论嫁的年纪。她是从下人那里听说的，她父亲给她说了个傻子夫婿。她自然不肯，同父亲闹也没有结果，没奈何，只好求着丫鬟鸣翠帮忙打点一下，疏通疏通家里的奴仆，自己备了细软逃出府去。</p>
<p>买舟南下，至公安歇脚。</p>
<p>她这还是第一次出门，格外兴奋，对一切事物倍感新鲜。然而快乐总是不长久，包袱很快便弄丢了，也不知是被偷去了还是自己给忘在哪里了，但是结果总是一样，自己已经陷入了穷困。幸好还有些许随身的饰物可以拿去当掉，也足够回家了。</p>
<p>可是真的就这样回家么？她不甘心，怎么会甘心！才出走两日便回府，叫人知道了还不笑掉大牙！她咬了咬牙，狠下心来，怎么也得过上一个月再回家，现在就留在公安吧，得熬且熬。</p>
<hr>
<p>八月廿四，这并不是一个特殊的日子，平凡的早晨，平凡的街市，平凡的人们以及他们平凡的吵嚷声。太阳还未升起，天已经放白，菜市场里一阵喧闹，卖菜的小贩与买菜的妇人叨唠着价钱，为一文钱而争得面红耳赤。</p>
<p>溆茗嗤鼻而笑，她当然不能嘲笑他们的小器，她也不愿意去嘲笑这些人，有什么可笑的呢！她只是自嘲——她竟连一文钱都没有了！这实在太可笑，她连值得一当之物都没有了，只有这一身的丝绸箭袖还值些钱，但是现在恐怕也不值钱了，纵使很值钱，她也不能去当掉。她这时散步于菜市场中，蓬松的头发凌乱着，沾满了灰尘泥垢，土灰色的脸上纵横几笔无奈，土灰色的衣衫上镂空几缕破洞，是纯粹的土的灰色，一种不起眼的色彩。</p>
<p>菜市场并不只卖菜，有时还有卖粥卖馒头的。像屠夫的刀，也并不只是宰猪宰牛的，有时候它还可以宰人。卖粥的开始吆喝起来：“粥，热乎乎的粥，一文钱一碗咯！”卖馒头的也接着吆喝道：“馒头咯，两文钱三个咯！”</p>
<p>溆茗朝他们瞪了一眼，心里恨恨道：“嚷什么嚷！真烦人，把人家肚子都给叫饿了。”可是她没有钱，她第一次深陷于这潦倒的尴尬境地，只有无可奈何地叹气，甚至自己都开始怀疑起当初的决定了，心下悔恨：也许嫁给楚王的那傻儿子至少比现在强些吧。</p>
<p>这次的离家出走，她经历了许多的第一次，第一次出了荆州城，第一次乘船，第一次住客栈，第一次进当铺……第一次流落街头，现在又是第一次乞讨，而且还是向卖馒头的小贩乞讨，倘若被拒绝，那可真是无地自容了。幸而这小贩心还好，给了她两个馒头，溆茗心里默默祝道：“将来必定加倍奉还。”可是她没出声，说了别人也只有把她当疯子，徒惹嘲笑。</p>
<p>菜市场里忽然起了异样的声音，也是吵嚷，然而不似先前的那般平和的吵嚷，夹杂了几许恐慌。是几个无赖前来捣乱，一阵推扰着向溆茗这边过来，他们倒并非冲着她来的，不过正好溆茗在市场的一头，他们是从另一边砸过来的，稀稀啦啦乒乒乓乓，先来个下马威，震住了小贩们，才方便收保护费嘛。</p>
<p>溆茗又多了一个第一次的经历，第一次被无赖围了起来，看他们张牙舞爪地一点一点逼近。她不住地向后退去，不过三四步便抵着一块案板了。</p>
<p>“是个娘们，洗一洗兴许还挺标致的，咱们抓回去卖给叶大娘倒也不错。”是一个无赖的声音。很动听的声音，天生的歌喉里的声音，可是偏偏用来说了这样的句子，是对才能的浪费也是对才能的侮辱！</p>
<p>突然，一切都静了下来。</p>
<p>太阳已经露出了轮廓，在景泰蓝的天空绘出酡红的一轮圆，又将这酡红溢射出去，醉染了附近的云朵，也醉染了溆茗的面颊。无端的，于这醉人的柔和的日光里现出一张俊秀的脸庞来，线条明晰的轮廓，方脸，浓眉，鹰鼻，细唇，只是眼神里却一片散漫与颓丧，不似他身体一般的精神抖擞。他穿一件淡桃色无绣丝制长袍，拦腰一围浅黄色丝巾玉绦，下面是灰白描翠的裤子，土色布靴，没有束冠，长发披肩而下，略嫌零乱。</p>
<p>六个无赖定格在了那里，还是原先的姿势，唯一的不同便是多了喉头上的一滴血。他过到一个无赖身前，右手食指抹去了那一滴血，又顺手擦在了自己衣服上。他就这样依次地将六滴血都抹到了衣服上，然而衣服上没有留下血迹，血像活了一般，融入到这淡桃色里，使这份淡桃色浓了些许艳丽。</p>
<p>无赖们还是不动，画面永久地定格在了那里，不仔细看，连伤口都没有，简直就是活生生的动弹不得的人。他俯身到溆茗这边，伸手过来；溆茗瞧了瞧，觉得满心的愉快，也就搭手过去了。两个人离开菜市场，隐没在了人群里，菜市场也就回复了往日的平和的吵嚷，像是做了一个梦，然而现在又醒了。</p>
<hr>
<p>街道上开始热闹起来，大多数的店铺也已经开门做起了生意。</p>
<p>溆茗被带去洗过澡换过衣衫，她又回复了往昔的小姐模样，虽然衣着并不十分华贵。一袭玉黄的长布衫子，土褐色粗布裤子，黑色布靴，可是她面色红润，在这不施粉黛的眉目间透露出几许清丽脱俗，发式挽了个叠嶂的云髻，于发束插了支里黄的玉簪。溆茗觉得还满意，他应该会喜欢的。</p>
<p>他们走在街道上，手牵着手，招惹来路人的侧目而视。可是他们不理会，依旧我行我素旁若无人地走着。</p>
<p>溆茗仰头问道：“我们这是要去哪里？”</p>
<p>公子依旧迈步向前，答道：“荆州。”</p>
<p>溆茗不禁一震，仍是仰面望他道：“去荆州干什么？”</p>
<p>公子的回答依旧简单——“杀人。”</p>
<p>溆茗嘴角微微翘起，露出一息狡黠的笑，她问道：“杀谁？”</p>
<p>公子道：“楚君子。”</p>
<p>溆茗问道：“谁？”</p>
<p>公子道：“李君如。”</p>
<p>溆茗一颤，“啊”了一声，呃然问道：“为什么？为什么要杀他？”</p>
<p>公子停下脚步，回过头来，一脸严肃，道：“我讨厌君子。君子比无赖更叫人讨厌。我恨他们。我要杀尽天下的无赖与君子。”</p>
<p>溆茗紧紧握住他的手，咬牙道：“如果我求你别去杀他，你愿不愿意？”</p>
<p>公子摇了摇头。</p>
<p>“如果换作我求你别去杀他，你可愿意？”这声音来自遥远，然而仿佛又是近在咫尺，每一字都清清楚楚地落在了公子的耳朵里。</p>
<p>公子拦腰抱起溆茗，箭步如飞奔向那个声音。</p>
<p>街市一阵骚动。</p>
<hr>
<p>这时候出城的多是农人，才刚刚卖过了蔬菜，现在又要匆匆赶着回家，为了生计奔波。他们一刻也不停地迈着自己的步子，肩上负了扁担，扁担两头挂着的竹框也已空去，现在看上去一身轻松，这倒不是因为没有负重的关系，能够这样早就将菜给卖净，腾出时间来干点别的事，无论如何也是值得高兴的。</p>
<p>唯有一位槁项黄馘的老者侍立于道上，一动不动。他佝偻着身子，一头散披的白发，身穿梨花白的绣竹宽袖长裙羽衣，束玉白色龙纹宫绦，裤子给裙摆遮住了，不见风彩，脚上蹬着一双白履，只是白，白得耀眼，白得一尘不染，仿佛不是尘世里的人。</p>
<p>老者咳嗽了两声，自言道：“言公子来了？”</p>
<p>于是他又开始咳嗽起来，这一声咳嗽过了，他眼前便现出两个人来，他望着他们，细细打量了一番，又自言道：“言公子来了？”。</p>
<p>溆茗扭头睃了公子一眼，心下道：“唔，原来他姓言。”</p>
<p>言公子笑道：“先生怎知在下姓言？”</p>
<p>老者又咳嗽起来，顿了顿道：“能使出如此的武功，必然内力极为精湛，而放眼天下，能有如此内力的，除了言家的人外，也就止二三人罢了。然而不巧，这二三人皆是我相识的。”</p>
<p>言公子叹道：“先生都看见了？”</p>
<p>老者道：“我虽然看见了，但是要阻你一阻也是万万不能的。”</p>
<p>言公子笑道：“先生想必就是隐机子吧？孤竹子和松涛子在下已经见过了。”</p>
<p>老者又咳嗽起来，咳过后接道：“那么，我若是请公子到寒舍一叙，不知公子可愿意？哎——没有想到杨兄弟也败给了你。”他说着便迈步引路起来。</p>
<p>言公子便牵过溆茗的手，跟着老者向远郊走去。</p>
<p>言公子笑道：“松涛子倒并非败于在下手中，他一路追踪在下，在下避之唯恐不及，哪里敢同他交手！然而半路上，他不知得了什么消息，现下已经赶去长安了。”</p>
<p> “唔，这就难怪了，” 老者嘀咕了声，又向言公子两个道，“寒舍不远，就在前面。”说着便加紧脚步，鹤飞一般，全然不似先前的佝偻形态，正与他那一身的装束合为一体，羽化登仙。</p>
<p>言公子再次负起溆茗，脚下不停，紧跟上老者，心里疑惑道：“这隐机子所使的倒不似轻功。奇怪，奇怪。”</p>
<hr>
<p>苏子曰：可使食无肉，不可居无竹。</p>
<p>隐机子乃是雅士，自然深信这“不可居无竹”之劝。竹，历来就颇受文人雅士好评，一代一代的风雅之士口相传颂，即使它本身并不美好，现在也应该美好了。何况竹本身确有其高雅的风姿，一片翠微，风鸣竹间，令人望之脱俗，闻之登仙。</p>
<p>他们行至一片竹林，隐机子缓步下来，似乎怕打扰了这份静谧，他顾道：“寒舍便在此间，请。”</p>
<p>至竹林深处，突然现出一片空地来，于空地上现出一座小竹屋来。一人端坐屋前，手持羽扇，小炉清烟，炉上壶鸣，一人一桌一炉茶水，瀹茗竹间。</p>
<p>这人一身青翠，布弁，箭袖，绦巾，长裤，布履，无一不是竹青之色，若是隐匿竹间，几可避敌。他朝溆茗这边睃了一眼，笑道：“大哥真把他给请来了！但不知这位姑娘是谁？”</p>
<p>隐机子笑道：“不相干。言公子尊老，自然是不肯拒绝我的——请。”说着便将他们让进屋里。</p>
<p>言公子也笑了，“孤竹子竟也在这里！看来今天是走不了了。老先生，在下还是不进去的好，屋外宽敞，而况孤竹子也在屋外。”</p>
<p>隐机子也就止步了。屋外还有几张小竹杌子，他勾下身来挪了挪，递与言公子与溆茗。</p>
<p>言公子接过便坐了下来，道：“先生有何赐教，不妨早说。”</p>
<p>孤竹子忽然接道：“大哥倒没什么赐教，只不过想请尊兄在这里长住些时候。”
言公子笑道：“但不知先生可有这本事请得在下？”</p>
<p>隐机子不禁动容，叹道：“公子还是先坐会儿，待到夕阳西下时你我再一决高下，何妨？与公子这样清雅之人交手，必然得在清雅时分，而一天之中，至清至雅之时便在这夕阳西下之时。古人诗云：‘仗剑红尘笑斜阳，疏雨江南岸两茫。’岂不快哉！”</p>
<p>言公子笑道：“便依先生何妨！只可惜你我并不用剑。”</p>
<hr>
<p>晚照，碧空，翠竹。</p>
<p>言公子站起身来，右手一摊，向隐机子道：“请。”</p>
<p>隐机子伴着一阵咳嗽声站起，“只望公子在此屈居六年，我也不敢奢求过多，望这六年里可以洗去公子身上的唳气，不至再伤人无辜。”</p>
<p>言公子叹道：“在下所杀之人皆是可杀之人，并无太大过错，先生何至于此！”</p>
<p>隐机子道：“世上本无非杀不可之人，公子此举大干人和。闲言少叙，公子若能在一个时辰内捉住我的衣襟，我也不敢再强留公子了。公子可看到地上的九个圈了？我便落于这九个圈中。若是我落在了圈外，也算我输。公子意下如何？”</p>
<p>这九个圈画在地上并不明显，圈很小，不过碗大一点，可是很圆很圆，似远观的太阳的圆形，散落于此间，只是零乱，不得要领。</p>
<p>言公子道：“这倒不用了，先生只要不出这片空地便可。”</p>
<p>隐机子笑道：“公子眼睛倒厉害，看出我这阵法的厉害了，我也就不便占公子的便宜，就依公子所言。——麻烦沈兄弟为我们弹奏一曲。”</p>
<p>孤竹子应了声，自己便进屋取琴，而后长凳轻骑，抱琴于膝，调过弦后便开始弹奏起来。琴音瑟瑟，似一缕清风，抚过空寂的山间，抚过山涧的溪流，又跟随溪流而下，一路的怪石嶙峋，风吹浪，浪拍石，石鸣中天——不是石鸣，是鹤唳。便是这一声鹤唳，言公子出手了，借了这声音，真如鹤飞一般，向隐机子击去。</p>
<p>微风入竹林。风声，琴声，啸声，天籁与人籁的共鸣，是一首诗，可是这诗里满怀了杀意，漫布竹间。溆茗盯着场中的两人，她自然是希望言公子可以胜过这糟老头子，但是现在不行，言公子必须得败。她一眨不眨地盯着两人，看言公子出手，看他的衣衫飞舞着，鼓动着的淡桃色映衬竹间，红与翠的默契相合，他不击则罢，这一击竟似必中的。</p>
<p>但是没有。她看到隐机子佝偻的身子在风中摇了摇，丝绸般随风摇曳，完全不是自己在动，倒真似被风吹动着，他竟然仿佛是飘在空中的！溆茗不禁震在了那里。</p>
<p>琴音澎湃，还是风声，但是已经是狂风了，风吹过松林，呼呼然作响，散落一地的松针，这松针又随了狂风纷飞，不知飞向何方。</p>
<p>飞向何方，何方是家乡。</p>
<p>风渐小，一点一点熄下来，是怡人的微风。琴音缓，缓缓入竹林。这琴音正与此情此景若合一契，混然天成，亦是微风吹拂着竹林的声响。不知是天籁知人籁，还是人籁赏天籁。</p>
<p>琴已歇，可是言公子仍如鹤飞，却无论怎样也不能碰到隐机子。隐机子飘于风中，任由这微风的摆弄，他现在不是他自己，他乃是这竹林的生命，和风和竹一起，筑起竹林的生命，风助他，竹亦助他。言公子等于在同整个的竹林作战，他怎么战得过！纵使战得过，他也不能战——这只能闹得玉石俱焚。</p>
<p>所以他停了下来，抱拳而立，道：“武林传闻，隐机子武功卓绝，看来此话不假；武林中又传闻，隐机子根本不会武功，看来此话亦不假。二十年来，先生一直是个神话，原来竟是如此，在下佩服。古人尝云列子御风而行，我尚不肯相信。今日看来，是我孤陋寡闻了。依先生这般，何止御风而行！古人曾不我欺呀！既是如此，先生要留在下，在下恭敬不如从命，就依先生所言。”</p>
<p>隐机子仍如绸般舞于空中，道：“如此甚好。沈兄弟，我们这就去吧。”说着便随了这阵风飘向林外，不见踪影。言公子叹道：“这阵法确实厉害。”他知道，如果真有了那九个圈，他会更多的留意那些圈，猜测隐机子将落于何圈，可是自他那一击开始，隐机子竟不曾落地，所以隐机子根本不必理会自己落于何圈，而他则又要多分些心了。</p>
<p>孤竹子束好琴，将琴收入屋中，整理了一番，出来同言公子道别，“竹屋下面有储藏室，每七日定有人送粮食过来，可储于此。窑里有酒，言兄若是不愿喝酒，窑里亦有往年收的雨水与雪水，言兄可以煮茶，那就告辞了。姑娘，我们这就走吧。”</p>
<p>溆茗望言公子道：“我留下来陪你，你愿不愿意？”</p>
<p>言公子没有说话。沉默那就是默认了咯，溆茗转头来笑道：“我不走，我留下来陪他。”</p>
<p>孤竹子叹了口气，朝溆茗望了两眼，衣襟一摆，轻功展开，倏然而逝。</p>
<p>溆茗拉了拉言公子的手，望他道：“进屋去吧。我做饭给你吃。”可是她过去是小姐，即使流落街头也没有轮上她自己做饭给自己吃，她又拉了拉言公子的手，害羞道：“这可是我第一次做饭。”她想，她又要多一个第一次的经历了。</p>
<p>言公子皱了皱眉头，叹了叹气，也就进屋去了。他可不愿意做别人的实验品，所以他自己做饭，他为她做饭。</p>
<hr>
<p>鸣翠依旧喜欢月亮，尤其喜欢圆月。可是多半的时候并没有圆月，月是如钩的，勾起了多少回忆，多少相思泪呵！喜欢圆月，大概也是因为圆月之不可多得吧。现在月如钩，鸣翠依旧倚朱楼，凭栏而望那一弯银月。夜是墨浸的一块白布，零零落落地几点星是幕布的底色中未被墨染的点点滴滴。</p>
<p>也还是在这样的夜晚，算起来似乎已经六年了，她小姐就是在这样的夜里离去的。这六年里，多少的悲欢离合演绎着，多少的欢声笑语酩酊着，可是府里依旧是府里的生活，一成不变，任岁月一点一点侵蚀。</p>
<p>在这一成不变里唯一变化着的只有鸣微，她做了楚王那傻儿子的妃子了，一下从奴仆变作了奴仆的主人，她们也就此失去了联系。鸣翠低下头来，似乎竟嫉妒起鸣微来，她不要就这样一辈子白搭在府里，成日里被呼来唤去的，然后嫁给一个男仆，然后再待在府里做老妈子，这不是她想要的，人生需要些许不同的经历。
她忽而莫名的兴奋起来，“既然小姐可以逃走，为什么我不可以呢！”</p>
<p>这大胆的想法萦绕心间，诱惑着她，她愈想愈是后悔，当初就应该跟着小姐一起出逃的，但是就算是现在，那也不算太迟，毕竟她还没有嫁人。鸣翠望着那钩月，终于下定了决心。</p>
<p>出走并不难，难的是出走以后的谋生。她不像她小姐，可以带出一大堆盘缠，她知道分寸，她只带上属于自己的衣物，也许是为以后留下后路，免得落下盗窃的口垢，纵然穷途后想回来也是不可能了。</p>
<p>夜深，人亦静。</p>
<p>荆州不如扬州般柔情，扬州的夜是温柔乡胭脂坊，荆州的夜永远都如战士般冷清冷静，是战场上的肃穆——只是没有战士。鸣翠一个人走在大街上，只有自己的脚步声同天幕的弯月伴随着她；她听着这声音，望着那弯月，这才暂时忘却了孤独，忘却了这骇人的寂静的夜。</p>
<p>太平盛世里的城，永远都是脆弱的，禁不起敌人的攻击。城门大开，没有守城的兵，鸣翠就这样轻轻松松地出了城，一路向南走去。她这时一身青布衣，灰土裤子，小帽，布履，近于男子的装束，肩负着青花纹的布包袱，步履轻快。</p>
<p>郊外自然本该更见清静，但是偶而还有虫鸣有草动，鸣翠在月光里走了一程，前面竟然热闹了起来，依稀见到了几点灯火。</p>
<p>是一片空林地，近百人围着一个圈，也不知在做什么游戏。鸣翠踌躇了些时候，觉得去打扰他们总是不太好，并且看那些人的架势，倒并不好惹；然而她还是按捺不住内心的好奇心，她竟一点一点向那里逼近，偷偷猫在一棵大树旁。</p>
<p>鸣翠的眼睛真好，她竟依稀觉得圈子里被围着的是她小姐李溆茗。</p>
<hr>
<p>被围着的并不只溆茗，还有言公子，还有她同言公子的小公子。</p>
<p>言公子仍旧是一袭淡桃色无绣丝制长袍，拦腰一围浅黄色丝巾玉绦，下面是灰白描翠的裤子，脚蹬土色布履，也依旧不曾束冠，形容俊雅。溆茗一身白，白帽白衣白裙白履，是隐机子留下的衣物，她手里牵着小孩子，依傍在言公子身旁。</p>
<p>小孩子突然道：“妈妈，我饿了，我要吃饭饭。”</p>
<p>溆茗低头看了看他，抬手抚摸起他的头，轻声道：“丹青，乖。等爸爸办完了事，妈妈给你买糖糖吃。”</p>
<p>小孩子听见有糖吃，果然不再闹了，很乖顺地挨着他母亲，静待这莫名的游戏的结束。他是这次出门后才吃过糖的，第一次吃糖便喜欢上了糖果。现在那些大叔叔大婶婶们围着一个圈是做什么呢？他啃起指甲，仔细琢磨起来，然而想破了小脑袋也想不明白。</p>
<p>言公子开口道：“各位错了，大错特错。既然挑在了晚上，那就不该在今天晚上。既然挑在了今天晚上，就不应该到这时还不出手。既然到这时还不出手，那我们妻儿可就要走了。”</p>
<p>“姓言的，你以为今天走得了么！六年前我师兄惨死于你手下，今日我便要为他报仇，以慰我师兄的在天之灵。”说话的是一个矮小精悍的白面小生，手执一把山河图的纸扇，一脸激愤而又偏偏装得从容镇定。</p>
<p>一石激起千层浪，他这一句话可谓是抛砖引玉，大伙儿马上就沸腾了，纷纷怒喝起来，有人道，“还我师傅命来”，还有人道，“还家父命来”，还有人道，“我要为我丈夫报仇”，但是更多的人只是辱骂，从言公子的祖宗十八代骂到孙子十八代，仿佛这样可以杀掉言公子似的，偏偏就没人敢上前动手，因为谁也不想第一个送命。</p>
<p>言公子叹道：“哎，冤冤相报何时了。各位又何必如此执著？我本意是想放各位一条生路，为什么各位就不肯给我这个机会呢？”</p>
<p>众人不免一笑。一位老先生站出来道：“姓言的，你休出狂言。我等百人，难道竟奈何不了你么！你还是束手就擒的好。我担保绝不为难你妻儿。”</p>
<p>“怎么能放过他们！斩草要除根。”</p>
<p>“血债需血偿，杀他妻儿也不为过。”……</p>
<p>老先生面色如铁，厉喝道：“老夫说过不许为难他妻儿，众位没长耳朵么！”</p>
<p>“阎老鬼，你以为你是谁呀。你这个阎可不是他那个言，没必要去维护他吧。所谓民意不可违，老鬼你还是省省吧。”</p>
<p>“阎罗清，你哪根葱？你说话就是圣旨了？就是圣旨，老子也把它当个屁！给老子滚一边去。”说话的是一个油光满面的胖子。</p>
<p>阎罗清一阵狂啸，大喝一声：“找死！”右手如爪，直扑过去。那人毫无防备，不禁一谔，便在此时，喉头已入了阎罗清之手，只需阎罗清稍一用力，他这喉头怕是不保；眼见危在旦息，他不由得全身酸软，说不出话来，看来这人只是口上功夫厉害的草包。</p>
<p>阎罗清笑道：“无知狂徒，老夫说不许为难他妻儿便是不许为难他妻儿。”他那一身黑衣劲装伴了这夜色再加了他诡异的身手再与他鹰一般的眼睛相合，众人只觉心里一寒。阎罗清心下不免得意，他自从死了弟弟后便狠下心来刻苦习武，六年来闭门不出，武功精进也是意料中的事，这次一试，果真不可与过去同日而语。</p>
<p>人一高兴就忘乎所以，这是不变的真理。阎罗清正自得意，他的手便已被人从那喉头卸下，又给人紧握在了手里，他扭头一看，是一个和尚。武林中人一见了会武功的和尚便以为是少林寺的和尚，这想法在绝大部分时候是对的，言公子却知道这和尚不是，他根本就没到北方去过，也不至于得罪少林寺的人。</p>
<p>但是言公子猜错了，这和尚偏偏就是少林寺的。只听阎罗清道：“原来是少林寺的空明和尚，失敬，失敬。”便这两声“失敬”，他手一缩，已经从空明手里脱了出来。</p>
<p>空明和尚笑道：“阎施主慈悲，和尚钦佩。然劲敌尚还未除，我等便已生内讧，不免使敌人有可趁之机。阎施主所言甚是，和尚担保没人敢去伤他妻儿。”</p>
<p>言公子重重的叹了口气，道：“各位为了在下而伤和气，在下实在觉得愧疚，即是如此，在下这条命赠与各位又有何妨。且容我与妻子说几句话。”他说着便俯到溆茗耳边嘀咕了几声。溆茗不禁脸上起了红晕，咬了咬唇，低下头轻声问道：“真要这样么，星哥？”</p>
<p>言公子点了点头，然后便解了玉绦，散开这一身的淡桃红的长袍，露出如女子的白净的胸脯，他竟只穿了这一件长袍。溆茗犹豫了些时候，两眼注视着言公子，可是，他并没有改变想法的意思，她也只好解了衣襟。</p>
<p>众人眼见了这等奇事，不禁大骇，以为言公子要施展什么法术了；又眼见了溆茗一件一件卸去了衣衫，不禁色心大起，直愣愣地瞧着她，也懒得再理会言公子的法术了。</p>
<p>等溆茗脱去了里背心，言公子便给她披上了自己的那件长袍。淡桃红的衣裳，衬着淡桃红的面颊，溆茗脸上一阵滚烫。言公子紧握住溆茗的手，在她滚烫的面颊上吻了一下，又俯到她耳边嘱咐了几句。</p>
<p>溆茗点了点头，眼角沁出泪来，已经哽咽了，她哑声道：“你真的不顾我们了么？”</p>
<p>言公子依旧握着溆茗的手，面容越发白净了。</p>
<p>他抬头向众位武林人士道：“各位可知在下为何要取各位亲友性命？只因在下喜欢他们的血。世人多有收集的嗜好，在下亦然；有的人喜欢收集石头，有的人喜欢收集树叶，有的人喜欢收集宝剑，有的人喜欢收集金银，还有的人喜欢收集女子，在下不才，在下的嗜好便是收集人血，只可惜到目前为此才收集到一百三十六人之血。懂得收集的人必然知道，收集倘若不收集珍奇的事物，还不若不收集！在下若要收集，自然会收集那些比较有名望一点的武林君子的血，也就是各位的亲友的血。在下所求也并不过份，只不过一滴血而已，但是向他们求这一滴血实在比登天还难！世人只知道流血是一件很痛苦的事，他们不愿意承受这痛苦，在下求之不得，也曾心下悔恨，自己亦觉得过于自私了，怎么可以将自己的快乐建立在别人的痛苦之上呢！然而偏偏又有了这么个嗜好，也没有办法。于是在下便想到了一个一举两得的方法，既可以满足在下的嗜好，又可以免除他人的痛苦。现在想来，在下还是错了。在下只考虑到流血之人的痛苦，而没有考虑到流血之人的亲友的痛苦，大错特错。为了弥补在下的过错，在下本来亦准备解决各位的痛苦。但是现下又改变主意了，只怕解决了各位的痛苦，各位的亲友便又痛苦起来。罢了罢了，索性还在下大方一点吧……”</p>
<p>言公子说着，忽而飞跃而起，到得一黑衣女子身前，剪手夺过她手里的匕首，便又退至中间，匕首便已插在了他白净的胸膛上。血沿着匕首一点一点滴下来，在这如烟的空气中凝聚，又一滴一滴溅在草地上。</p>
<p>众人面面相觑，左右顾盼，实难理解这一幕。他们看着言公子流血，看着他的血落在地上，又看着他倒在了地上，可是言公子却依旧嘴角含笑着。</p>
<p>空明和尚双手合十，拜了一拜，默念数语向各位道：“既然此人已死，我们走吧。”</p>
<p>胖子问道：“那这两个人呢？”</p>
<p>阎罗清不禁动怒道：“空明和尚说过放这二人一条生路，各位没有听见么！”</p>
<p>溆茗哼了哼，笑道：“各位就真这样走了？”</p>
<p>阎罗清安慰道：“姑娘，在下担保没人敢伤姑娘。姑娘这就回去吧。”</p>
<p>溆茗冷眼瞪着他，哼道：“刚才……刚才你都看见了？”</p>
<p>众人纷纷笑起来，遇了这样的事，大家不去瞧仔细了，难道还会闭着眼睛不成？阎罗清想了想，若说看见了，别人姑娘脸上不好看，若说没看见吧，那又是自欺欺人，思量一二，他也只好点了点头。</p>
<p>溆茗叹道：“既是如此，各位就想这样走了么！还是留下各位的眼睛再走吧！”</p>
<p>众人又是一笑，这姑娘说话简直是不知天高地厚！在这笑声中，溆茗长袖飞舞，跳动着脚步，踏着这笑声的旋律起落盘旋。众人冷眼瞧着，然而只是一瞬，就再也瞧不见了，血水与黑水从众人眼中激射出来，溅到溆茗的衣袖上，在衣袖上渗透，然后混为一体，淡桃色的长袍越染越深，变作桃色长袍，而后又变作梅色长袍。</p>
<p>在这一片嚎叫声里，十多盏灯笼飞散出去，在空中划出几记华美的淡黄的弧迹，落在了地上。溆茗牵起小孩子，一个飞跃，落在鸣翠身边，一把掐住她肩胛。鸣翠“啊”地尖叫了一声，道：“小姐，是我！”</p>
<p>溆茗这才认清，便放开了手。鸣翠蹲下来摸了摸小孩子的头，问道：“这位是小少爷？”</p>
<p>溆茗点了点头，“走吧。鸣翠，你也跟我们一起去吧。”</p>
<p>鸣翠犹豫着，可是还是点头同意了，她望那边看去，道：“那姑爷的尸体呢？”</p>
<p>溆茗神色黯然，摇了摇头，“算了，不管他了。这就走吧，我实在懒得见到这些人。”</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create an OAuth Server]]></title>
        <link href="http://lepture.com/en/2013/create-oauth-server"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-11-21T16:30:00+08:00</updated>
        <published>2013-11-21T16:30:00+08:00</published>
        <id>http://lepture.com/en/2013/create-oauth-server</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>I've searched the whole internet on how to create an OAuth server or
provider, but failed every time. Sometimes it was the language that stopped
me, and sometimes it was something that didn't even work.</p>
<p>And one day, I found <a href="https://github.com/ib-lundgren/flask-oauthprovider">Flask-OAuthProvider</a>, which was a
great piece of work. But it only implements the OAuth 1 server, and I need
the OAuth 2 part at that time. This was the first time I met OAuthlib.</p>
<blockquote><p>OAuthlib is the future of OAuth for Python.</p>
</blockquote><p>A quote from Kenneth Reitz, and I can't agree more. It is really great and
RFC-aware. However, it is undervalued with <del>fewer than 450</del> stars on GitHub.
The code of <a href="https://github.com/idan/oauthlib">OAuthlib</a> is well written, so is the documentation,
and so is the test cases. You should star it. Everything is perfect, except
its fame. That's why I sent <a href="https://github.com/aaronpk/oauth.net/pull/55">a pull request</a> to oauth.net,
making it known by the world.</p>
<p>OAuthlib is far more brilliant than rauth. It is a generic, spec-compliant
library, without any specific HTTP request library. It focuses on the
definition of RFCs.</p>
<h2>Flask-OAuthlib</h2>
<p>It has been 6 months since I started this project named as <a href="https://github.com/lepture/flask-oauthlib">Flask-OAuthlib</a>, which is a successor of Flask-OAuthProvider and Flask-OAuth.</p>
<p>With the great work of OAuthlib, I finished the client part in 4 days, and
made it a replacement of Flask-OAuth. It is well designed with a good
intention for compatability of the non-standard oauth servers. If you are
still using Flask-OAuth, I recommend you take this project into account.</p>
<p>I completed the OAuth 2 provider part at version 0.2.0, OAuth 1 provider
at version 0.3.0. And now this project has moved to version 0.4.0. So I
think it is the right time to write some introduction now.</p>
<p>Thanks for the help of <a href="https://github.com/ib-lundgren">Ib Lundgren</a> who is the maintainer of OAuthlib.
Thanks for the contribution of Randy Topliffe and Mackenzie B. Thompson.
You can find them on the <a href="https://flask-oauthlib.readthedocs.org/en/latest/authors.html">authors list</a>.</p>
<h2>Terminology &amp; Knowledge</h2>
<p>There are knowledge and terminologies that you should know. We will build
a server in Flask web framework, it is okay even if you haven't used Flask.
You can still learn something that worth the time.</p>
<p>Since you are going to build an OAuth server, you may need some knowledge
on these terminologies.</p>
<ul>
<li><strong>client</strong>: also known as application, for example Twitter for iPhone
is a client</li>
<li><strong>resource owner</strong>: it is usually the user of a website, for example me
on Twitter: <a href="https://twitter.com/lepture">twitter.com/lepture</a></li>
<li><strong>access token</strong>: this is the key for a client to get resource from a
resource owner</li>
</ul>
<p>There are differences between OAuth 1 and OAuth 2. A client will need some
temporary tokens for exchanging the final access tokens. They do have their
own terminologies.</p>
<h3>OAuth 1</h3>
<p>OAuth 1 needs more temporary tokens, it has a request token, a verifier,
a timestamp and a nonce.</p>
<ul>
<li><strong>request token</strong>: designed for exchanging the final access token</li>
<li><strong>verifier</strong>: designed for verifying the current authenticated user</li>
<li><strong>timestamp</strong>: a timestamp of current request</li>
<li><strong>nonce</strong>: a random token that makes current request unique</li>
</ul>
<p>All these messy things are designed for authentication and security.</p>
<h3>OAuth 2</h3>
<p>OAuth 2 is much easier, we do need only one <strong>grant token</strong> for exchanging
the final access token.</p>
<p>OAuth 2 requires SSL over the connection for security, it simplifies the
way for getting access token. However, SSL is also suggested on OAuth 1 in
your final production.</p>
<h2>Writing a Server</h2>
<p>We need a normal server with a user system before starting the OAuth part.
Any site which has OAuth service has a user system.</p>
<p>Since this is just a demo, we will not create something that big. Let's
think about it, we need a user system, we need it because we want to
identify the current user. But we can skip the registration part.</p>
<p>This is a basic, simple, yet functional server:</p>
<pre><code class="lang-py"># coding: utf-8

from flask import Flask
from flask import session, request
from flask import render_template, redirect
from flask_sqlalchemy import SQLAlchemy


app = Flask(__name__, template_folder=&#39;templates&#39;)
app.debug = True
app.secret_key = &#39;secret&#39;
app.config.update({
    &#39;SQLALCHEMY_DATABASE_URI&#39;: &#39;sqlite:///db.sqlite&#39;,
})
db = SQLAlchemy(app)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(40), unique=True)


def current_user():
    if &#39;id&#39; in session:
        uid = session[&#39;id&#39;]
        return User.query.get(uid)
    return None


@app.route(&#39;/&#39;, methods=(&#39;GET&#39;, &#39;POST&#39;))
def home():
    if request.method == &#39;POST&#39;:
        username = request.form.get(&#39;username&#39;)
        user = User.query.filter_by(username=username).first()
        if not user:
            user = User(username=username)
            db.session.add(user)
            db.session.commit()
        session[&#39;id&#39;] = user.id
        return redirect(&#39;/&#39;)
    user = current_user()
    return render_template(&#39;home.html&#39;, user=user)


if __name__ == &#39;__main__&#39;:
    db.create_all()
    app.run()
</code>
</pre><p>And this is the template of <code>home.html</code>:</p>
<pre><code class="lang-html+jinja">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  {% if user %}
    &lt;p&gt;You are {{ user.username }}&lt;/p&gt;
  {% else %}
    &lt;p&gt;You are not authenticated&lt;/p&gt;
  {% endif %}

  &lt;p&gt;Type any username:&lt;/p&gt;
  &lt;form method=&quot;post&quot; action=&quot;/&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;
    &lt;input type=&quot;submit&quot;&gt;
  &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
</pre><p>You can download these files from this <a href="https://github.com/lepture/example-oauth1-server/tree/6cfb8db25b4427648e4229507d1649be04ddb7ef">commit#6cfb8db</a>. And I will continue working on this repo, browser the revisions for more details.</p>
<h2>Creating OAuth 1 Server</h2>
<p>Before implementing the actual OAuth part, we need to define an OAuth 1
Client. A client requires client_key, client_secret, redirect_uris,
default_redirect_uri and default_realms. Find more in the <a href="https://flask-oauthlib.readthedocs.org/en/latest/oauth1.html#client-application">Documentation</a>.</p>
<p>All clients are bound to a developer (developer is a user). The developer
need to fill a form and describe the application. In this simple demo, we
will skip this part. It will create a client when you visit <code>/client</code>.</p>
<pre><code class="lang-python">from flask import jsonify
from werkzeug.security import gen_salt


class Client(db.Model):
    client_key = db.Column(db.String(40), primary_key=True)
    client_secret = db.Column(db.String(55), index=True, nullable=False)

    # creator of the client
    user_id = db.Column(db.ForeignKey(&#39;user.id&#39;))
    user = db.relationship(&#39;User&#39;)
    _realms = db.Column(db.Text)
    _redirect_uris = db.Column(db.Text)

    @property
    def redirect_uris(self):
        if self._redirect_uris:
            return self._redirect_uris.split()
        return []

    @property
    def default_redirect_uri(self):
        return self.redirect_uris[0]

    @property
    def default_realms(self):
        if self._realms:
            return self._realms.split()
        return []


@app.route(&#39;/client&#39;)
def client():
    user = current_user()
    if not user:
        return redirect(&#39;/&#39;)
    item = Client(
        client_key=gen_salt(40),
        client_secret=gen_salt(50),
        user_id=user.id,
    )
    db.session.add(item)
    db.session.commit()
    return jsonify(
        client_key=item.client_key,
        client_secret=item.client_secret
    )
</code>
</pre><p>You can find the whole new code at <a href="https://github.com/lepture/example-oauth1-server/tree/2cafa624dd8e82054a5208ce7c156f024d0bb109">commit#2cafa62</a>. Now, run the script
and visit <code>/client</code>.</p>
<h3>Implement OAuth 1 Provider</h3>
<p>It is time to create a provider now. However, before we initialize a
provider, we need to update the configuration.</p>
<pre><code class="lang-python">app.config.update({
    &#39;OAUTH1_PROVIDER_ENFORCE_SSL&#39;: False,
    &#39;OAUTH1_PROVIDER_KEY_LENGTH&#39;: (10, 100),
})
</code>
</pre><p>Because we are developing on a local machine, it would be easier for us
to implement it over HTTP. This is why we set <code>OAUTH1_PROVIDER_ENFORCE_SSL</code>
to <code>False</code>. After this, we can create a provider:</p>
<pre><code class="lang-python">from flask_oauthlib.provider import OAuth1Provider
oauth = OAuth1Provider(app)

@oauth.clientgetter
def load_client(client_key):
    return Client.query.filter_by(client_key=client_key).first()
</code>
</pre><p>Check code at <a href="https://github.com/lepture/example-oauth1-server/tree/78f6cf5ebbad01694ff3d5e78ad827acfefbea86">commit#78f6cf5</a>.</p>
<p>There will be lots of code, and they would flush this article. In this case,
I would keep them in a repo, and create a revision every time a milestone
finished. You need to follow the links to view the changes.</p>
<p>The next step is <a href="https://github.com/lepture/example-oauth1-server/commit/860850e57d7f5f07441d3019ce7cf0eaaffd0561">creating request token and verifier</a>, we did this by following the documentation of <a href="https://flask-oauthlib.readthedocs.org/en/latest/oauth1.html#request-token-and-verifier">Request Token and Verifier</a>.</p>
<p>Like request token and verifier, we mix timestamp and nonce together.
Find out how we <a href="https://github.com/lepture/example-oauth1-server/commit/679d9a614cf10b5769f63ac76c45fd9aecb27181">create timestamp and nonce</a>. This
is done with the help of documentation on <a href="https://flask-oauthlib.readthedocs.org/en/latest/oauth1.html#timestamp-and-nonce">Timestamp and Nonce</a>.</p>
<p>We will finish all the data models when <a href="https://github.com/lepture/example-oauth1-server/commit/88dee8057eb1864d90e1df1895a47efdbad4ee66">access token is created</a>.</p>
<p>The next big thing is the handlers - how we handle the authorization flow,
the request token and access token. Check <a href="https://github.com/lepture/example-oauth1-server/commit/55664c43951f593efa545e8968b1371b9d01659c">commit#55664c4</a>.</p>
<p>In this commit, we implemented all required handlers. And we also fixed
some bugs, added a logger for debugging. There was a change in <code>/client</code>
handler, we added a redirect uri data to the model, and we would use it
later.</p>
<p>Now that we have finished the authorization part of OAuth 1 server, we need
a client to verify it. We created a client with Flask-OAuthlib itself at
<a href="https://github.com/lepture/example-oauth1-server/commit/f8b1d09b17f3bbcc9ecc41b44e061185e0e87e51">commit#f8b1d09</a>.</p>
<p>Let's have a game. Start your provider server with:</p>
<pre><code>$ python app.py
</code></pre>
<p>We visit <code>http://127.0.0.1:5000/</code> and fill a username. And then we visit
<code>http://127.0.0.1:5000/client</code>, take the client key and client secret, and
modify our <code>client.py</code> script with the key and secret. Now, we can start
the client server with:</p>
<pre><code>$ python client.py
</code></pre>
<p>We visit <code>http://localhost:8000/</code>, everything should work correctly. We
will be redirected to a confirm page, if we choose yes, client will obtain
a pair of access token and secret. If anything wrong happens, don't
hesitate to tell me. You can also debug it yourself. We enabled the
logging for Flask-OAuthlib so that you can debug easily.</p>
<p>The last part of this tutorial on OAuth 1 is protecting user resources. It
is easy with a decorator <code>require_oauth</code>:</p>
<pre><code class="lang-python">@app.route(&#39;/api/me&#39;)
@oauth.require_oauth()
def me(req):
    user = req.user
    return jsonify(username=user.username)
</code>
</pre><p>This <code>req</code> parameter is an oauth request object, it contains many useful
data. You can learn more about it at <a href="https://flask-oauthlib.readthedocs.org/en/latest/oauth1.html#protect-resource">Protect Resource</a>.</p>
<p>Now, find the final <code>client.py</code> at <a href="https://github.com/lepture/example-oauth1-server/commit/c3b88d0eac572bb216c3aeea6a359872866cfdb">commit#ac3b88d</a>.
This commit added a tokengetter, and fixed some bugs I created. After the
client obtained an access token, visit <code>http://localhost:8000/</code>, and you
will see the information of current user.</p>
<p>There are more works we should do, but we will finish it right now.
Since this is a simple tutorial, it will not cover any advanced skills.
However, I would give some suggestions at the end of this article.</p>
<h2>Creating OAuth 2 Server</h2>
<p>I created OAuth 2 provider in Flask-OAuthlib before OAuth 1 provider. That
means I designed the API for OAuth 2 provider first, and OAuth 1 provider
shares the same API with OAuth 2 provider.</p>
<p>The setup of OAuth 2 server is the same as above. First, we created a
basic simple server with a user system. You can find the code at
<a href="https://github.com/lepture/example-oauth2-server/commit/d1e3b6de1982894b97a719b04d9f0161e5739074">commit#d1e3b6d</a>.</p>
<p>Then we created a Client model and a client handler. Here are the differences,
Client for OAuth 2 use <code>client_id</code> instead of <code>client_key</code>, <code>default_scopes</code>
instead of <code>default_realms</code>, and it has a client type (which is public in
this case). See the code at <a href="https://github.com/lepture/example-oauth2-server/commit/3f1c8f2f86b408be6105593c3206cad814dfcb73">commit#3f1c8f2</a>.
We created the Client following the documentation on <a href="https://flask-oauthlib.readthedocs.org/en/latest/oauth2.html#client-application">Client (Application)</a>.</p>
<h3>Implement OAuth 2 Provider</h3>
<p>The next step is the implementation for OAuth 2 Provider since we have
finished all preparation works. It is the same as OAuth 1 provider, except
we don't have to make any configuration. via <a href="https://github.com/lepture/example-oauth2-server/commit/3b60b5d769b807b1549157f76cd46151dd3b8f1d">commit#3b60b5d</a>.</p>
<pre><code class="lang-python">from flask_oauthlib.provider import OAuth2Provider
oauth = OAuth2Provider(app)

@oauth.clientgetter
def load_client(client_id):
    return Client.query.filter_by(client_id=client_id).first()
</code>
</pre><p>Then we would <a href="https://github.com/lepture/example-oauth2-server/commit/a10c376b6f48bfde52d5fa2d6a8c5cd50e3096e1">create Grant Token</a> and
<a href="https://github.com/lepture/example-oauth2-server/commit/ba1fd40293e673ae35180a1c10f95820c6a93d23">Access Token</a> , and their getters and setters. It is
much simpler than OAuth 1, since we don't have to create timestamp and nonce.</p>
<p>OAuth 2 has no Request Token. The handlers are simple too. What you need is
a token handler that handles response with access token or refresh token,
and an authorize handler for user to confirm the request.</p>
<pre><code class="lang-python">@app.route(&#39;/oauth/token&#39;)
@oauth.token_handler
def access_token():
    return None
</code>
</pre><p>Flask-OAuthlib has done all the tricks, you don't need to handle the data
yourself. However, you can return things that matter to you. They are
advanced skills, and I will not cover it here.</p>
<p>Changes can be found at <a href="https://github.com/lepture/example-oauth2-server/commit/cbc3e12a3123f4bbc9d68eb8438247357f213583">commit#cbc3e12</a>.</p>
<p>Now it is time for testing. We would <a href="https://github.com/lepture/example-oauth2-server/commit/060da19663e006fab409b9e87639f8e00d3c8e22">create a client.py</a> to do the job. Here is a little trick:</p>
<pre><code class="lang-python">import os
os.environ[&#39;DEBUG&#39;] = &#39;true&#39;
</code>
</pre><p>Remember what I have said? OAuth 2 requires SSL all the time, since we are
developing on a local machine, we don't have HTTPS, As a result, it is
hard to meet this requirement. Fortunately, OAuthlib has a mechanism for
us to debug on HTTP, that is the environ variable <code>DEBUG</code>.
(Which is contributed by me).</p>
<p>When we code, we make mistakes. You have to keep an eye on the error
stack, find out what is wrong, and fix it. Yes, I did fix some bugs in
this commit.</p>
<p>And now start the server and client and visit <code>http://localhost:8000/</code>.
You will finally get an access token.</p>
<p>We do OAuth, because we want to protect some resources. This is the last
part of this tutorial on OAuth 2 server. We protect them with a decorator
<code>@oauth.require_oauth</code>, and this decorator will add an additional paramter
to the handler.</p>
<pre><code class="lang-python">@app.route(&#39;/api/me&#39;)
@oauth.require_oauth()
def me(req):
    return jsonify(username=req.user.username)
</code>
</pre><p>The demo is finished at <a href="https://github.com/lepture/example-oauth2-server/commit/b30339ee5df40ef75e3313587aff11d0ec67339e">commit#b30339e</a>. Check out
the source code and enjoy it yourself.</p>
<h2>References &amp; Other Resources</h2>
<p>I must confess that it is not easy to setup an OAuth server. You need to
learn lots of concepts for understanding. This tutorial don't teach you
the realms and scopes stuff - you can learn these parts from the <a href="https://flask-oauthlib.readthedocs.org/">Flask-OAuthlib documentation</a>.</p>
<p>We did waste lots of time on creating the models and handlers. In fact we
don't have to do such boring things. A demo is just, a demo. I don't mean
to set limitations, and force you to use SQLAlchemy. There are chances
that you want to use redis instead.</p>
<p>That's why I put the SQLAlchemy stuff in the <code>contrib</code> module. It is not
finished yet, and I need your contribution.
Find out what's going on in <a href="https://github.com/lepture/flask-oauthlib/tree/master/flask_oauthlib/contrib">contrib</a>.</p>
<p>And one more thing, it would be better if we put those temporary tokens
in cache, for example request token, verifier, timestamp, nonce and
grant token.</p>
<p>Remember that every link is important, if you miss one, you may miss the
target. Chances are that you've already lost your patience.</p>
<p><strong>TL;DR</strong></p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不相來往]]></title>
        <link href="http://lepture.com/zh/2013/laiwang-and-qrcode"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-11-19T13:34:00+08:00</updated>
        <published>2013-11-19T13:34:00+08:00</published>
        <id>http://lepture.com/zh/2013/laiwang-and-qrcode</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>前同事在微信羣裏發來往的二維碼，我其實也很想加，但是嫌麻煩，就略過了。</p>
<p>我實在不能理解這樣的傳播方式。我至少需要兩部手機，相互掃描二維碼，才能加來往好友，但是我不是土豪。後來聽說不需要兩部手機，把圖片保存下來，來往可以掃描本地圖片，但是我不是阿裏員工。</p>
<p>肉食者鄙，常常做出一些想當然的決策。具體到這件事來說，二維碼是不適合在手機間傳播的。那麼什麼合適呢？我以爲還是 URI 比較好，雖然不夠新潮。比如：</p>
<pre><code>laiwang://user/lepture
</code></pre>
<p>但是微信不會解析該協議，可是微信會解析 HTTP，那我們做一次重定向:</p>
<pre><code>http://laiwang.com/app/user/lepture
=&gt; laiwang://user/lepture
</code></pre>
<p>我知道這樣不夠新潮，可是你確定你追求的是新潮？</p>
<p>這篇上接<a href="http://lepture.com/zh/2013/anti-long-weibo">《長微博及其它》</a>，喚爲：</p>
<blockquote><p>You are doing it wrong !</p>
</blockquote><p>肉食者鄙，而下不能達上，大公司通病也。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[長微博及其它]]></title>
        <link href="http://lepture.com/zh/2013/anti-long-weibo"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-11-12T22:34:00+08:00</updated>
        <published>2013-11-12T22:34:00+08:00</published>
        <id>http://lepture.com/zh/2013/anti-long-weibo</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>長微博這個詞像警世的寓言，頗有一股諷刺意味，正好比我們說方方正正的圓圈，規規矩矩的放蕩。</p>
<p>我微博用得不勤，話多在 Twitter。一方面是微博的界面入不得眼，另一方面就是文字圖片（所謂長微博者）的濫用。微博也意識到了這點，可是又不思進取，以爲提供一個官方的文字圖片生成工具就算是解決問題了。</p>
<p>前些時候，濟南中院微博直播薄熙來案庭審，算是開創性的大事吧。而文字直播所用的方式竟然是這長微博，也就是圖片。起先，濟南中院整理出純文本稿，而後將此文本生成圖片發表於微博，最後再由網易小編整理成純文本稿，不知花費人力幾何？信息量未變，而圖片在其傳播過程中又浪費網絡資源幾何？</p>
<p>我不知也。假使我有點情懷，也該矯情地說一句：「也請偶爾爲這個宇宙考慮考慮吧。」</p>
<p>即使你對這個宇宙沒有興趣，樂意於揮霍網絡資源，那你至少也應該爲視覺障礙者（盲人）考慮一下吧。我們的讀屏軟件還沒有高級到去識別你發的「長微博」。假使你是一個所謂「自媒體」的話，連這點「人文關懷」都沒有，就不要自稱「媒體」了。</p>
<h2>Twitter 的思路</h2>
<p>批評有時顯得蒼白無力，需要一點建設性意見。我們也偶爾需要承認，外國的月亮確實要圓一點。看看 Twitter 是如何做的。</p>
<p>Twitter 有一個特性叫作 <a href="https://dev.twitter.com/cards">Twitter Cards</a>，用來展示嵌入內容。它可以是摘要，可以是圖片，可以是視頻，還可以是 App。</p>
<p>當你發出一條包含網址的 Tweet 時，Twitter 會去查看該網址是否包含可展示的內容。具體的要求則是該網址包含 Twitter 所要求的標記。比如：</p>
<pre><code class="lang-html">&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;長微博及其它&quot;&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;....&quot;&gt;
</code>
</pre><p>然後向 Twitter 提交你的網站，待 Twitter 認證後，包含你網站的 Tweet 便會展示相關摘要了。請放心，這一步相當快，Twitter 的審覈在幾分鍾內就完成了。</p>
<figure><img src="http://ww1.sinaimg.cn/large/5d261318gw1edquzpeksnj20eb0akjsf.jpg" alt="Twitter Cards" /></figure>
<h2>標準的價值</h2>
<p>Twitter 的方案並非原創，是模仿的 <a href="http://ogp.me/">Open Graph</a>。這一方案的好處是顯而易見的，一種包羅萬象的大氣。所謂互聯網者，當互聯也，關起門來獨攬全活叫自閉而非互聯。而協議就是這互聯的基礎。</p>
<p>Open Graph 是由臉書提出的，Twitter 繼承而生 Twitter Cards，而 <a href="https://developers.google.com/+/web/snippet/">Google+</a> 兼而得之。</p>
<p>尤其值得一提的是 <a href="http://schema.org/">Schema</a> 標準，真正有一股描述世界的霸氣：</p>
<pre><code class="lang-html">&lt;body itemscope itemtype=&quot;http://schema.org/Product&quot;&gt;
  &lt;h1 itemprop=&quot;name&quot;&gt;Shiny Trinket&lt;/h1&gt;
  &lt;img itemprop=&quot;image&quot; src=&quot;{image-url}&quot; /&gt;
  &lt;p itemprop=&quot;description&quot;&gt;Shiny trinkets are shiny.&lt;/p&gt;
&lt;/body&gt;
</code>
</pre><p>標準需要的不一定是技術，有時只是一個想法就足夠了。比如說 RSS、Atom。</p>
<h2>對微博建議</h2>
<p>文字圖片的弊端也不再述了，我也知道中國人的獨特需求，他們喜歡被圈養，不太願意跳出圍城。但是這並不意味着我們就需要污染環境。</p>
<p>正如 Twitter 模仿 Open Graph，我們也可以模仿 Schema：</p>
<pre><code class="lang-html">&lt;div itemscope itemtype=&quot;http://weibo.com/LongWeibo&quot;&gt;
  &lt;meta name=&quot;creator&quot; content=&quot;@lepture&quot;&gt;
  &lt;h1 itemprop=&quot;name&quot;&gt;Article Title&lt;/h1&gt;
  &lt;img itemprop=&quot;image&quot; src=&quot;{image-url}&quot; /&gt;
  &lt;p itemprop=&quot;description&quot;&gt;Shiny trinkets are shiny.&lt;/p&gt;
  &lt;div itemprop=&quot;content&quot;&gt;
    {content}
  &lt;/div&gt;
&lt;/div&gt;
</code>
</pre><p>當我們分享一條鏈接時，微博便去索引此篇文章，找到全文內容，儲存爲純文本，在需要的時候展示全文。</p>
<p>這個想法是免費的，隨時歡迎微博取用。也衷心希望對這個世界溫柔一點，儘量使用更低能耗的純文本。珍愛世界，從我做起，如果你的郵箱簽名帶有圖片，請把圖片去掉。</p>
<hr>
<p>2014-03-02 修正：</p>
<p>微博其實是有 Open Graph 支持的，詳情請查閱 <a href="http://open.weibo.com/wiki/Weibo_meta_tag">Weibo meta tag</a>。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[紹興淺嘗]]></title>
        <link href="http://lepture.com/zh/2013/hello-shaoxing"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-10-20T10:30:00+08:00</updated>
        <published>2013-10-20T10:30:00+08:00</published>
        <id>http://lepture.com/zh/2013/hello-shaoxing</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>紹興的老街像小時候的夢，又破又舊又瑰麗。青瓦的層疊的屋頂，白粉的斑駁的牆壁，小橋，流水，人家。</p>
<p>清晨的好夢被遊人的嘮叨驚醒。我入住的這家青年旅舍叫作書生部落，位於書聖故里躲婆弄內。書聖指的是王羲之，據聞此地正是王右軍居處。街角處有一個小池子，喚作墨池，相傳乃王羲之洗筆硯處，而曾鞏作《墨池記》以勉其勤奮。墨池里的兩只鵝像老去的生命，緩慢，悠閒，時常是靜止的，讓人疑心它們是雕塑。</p>
<p>與墨池隔道相望的是一座寺廟，名叫戒珠寺，提匾卻叫作戒珠講寺。清晨的早課聲也是驚醒人的罪魁。據聞這座寺廟就是王羲之故居。是上午時聽一位拉包車的師傅給客人講的，如果你搜索一下「戒珠寺」當有所收穫，這位師傅倒是講得有聲有色，自然也少不了添油加醋。</p>
<blockquote><p>這邊有一個老和尚，和王羲之關係相當好。有一回王羲之和這個老和尚在家裡下棋，下到一半有客人來訪，王羲之把夜明珠放到桌上，先出去會客，讓老和尚稍等一下。這個夜明珠是王羲之非常喜歡的珠子，平時就拿在手上的。等王羲之回來的時候，老和尚已經走了，放在桌上的夜明珠也不見了，這期間沒有其他人來，王羲之就懷疑是這老和尚偷走了，從此就不理這老和尚。老和尚就覺得奇怪，跑過來問王羲之為甚麼不理他。王羲之的僕人就說：「你做了甚麼，你自己不知道？」後來老和尚就知道王羲之認為他偷了明珠，為了表示自己清白就上吊自殺了。再後來王羲之家來了客人，家裡殺鵝招待，從鵝的肚子里掉出來了珠子，正好就是王羲之丟掉的這個夜明珠。王羲之就曉得自己冤枉了老和尚，覺得很愧疚，就把自己的宅子捐了出來，作為寺廟，叫戒珠講寺。</p>
</blockquote><p>故事大抵如此，當然油醋總是會有的。附近還有一處題扇橋，又是王羲之軼事之一。石板台階的拱橋，兩邊都傍上了綠枝，拱橋下停泊著三四艘烏蓬船。橋邊有一處亭子，等到下午時分便會有老爺子過來下棋。</p>
<figure><img src="http://ww3.sinaimg.cn/large/5d261318gw1e9rtv5m4c6j21kw16o7wh.jpg" alt="烏蓬船" /></figure>
<p>我出門的時候是七點半的光景，這一帶不像魯迅故里，本就少有遊客，清晨時分就更少了。可是老太太們大清早就醒來了，有圍著腳踏三輪車買紅蠟的，更多的時候是在生煤爐。</p>
<figure><img src="http://ww1.sinaimg.cn/large/5d261318gw1e9ru0byx3oj21kw16owuy.jpg" alt="生煤爐" /><figcaption>清晨的時候，許多人家都在門前生煤爐</figcaption></figure><p>閒逛處，總是能見到掛在牆上的鳥籠。這邊養鳥的人多，我在別處是沒見過的。終於認識了畫眉，披了一身翠，白色絨毛的腹上點綴了幾抹嫩黃，小巧迷人。它旁邊的鳥籠里是一隻皇鬥，灰撲撲的，不大好看，是鬥鳥，據說比畫眉貴，可是我不大喜歡。</p>
<figure><img src="http://ww1.sinaimg.cn/large/5d261318gw1e9rtz5c1r3j21kw16o4ho.jpg" alt="畫眉" /></figure>
<p>這一天就在城內隨便逛逛，紹興多故居，我就只去了蔡元培家。紹興城挺小的，很容易就走完了。雖然是週末，遊客也不嫌多，不像杭州的週末。紹興多水，也有遊客乘著烏蓬船沿河遊玩的，在船上拍拍照。</p>
<p>紹興老街的生活氣息挺濃郁的，老房子里都住著人，旅遊地的商業氣不夠，反而多半是為當地人服務的，比如說棋牌室。你總能聽到麻將的碰撞聲，下棋一般又不在棋牌室里，多半是在某個小亭子里。也有老太太們坐在門口閒聊著，說著我聽不懂的中文。</p>
<p>紹興老街醒來得早，睡得也早。不到六點，多半的商鋪就歇業了，要吃飯就要去新城地區。這個時候，紅燈籠亮起，垂在屋檐下，映在小溪里，一派舊日時光。</p>
<figure><img src="http://ww1.sinaimg.cn/large/5d261318gw1e9rtvzl4ybj21kw16oh1u.jpg" alt="紹興老街的夜" /><figcaption>紹興老街的夜，溪邊小屋的紅燈籠</figcaption></figure> ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文字排印與標記語言]]></title>
        <link href="http://lepture.com/zh/2013/typography-and-markdown"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-03-24T16:35:00+08:00</updated>
        <published>2013-03-24T16:35:00+08:00</published>
        <id>http://lepture.com/zh/2013/typography-and-markdown</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>許多年前，我也曾想過將來要做一個文字工作者，結果現在從事了互聯網行業。這次單從互聯網從業人員的角度談文字排印。</p>
<p>提到「標記語言」，不免會讓不知情者以為高深，其實很簡單，正如某言「無技術含量」。然而真正要做好，亦非易事。糟糕的排版隨處可見，例如在一段文字中突兀出現很大幾個字，又或者一段黑色文字中夾雜幾句紅的綠的黃的句子，更可憎的是有些文字還一閃一閃亮晶晶，這樣的例子在互聯網上比比皆是，不忍卒讀。通俗來講，稱為暴發戶氣質。</p>
<p>好的排版（指單篇文章）是為了文章的易讀性，讓人看著愉悅看著舒服，實際經驗告訴我們，略微泛黃的奶油色底加黑色文字是讓人最愉悅的搭配。當然，除了顏色，還有字體、大小、字間距、行間距等諸多因素影響著排版的效果。</p>
<p>做為寫作者，我們應該關注的真的是文章的顯示效果麼？當我們說「把這段文字加粗」，我們的本意是想強調這段文字，加粗只是表象，強調並不意味著一定要加粗。相反，我們所需要的是理解文字段落的本質，忽略其表現效果，一個好的開頭就是改變我們的思維方式，回歸本原，<strong>「這段文字需要著重強調一下」</strong>。</p>
<p>正如多年前的互聯網，當時（也許現在還存在）還沒有樣式分離的觀念，前端開發者迷失在樣式的表象上，忽視了事物的本質。於是，各種 <code>&lt;font&gt;</code> 之類的 HTML 標記大行其道。但是現在的情況好很多了，比如我們會用 <code>&lt;strong&gt;</code> 而不是 <code>&lt;b&gt;</code> 來「加粗」文字，這樣的改變體現的正是觀念的轉變，<code>&lt;b&gt;</code> 意味著 bold，是表象上的加粗，<code>&lt;strong&gt;</code> 體現的是著重強調，是本質上的加粗。這是一小步改變，也是一大步改變。</p>
<p>也許你並不了解什麼是 HTML，什麼是 <code>&lt;strong&gt;</code>，什麼是 <code>&lt;b&gt;</code>，這沒有關係，你正在看的這個網頁其實就是一個 HTML。但是你不需要知道這些。因為有更簡單，更多適合寫作者的標記語言 —— Markdown。</p>
<p>已經有不少人談過 Markdown，例如：</p>
<ul>
<li><a href="http://apple4us.com/2012/02/why-writers-should-use-markdown.html">为什么作家应该用 Markdown 保存自己的文稿</a></li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html">Markdown 写作浅谈</a></li>
</ul>
<p>普遍的誤解是，這些標記語言是程式師們的東西。但是正如其作者 <a href="http://daringfireball.net/projects/markdown/">John Gruber</a> 所說：</p>
<blockquote><p>Markdown is a text-to-HTML conversion tool for web writers.</p>
</blockquote><p>它從一開始就不是所謂 Geek 的東西，恰恰相反，它是為你這樣的文字工作者所設計的。它很簡單，它在 IT 界所以越發流行也正是因為其簡單易學，甚至有人稱其學習成本為零。</p>
<p>我們只需要簡單介紹一下基本的文法，聰明者如你應該不需要五分鐘就可學會。</p>
<ul>
<li><p>一級標題（大標題）</p>
<pre><code># 這是一級標題
</code></pre>
</li>
<li><p>二級標題（副標題）</p>
<pre><code>## 這個是副標題
</code></pre>
</li>
<li><p>那麼三級標題，四級標題也就很容易猜出來了</p>
<pre><code>### 三級標題
#### 四級標題
</code></pre>
</li>
<li><p>圖片與鏈接</p>
<pre><code>![image description](image URL)
[link text](link URL)
</code></pre>
</li>
<li><p>著重強調</p>
<pre><code>*emphasize*    **strong**
_emphasize_    __strong__
</code></pre>
</li>
<li><p>引用的內容</p>
<pre><code>&gt; 生命是一襲華美的袍，爬滿了虱子。
</code></pre>
</li>
<li><p>有序列表</p>
<pre><code>1. 有序列表第一條
2. 有序列表第二條
</code></pre>
</li>
<li><p>無序列表</p>
<pre><code>* 無序列表
* 無序列表
</code></pre>
</li>
</ul>
<p>現在你已經了解了所有你需要知道的了，這難道能叫做難學麼？忘記介紹段落了，你只需要保證段落之間有空行就可以了。</p>
<p>也許你還需要一個編輯器來輔助你，例如我現在正在用 Mou 來寫作這篇文章。對，你所看到的這篇文章正是用 Markdown 寫作的。也許你對自己的寫作不放心，需要實時預覽，借助<a href="http://www.zhihu.com/question/19637157">這些工具</a>也許能讓你更放心。其實真的不需要，例如當我寫作這篇文章時，我並不需要即時預覽，我知道我寫出來的效果一定就會是我想要的。</p>
<p>另外我正在編寫一個網頁版的 <a href="http://lab.lepture.com/editor/">Markdown 編輯器</a>，雖然還沒有完成，不過已經足以幫助你熟悉一下 Markdown 的文法了。我也為你準備了一份詳細的<a href="http://lab.lepture.com/editor/markdown">英文版文法</a>說明。</p>
<p>也許你還會覺得這些文法不夠用，你還是想把你的文章弄得花花綠綠的，我想這篇文章不是為你而寫的。我也深深為你的審美捉急呀。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[早安曼谷]]></title>
        <link href="http://lepture.com/zh/2012/hello-bangkok"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2012-11-22T00:00:00+08:00</updated>
        <published>2012-11-22T00:00:00+08:00</published>
        <id>http://lepture.com/zh/2012/hello-bangkok</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <blockquote><p>沒有睡過機場的旅行不完整。</p>
</blockquote><p>彭哲夫如是說。</p>
<p>到達曼谷的時候是午夜，第一個夜晚便在機場度過。於是，旅行從一開始就完整了——也許並不是，因為不曾睡過。這一天是 2012 年九月五號。</p>
<p>曼谷的機場，空調開得很冷，在 Money Exchange 兌換了一點鈔票（Tips: 匯率極差，後來才發現，原來從 ATM 里直接取鈔匯率會更好），馬上就去星巴克點了杯熱飲，暖和一下，也順便給手機充一下電。</p>
<p>無事可做，又沒有網路，只好发呆。拿起 Kindle 看了點書，是齊邦媛的《巨流河》。後來連書也看不下去了，終於鼓起了勇氣 Say Hello。</p>
<figure><img src="http://i.imgur.com/q1Ck3.jpg" alt="曼谷機場" /></figure>
<p>Sunny 是泰國人，但是長著一副歐洲人的面孔，英文說得又好，如果他不說，我是萬料不到的。後來見到的泰國人也確實同 Sunny 長得不一樣，也許是混血吧。</p>
<p>他教我用 Foursquare，我才發現以前從未用過 Explore 的功能，而且因為沒有了中國政府，地圖定位精確，Explore 可算是幫了大忙。他又慷慨地分享網路給我，為我挑選了一些景點做了個 Foursquare List，順便下載了幾個關於曼谷的 App（雖然後來也沒用過）。</p>
<p>這是我在泰國陸地上遇到的第一個泰國人，給了我很大幫助。</p>
<p>大約五點的光景，快到 City Line 的首班時間，同 Sunny 告別後便到樓下等車。</p>
<p>也不知是從哪裡看來的一條路線（豆瓣？），大約是這樣的：</p>
<ol>
<li>City Line 到 BTS phaya thai 下車</li>
<li>乘坐 BTS 到 Siam 換乘 W 線</li>
<li>到 Saphan Taksin 下車，到天橋下換乘曼谷水上巴士</li>
<li>到 Tha Phra Athit 下船，去 Khaosan。</li>
</ol>
<p>BTS 其實就是城市輕軌，也許因為早晨的原因，BTS 上沒什麼遊客。車上多是看報的泰國人，當然也有玩手機的。有一份報紙，叫《M2F》，是免費發放的，所以車上看到的報紙大多是這一份，到天橋下乘船時，也有人給我派發報紙，這是第一次被人錯看成泰國人。</p>
<p>然後轉乘水上巴士。船有多種，實在分不清也沒關係，總之不要去坐 Tourist Boat 就好，貴。</p>
<p>湄公河的水很混濁，黃滾滾的，水面上漂浮著樹枝，向下游蕩去，起起浮浮。沿河兩岸，有時是破舊的未完工的樓，有時是富麗的皇宮或者佛寺，因為睡眠不足，大多錯過了，頗為可惜。</p>
<p>水路很長，多虧了售票阿姨的提醒，算是順利抵達。</p>
<p>上了岸，旅途才剛剛開始，早安曼谷。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a StatusBar App]]></title>
        <link href="http://lepture.com/en/2012/create-a-statusbar-app"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2012-07-20T21:15:00+08:00</updated>
        <published>2012-07-20T21:15:00+08:00</published>
        <id>http://lepture.com/en/2012/create-a-statusbar-app</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>It has been months since I decided to learn cocoa development, but in vain.
Unlike python, the documentation of cocoa tortures me a lot.</p>
<p>I am still new to cocoa development. And this post will be part of my learning series.
I didn't mean to teach you anything, on the contrary, it is a track of my learing.
But it may be a little helpful to you.</p>
<h2>StatusBar App</h2>
<p>A <strong>StatusBar App</strong> is what on the right side of the menu bar, it doesn't contain a main window.
For example, the volumn control is a StatusBar App.</p>
<h2>Demo Time</h2>
<p>It's the time to create a StatusBar App now.</p>
<ol>
<li><p>Open your Xcode (I am on Xcode 4.3.3)</p>
</li>
<li><p>Create a cocoa application project</p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step1.jpg" alt="create a project" /></figure>
</li>
<li><p>Name the project <strong>StatusBarApp</strong></p>
</li>
<li><p>Run for testing</p>
</li>
</ol>
<p>Now you will get an App with window. However, our app is a StatusBar App, it has no window.</p>
<p>The final app should be like:</p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/application.jpg" alt="application" /></figure>
<h3>Menu</h3>
<p>We will create the menu first.</p>
<ol>
<li><p>Drag a menu to the interface builder</p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step2.jpg" alt="drag a menu" /></figure>
</li>
<li><p>Edit the menu item</p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step3.jpg" alt="edit menu item" /></figure>
</li>
<li><p>Decorate the menu with seprator</p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step4.jpg" alt="decorate with seprator" /></figure>
</li>
<li><p>Connect the menu to your code outlet, and name it <code>statusMenu</code></p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step5.jpg" alt="connect menu outlet" /></figure>
</li>
</ol>
<h3>StatusBar</h3>
<p>Create the statusBar property in your <code>AppDelegate.h</code> file:</p>
<pre><code class="lang-objc">@property (strong, nonatomic) NSStatusItem *statusBar;
</code>
</pre><p>Synthesize it in the <code>AppDelegate.m</code> file:</p>
<pre><code class="lang-objc">@synthesize statusBar = _statusBar;
</code>
</pre><p>Initialize the statusBar:</p>
<pre><code class="lang-objc">- (void) awakeFromNib {
    self.statusBar = [[NSStatusBar systemStatusBar] statusItemWithLength:NSVariableStatusItemLength];

    self.statusBar.title = @&quot;G&quot;;

    // you can also set an image
    //self.statusBar.image =

    self.statusBar.menu = self.statusMenu;
    self.statusBar.highlightMode = YES;
}
</code>
</pre><p><code>awakeFromNib</code> is earlier than <code>applicationDidFinishLaunching</code> in the lifecycle.</p>
<h3>App Go</h3>
<p>Let's test this application.</p>
<ol>
<li>Run you app now. You will see a <strong>G</strong> in the menu bar.</li>
<li>Delete the useless window in your <code>MainMenu.xib</code>, and run your app again.</li>
</ol>
<p>It works! But it doesn't work the right way. It is on the dock, it shows the menu on the left.</p>
<p>Fix it in <code>StatusBarApp-Info.plist</code>, add a row:</p>
<pre><code>Application is agent (UIElement)  = YES
</code></pre>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step6.jpg" alt="connect menu outlet" /></figure>
<p>Run your application again, it won't be on the dock, it won't show the menu.</p>
<h3>Do More</h3>
<p>But you can't quit the application, that could be annoying. We did have a Quit item on the application, but it won't work right now.</p>
<p>Fix it:</p>
<figure><img src="https://github.com/lepture/StatusBarApp/raw/master/assets/Step7.jpg" alt="quit" /></figure>
<h2>Reference:</h2>
<ul>
<li><a href="http://cocoatutorial.grapewave.com/2010/01/creating-a-status-bar-application/">Creating a Status Bar Application</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSStatusItem_Class/Reference/Reference.html">NSStatusItem Class Reference</a></li>
</ul>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[喜歡]]></title>
        <link href="http://lepture.com/zh/2012/girl-at-cafe"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2012-06-24T03:00:00+08:00</updated>
        <published>2012-06-24T03:00:00+08:00</published>
        <id>http://lepture.com/zh/2012/girl-at-cafe</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>天陰沉沉的，一副含雨欲滴的樣子，可是雨水躲在了雲層裡始終不肯落下來。我還奢求著下一點點小雨，一個人不撐傘地漫步於這雨中，營造一份詩意呢。然而不免要失望了。</p>
<p>杭州比較叫人喜歡的一點就是綠蔭，窗外雖然是馬路，可是仿佛是從樹叢裡切開來的，不像別處的街道，樹木不是點綴，而是主體，馬路只是這綠蔭的陪襯。</p>
<p>這一家可莎蜜兒麵包店位於杭大路與西溪路的交叉處，店不算大，但是別致。麵包其實我不算喜歡，可是下午起得遲，還沒有吃飯，聊以充饑罷了。點了兩份麵包加一份豆漿，坐在靠門的位子上，靜靜欣賞來去的行人。</p>
<p>店裡進來一群女孩子，人群中一眼望去，注意到的只有一人。她著一身白色短袖T恤，齊劉海的短髪，戴黑框眼鏡，臉有點小－－大約是被頭髮遮住的原因－－把眼鏡襯得偏大。她同她的朋友們說笑著，大家一起選過了幾樣蛋糕又或者麵包，就結帳離開了。</p>
<p>她們在店外揮手告別，有一個朋友同她們不是一路，向另一個方向去了。隔著玻璃窗，看著她著白色短袖一頭短髪的身影離去，消失在綠蔭叢中。</p>
<p>倒不是因為有多漂亮，也並非因為陪襯的關係。可是一眼就注意到了她，只注意到了她。現在想來多半因為她的笑容了。不是所謂的淑女的不露齒的笑，是開心的、爽朗的、迷人的笑容。</p>
<p>喜歡 Keira Knightley，是喜歡她在傲慢與偏見裡笑時的酒窩，喜歡她笑時眯起的眼睛。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vundle vs Pathogen]]></title>
        <link href="http://lepture.com/en/2012/vundle-vs-pathogen"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2012-05-02T00:00:00+08:00</updated>
        <published>2012-05-02T00:00:00+08:00</published>
        <id>http://lepture.com/en/2012/vundle-vs-pathogen</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>Most people just want an answer. Yes, vundle is better.</p>
<h2>Pathogen</h2>
<p>Pathogen created a new way to organize vim plugins, it provides the possibility
to make vim plugins a bundle.</p>
<p>The original vim plugin system is somewhat a centered plugin system, but pathogen makes
it a distributing system. The original way:</p>
<pre><code>vim/
    syntax/
        html.vim
    indent/
        html.vim
</code></pre>
<p>The pathogen way:</p>
<pre><code>vim/bundle/
    html/
        syntax/
            html.vim
        indent/
            html.vim
</code></pre>
<p>Now, you can take <code>html</code> as a bundle (or app), you need not copy every file to the right
directory, everything is well maintained by the plugin creator.</p>
<p>It's almost the end of the world, the vim plugin system should be distributed. And I'm glad
that so many plugins are compatible with pathogen.</p>
<p>I tried pathogen, and <a href="http://lepture.com/work/manage-vim/">wrote a post</a> (in Chinese) about
it.</p>
<h2>Vundle</h2>
<p>At that time, I knew vundle, and I mentioned it in the post, but I didn't try it.
I wish if only I had tried it.</p>
<p>Vundle is inspired by Pathogen, it can do everything pathogen can do,
it is compatible with pathogen, which means if a plugin declares it supporting
pathogen, it supports vundle.</p>
<p>But vundle does more, it improved the way to get and update vim plugins.
I mentioned in my post, that I was trying git-submodule with pathogen,
it was brilliant, but vundle is more elegant:</p>
<pre><code class="lang-vim">set nocompatible               &quot; be iMproved
filetype off                   &quot; required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

&quot; let Vundle manage Vundle
&quot; required! 
Bundle &#39;gmarik/vundle&#39;

&quot; My Bundles here:
&quot;
&quot; original repos on github
Bundle &#39;tpope/vim-fugitive&#39;
Bundle &#39;Lokaltog/vim-easymotion&#39;
Bundle &#39;rstacruz/sparkup&#39;, {&#39;rtp&#39;: &#39;vim/&#39;}
Bundle &#39;tpope/vim-rails.git&#39;
&quot; vim-scripts repos
Bundle &#39;L9&#39;
Bundle &#39;FuzzyFinder&#39;
&quot; non github repos
Bundle &#39;git://git.wincent.com/command-t.git&#39;
</code>
</pre><p>Launch vim and run <code>:BundleInstall</code> , everything will be ready for you.
All things you should do is trying it.</p>
<p>Save my words, save your time, head over to
<a href="https://github.com/gmarik/vundle">Vundle</a> immediately.</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[未下筆的故事]]></title>
        <link href="http://lepture.com/zh/2011/unwritten-story"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2011-12-11T00:00:00+08:00</updated>
        <published>2011-12-11T00:00:00+08:00</published>
        <id>http://lepture.com/zh/2011/unwritten-story</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>許多年前，其實也就是四五年前，我曾想過寫點小說。可是終於沒有動筆，大抵因為人生閱歷過於膚淺，總不能寫出滿意的文字。尤其，我對故事並不能特別喜好，反而過分糾纏於文字，糾纏於遣詞造句，捨本求末地關注於表象。即使是現在，也深深影響著我的工作，也大約正因了此，才終於選擇了這樣一個職業。</p>
<p>可是有時也會有不捨，想要重拾過去的故事，大半又忘記了。也可以見得是多麼蒼白無力的故事呵，不寫也罷。縱然寫，縱然是現在，閱歷也怕是不夠。何況於我是那種讀死人書的人，自己寫的雖然會包庇點，怕是也不能滿意。</p>
<p>有一個故事卻沒有忘記，其實又很幼稚，難登大雅。標題都想好了，叫《胭脂》，還真是個小氣的名字。主角是一個姑娘，名字叫作書靜——是我以前一個同學的名字，挺有意境的。故事只有三幕，也不知文字能有幾何。</p>
<p>是一個夜晚，小公園裡的泛黃吊燈下的小長椅上，書靜那時一個人坐著。如果認真點寫的話，總該會有大段大段的環境描寫，印象中的設計，應該還有一個乞丐，也是普遍的體會，乞丐總是無處不在的，也正說明著整個社會的狀態。而且單單是一個人的話，孤獨感並非那麼強烈。可是加上一個乞丐，正好襯托出這份孤單與無助。</p>
<p>她給她父親打電話，訴說自己的不愉快，想要到他家住一晚。他父親又不同意，叫她回她母親那裡去，大晚上的不要在外面呆著。大約是這樣的。可是她父親又為何不同意，這點倒忘記了，但是原因總是可以編造出來的。書靜覺得了委屈，向她父親訴說她母親和繼父又吵架了，她因為呆不下去了，所以才跑出來，今晚是無論如何都不肯回去的。她又說著聽到母親要和繼父鬧離婚了，希望父親可以和母親復婚。她父親覺得可笑，追問是怎麼一回事。</p>
<p>於是故事就轉到了第二幕，是她母親和繼父吵架的畫面。屋子有點零亂，還有碎的瓷片，大概也有動手。書靜躲在門角，靜靜的看這場面，又不敢出聲。是她母親洗衣服發現繼父的衣服上有唇印，而且不是第一次了，突然就在今天爆發了，跟繼父大吵起來，甚至於要動手動腳了。她繼父又一再申明這是絕對沒有的事。大抵若此。然而讀者又不免覺得像是庸俗的電視劇了，衣服上的唇印，多麼無聊的劇情。可是是真的，兩個人吵得又那樣凶。</p>
<p>那麼回到第一幕，也就是夜晚的公園的長椅上。書靜向父親講述這一切，說現在家裡亂得不成樣了，當時自己跑了出來，現在也不知道是怎麼一個情形，害怕回去看到這一切。她父親只好勉強答應她，讓她過來住一晚。她當然不免又勸說起她父親，希望父母可以復婚。當然是一廂情願，她父親這麼些年了，自然也有了心儀的對象。</p>
<p>至於起承轉合，當然似乎是有構思。故事的結尾是這樣一個場景：書靜在盥漱間里，對著鏡子塗著鮮紅的唇膏，嘴角浮起一絲笑意。</p>
<p>其實很簡單的構思，真要寫的話，流水賬般的故事，大約幾百個字就結束了。因為會去糾纏文字，怕是不至於一眼望到頭。也許有一天，會去寫出來，也許不會，畢竟過於小家子氣了。</p>
 ]]>
        </content>
    </entry>
</feed>