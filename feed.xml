<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Just lepture]]></title>
    <link href="http://lepture.com/feed.xml" rel="self" />
    <link href="http://lepture.com/" />
    <updated>2015-11-03T15:30:18.442575+08:00</updated>
    <id>http://lepture.com/</id>
    <entry>
        <title type="html"><![CDATA[談藥]]></title>
        <link href="http://lepture.com/zh/2015/about-yao"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2015-09-10T17:38:00+08:00</updated>
        <published>2015-09-10T17:38:00+08:00</published>
        <id>http://lepture.com/zh/2015/about-yao</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>本擬作「藥字的研究」，不過一時興致，觀 Bing 談<a href="http://blog.josui.me/2015-09-03-the-battle-between-traditional-chinese-and-simplified-chinese/">《簡化字、日本語漢字和正體字》</a>忽而想到的。到底心虛，故未敢妄言研究，且作談資罷了。</p>
<p>英文藥字作 drug，以醫人以害人也。或言藥字當作 medicine，便是醫人良方了，無毒品之意，而 medicine 又有巫術之意，彷彿驅鬼的道士畫個符咒燒晝了兌水喝。噫，不料竟頗得中華傳統精髓。</p>
<p>常言道是藥三分毒，作 drug 亦未嘗不可，便如那嗎啡，作藥使得，作毒亦使得。且待我藥死那武大郎，來與官人相歡：</p>
<blockquote><p>那張驢儿把毒藥放在羊肚儿湯里，實指望藥死了你，要霸占我為妻。</p>
</blockquote><p>昔者，神農嚐百草以爲藥也，而未知後世鳥獸魚蟲亦可入藥。是故，藥字作了個草頭，及至東壁先生作《本草綱目》仍以草爲藥之上賓。中華之藥或譯爲 herb 更爲合適。</p>
<p>藥字，上草下樂。草爲意部，樂爲聲部。咦。樂字是聲部？何以樂音 yuè，藥音 yào 呢？</p>
<p>廣韻藥字「以灼切，以母藥韻」，中原音韻「<strong>影母蕭豪韻</strong>」，換作普通話，大抵 yao 音。廣韻樂字「五敎切，疑母效韻」近似 yao 音，又有音「五角切，疑母 覺韻」近似 yue 音；中原音韻樂字收錄頗多音，中有「影母蕭豪韻」與藥一般。由是觀之，「樂」確爲「藥」字音部。</p>
<p>何以現代發音便不相同了呢？便是普通話正韻擇音的問題了，沒能選擇恰當的標準音。比如我們家鄉話裏，藥樂便近似同音，大約 yo 音，陽平偏上聲。家鄉話裏「樂」作快樂之意時大約 lo 音，陽平偏去聲，近於洪武正韻音「歷各切 入聲六藥 洛小韻」。其實「音樂」之音，亦有不少人言「yin lo」。</p>
<p>大陸簡化藥作「药」，上草下約，從約聲，這便很奇妙了。現代音「約」多用 yuē 音，約會嘛，不過口語 yāo 音有所保留，偶爾還能聽見。廣韻約字「於笑切 要小韻」或「於略切 約小韻，影母藥韻」，咦，竟是「影母藥韻」。中原音韻作「<strong>影母蕭豪韻</strong>」，與藥字同音。算是認真研究後做的「藥」字的簡化，不料「約」字又被正韻爲 yuē 了，頗爲可惜。</p>
<p>忽而想到「藥药」聲部「樂約」單看作聲符不免浪費了。料想一個人生病了，必定痛苦，吃了藥，病好了，不亦「樂」乎。這樣說來，鴉片還真是好藥，令人快樂的草呀。大陸簡化「药」，彷彿催促着你按時吃药，便是與醫生作了約定般。</p>
<p>以上乃愚之亂語，非學術研究，諸君自辨。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端的基礎修養：aria-label]]></title>
        <link href="http://lepture.com/zh/2015/fe-aria-label"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2015-08-12T21:40:00+08:00</updated>
        <published>2015-08-12T21:40:00+08:00</published>
        <id>http://lepture.com/zh/2015/fe-aria-label</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>「前端的基礎修養」是我擬寫的一系列文章的總標題。所以喚作「修養」，大抵因為心虛，覺得沒有什麼技術含量，不便言之技術。這一系列會以亂序呈現，同一主題的文章會穿插出現。</p>
<p>這一篇談 Accessibility 相關的主題——aria-label 的使用。Accessibility 作為一個整體，是一個龐大而複雜的主題。這裡單講 aria-label，因其比較簡單與實用，作為切入點正合適。</p>
<p>可能有人不理解什麼是 Accessibility，這裡簡單解釋一下。比如地鐵有大通道方便輪椅通過，比如紅綠燈有聲音提示方便盲人通行，比如鼠標有左手模式方便習慣用左手的人使用。讓更廣泛（生理上有所不同）的人群可以使用，就是 Accessibility。</p>
<p>這個話題去歲在台灣談過，是參加 JSDC 2014 時講的，<a href="/zh/2014/talk-on-accessibility-jsdc2014">不被重視的 HTML：Accessibility</a>。</p>
<h2>aria-label 初窺</h2>
<p>aria-label 是一個 HTML attribute，用來告訴讀屏軟件某個元素是什麼。例如一個關閉按鈕「×」，視覺上看來都能理解，但是讀屏軟件並不能正確讀出，這時就可以用 <code>aria-label</code> 告訴它：</p>
<pre><code class="lang-html">&lt;button aria-label=&quot;關閉&quot;&gt;&amp;times;&lt;/button&gt;
</code></pre>
<p>讀屏軟件（比如說 Voice Over）就會讀出「按鈕，關閉」。圖片 <code>&lt;img&gt;</code> 的 <code>alt</code> 屬性亦有此效果，因為圖片本身是沒有辦法被讀出的，所以讀屏軟件會去閱讀 <code>alt</code> 的內容。</p>
<p>假如 <code>&lt;img&gt;</code> 標籤同時有 <code>aria-label</code> 與 <code>alt</code> 屬性，那麼讀屏軟件應該閱讀哪個的內容呢？答案當然是 <code>aria-label</code>。這裡需要明白 <code>alt</code> 本身還有另一個作用，當圖片無法加載時，瀏覽器會將 <code>alt</code> 的內容展示給用戶。</p>
<figure><img src="//dn-lepture.qbox.me/blog/image-alt.jpg" alt="alt 在各個瀏覽器里的顯示情況" /><figcaption>alt 在各個瀏覽器里的顯示情況</figcaption></figure><h2>aria-label 與 title</h2>
<p>全局屬性 <code>title</code> 是用作提示與補充的，你認為讀屏軟件會識別 <code>title</code> 麼？完全不會，Voice Over<sup class="footnote-ref" id="fnref-vo"><a href="#fn-vo" rel="footnote">1</a></sup>、JAWS<sup class="footnote-ref" id="fnref-jaws"><a href="#fn-jaws" rel="footnote">2</a></sup>、NVDA<sup class="footnote-ref" id="fnref-nvda"><a href="#fn-nvda" rel="footnote">3</a></sup> 都不會去識別，<code>title</code> 對於 Accessibility 毫無幫助。</p>
<pre><code class="lang-html">&lt;a href=&quot;#&quot; title=&quot;設置&quot;&gt;&lt;img src=&quot;gear.png&quot;&gt;&lt;/a&gt;
</code></pre>
<p>這段代碼是一個鏈接，使用一個圖片表示「設置」，使用 <code>title</code> 注釋。如果鼠標懸浮在鏈接上的話，會出現提示，但是讀屏軟件根本無法識別。你應該使用 <code>aria-label</code> 來代替 <code>title</code>:</p>
<pre><code class="lang-html">&lt;a href=&quot;#&quot; aria-label=&quot;設置&quot;&gt;&lt;img src=&quot;gear.png&quot;&gt;&lt;/a&gt;
</code></pre>
<h2>aria-label 與 iconfont</h2>
<p>多數網站已經不使用圖片來表示 icon 了，轉而使用 iconfont 又或者 svg。無論是哪種方案，圖標都只是給視覺正常的人使用的。這個時候你需要使用 <code>arial-label</code> 來標注：</p>
<pre><code class="lang-html">&lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;icon-gear&quot; aria-label=&quot;設置&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&quot;#&quot; aria-label=&quot;設置&quot;&gt;&lt;i class=&quot;icon-gear&quot;&gt;&lt;/i&gt;&lt;/a&gt;
</code></pre>
<p>上面的例子里給出了兩種方案，一是在圖標本身的標籤上，一是在鏈接 <code>&lt;a&gt;</code> 上，兩種方案讀屏軟件都能正確識別，但是個人以為放在鏈接 <code>&lt;a&gt;</code> 上比較好，比如鏈接里是圖標加文字說明的形式：</p>
<pre><code class="lang-html">&lt;a href=&quot;#&quot; aria-label=&quot;設置&quot;&gt;&lt;i class=&quot;icon-gear&quot;&gt;&lt;/i&gt; 設置&lt;/a&gt;
</code></pre>
<p>這時便不能在 iconfont 上添加 <code>aria-label</code> 了，否則會念兩遍「設置」，但是這種情況更好的方法是使用 <code>aria-hidden</code>：</p>
<pre><code class="lang-html">&lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;icon-gear&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 設置&lt;/a&gt;
</code></pre>
<h2>aria-label 作為提示</h2>
<p>但是許多時候，即使你能看清楚圖標，你也完全不知道那是個什麼鬼東西，圖標始終是一個抽象概念，並非人人都能理解。我們常會用 tooltip 作為提示，比如 <a href="http://onehackoranother.com/projects/jquery/tipsy/">jquery.tipsy</a>。</p>
<p>jquery.tipsy 這個插件默認使用 <code>title</code> 作為數據來源，也可以使用其它屬性：</p>
<pre><code class="lang-js">$(&#39;#example-custom-attribute&#39;).tipsy({title: &#39;aria-label&#39;});
</code></pre>
<p>GitHub 使用的純 CSS 方案不錯，使用 CSS <code>attr()</code> 獲取 arial-label 的內容作為提示，在不需要兼容老舊瀏覽器的情況下建議使用，整理代碼如下：</p>
<pre><code class="lang-css">.tip {
  position: relative;
}
.tip:before {
  display: none;
  position: absolute;
  top: auto;
  right: 50%;
  bottom: -7px;
  margin-right: -5px;
  width: 0;
  height: 0;
  content: &#39;&#39;;
  border: 5px solid transparent;
  border-bottom-color: rgba(0, 0, 0, 0.9);
  pointer-events: none;
  z-index: 10000;
}
.tip:after {
  display: none;
  position: absolute;
  top: 100%;
  right: 50%;
  padding: 0 10px;
  border-radius: 3px;
  background-color: rgba(0, 0, 0, 0.9);
  color: #fff;
  font-size: 11px;
  font-weight: 500;
  content: attr(aria-label);
  white-space: pre;
  z-index: 10000;
  margin-top: 5px;
  line-height: 26px;
  transform: translateX(50%);
}
</code></pre>
<figure><img src="//dn-lepture.qbox.me/blog/github-aria-label.png" alt="GitHub aria-label 提示" /><figcaption>GitHub 使用 aria-label 提示</figcaption></figure><h2>aria-label 與表單</h2>
<p><code>placeholder</code> 的出現導致了大量不帶 <code>&lt;label&gt;</code> 的 form 表單，然而<strong>讀屏軟件是不會識別 <code>placeholder</code></strong> 的。例如：</p>
<pre><code class="lang-html">&lt;input name=&quot;username&quot; placeholder=&quot;用戶名&quot;&gt;
&lt;input name=&quot;email&quot; placeholder=&quot;郵箱&quot;&gt;
</code></pre>
<p>對於視覺正常的人來說沒有問題，但是在讀屏軟件看來它只是兩個輸入框，至於需要輸入什麼，它是不知道的。這個時候你需要用 <code>aria-label</code> 再次標注：</p>
<pre><code class="lang-html">&lt;input name=&quot;username&quot; placeholder=&quot;用戶名&quot; aria-label=&quot;用戶名&quot;&gt;
&lt;input name=&quot;email&quot; placeholder=&quot;郵箱&quot; aria-label=&quot;郵箱&quot;&gt;
</code></pre>
<p>還有另外一種方案，使用 <code>&lt;label&gt;</code>，但是不顯示 <code>&lt;label&gt;</code>：</p>
<pre><code class="lang-html">&lt;label for=&quot;username&quot; class=&quot;sr-only&quot;&gt;用戶名&lt;/label&gt;
&lt;input id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;用戶名&quot;&gt;
</code></pre>
<p>使用 CSS 來隱藏 <code>.sr-only</code>(screen reader only) 這個 class 的標籤，注意不能使用 <code>display: none</code>，否則讀屏軟件會忽略，只在<a href="http://a11yproject.com/posts/how-to-hide-content/">視覺上將其隱藏</a>即可。</p>
<h2>索引</h2>
<p><code>aria-label</code> 理論上是作用於所有 tag 的，但是我實際測試下來，不支持 h(n) 例如 h1-h6。</p>
<ul>
<li><a href="https://dev.opera.com/articles/ux-accessibility-aria-label/">dev.opera.com/articles/ux-accessibility-aria-label/</a></li>
<li><a href="http://webaim.org/techniques/forms/advanced">webaim.org/techniques/forms/advanced</a></li>
<li><a href="http://www.deque.com/blog/text-links-practices-screen-readers/">www.deque.com/blog/text-links-practices-screen-readers/</a></li>
<li><a href="http://www.w3.org/TR/2015/WD-aria-in-html-20150521/">www.w3.org/TR/2015/WD-aria-in-html-20150521/</a></li>
</ul>
<div class="footnotes">
<hr>
<ol><li id="fn-vo"><p>Voice Over 是 Apple (Mac &amp; iOS) 的讀屏軟件<a href="#fnref-vo" rev="footnote">&#8617;</a></p></li>
<li id="fn-jaws"><p>JAWS 是一個讀屏軟件，適用於 Windows<a href="#fnref-jaws" rev="footnote">&#8617;</a></p></li>
<li id="fn-nvda"><p>NVDA 是一個開源讀屏軟件 <a href="http://www.nvaccess.org/">www.nvaccess.org/</a><a href="#fnref-nvda" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端的基礎修養：Microdata]]></title>
        <link href="http://lepture.com/zh/2015/fe-microdata"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2015-07-23T22:17:00+08:00</updated>
        <published>2015-07-23T22:17:00+08:00</published>
        <id>http://lepture.com/zh/2015/fe-microdata</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>「前端的基礎修養」是我擬寫的一系列文章的總標題。所以喚作「修養」，大抵因為心虛，覺得沒有什麼技術含量，不便言之技術。這一系列文章多與 HTML/XML 相關，許多主題一般前端從業者不是太知道，或者知道但不太重視，我以為很可惜。</p>
<p>這是「前端的基礎修養」系列文章的第一篇，單講 <a href="http://www.w3.org/TR/microdata/">Microdata</a> 相關的內容，剩下的主題每周不定期更新。</p>
<p>Microdata 是 HTML5 引入的，是為機器而不是用戶所設計的，主要目的是為了機器能更好的理解內容。這看起來與前端沒什麼關係，一般理解的前端是服務於用戶的，主要負責與用戶交互的部分。但是 microdata 是 HTML 的一部分，雖然目的是易於機器理解，但最終也能惠於用戶。</p>
<figure><img src="//dn-lepture.qbox.me/blog/schema-google.png" alt="Google 搜索結果展示" /></figure>
<p>Microdata 以機器可解析的語言來描述網頁里的內容是什麼，比如網頁描述的是一本書、一篇影評或者一張菜譜。例如上面的這張圖，展示的是我的<a href="/zh/2011/dajiangdahai">一篇書評</a>在 Google 搜索里的結果，它有作者信息、有評分、有發表時間，這都是因為這篇書評的網頁里使用 Microdata 標示出了相應的信息。</p>
<h2>Microdata 基礎</h2>
<p>Mircodata 主要用到這幾個 attributes 來標注信息：itemscope, itemtype, itemprop，另外還有 itemid 與 itemref。</p>
<p>包含 <strong>itemscope</strong> 這個 attribute 的 DOM 樹就是一個事物(item)，例如：</p>
<pre><code class="lang-html">&lt;div itemscope&gt;
...
&lt;/div&gt;
</code></pre>
<p>我們可以給這個事物定義一個類型，比如一本書，這時就需要用到 <strong>itemtype</strong>，它的值是一個或多個 URL：</p>
<pre><code class="lang-html">&lt;div itemscope itemtype=&quot;http://example.com/Book&quot;&gt;
...
&lt;/div&gt;
</code></pre>
<p>如上的代碼片斷，我們知道它是一本書了，但是它還缺少書的信息，需要用 <strong>itemprop</strong> 來標示：</p>
<pre><code class="lang-html">&lt;div itemscope itemtype=&quot;http://example.com/Book&quot;&gt;
  &lt;div&gt;書名：&lt;span itemprop=&quot;name&quot;&gt;改革歷程&lt;/span&gt;&lt;/div&gt;
  &lt;div&gt;作者：&lt;span itemprop=&quot;author&quot;&gt;趙紫陽&lt;/span&gt;&lt;/div&gt;
  ...
&lt;/div&gt;
</code></pre>
<p>也許因為奇怪的設計方案，也許因為 PM 的無理取鬧，也許就是因為代碼不太好寫，佈局並不能輕易合乎要求，itemprop 可能散落於其它地方，這時可以使用 <strong>itemref</strong> 將它們連接起來：</p>
<pre><code class="lang-html">&lt;div itemscope itemtype=&quot;http://example.com/Book&quot; itemref=&quot;a b&quot;&gt;
  &lt;div&gt;作者：&lt;span itemprop=&quot;author&quot;&gt;趙紫陽&lt;/span&gt;&lt;/div&gt;
  ...
&lt;/div&gt;

&lt;!-- 因為某些原因，書名與價格不在 scope 裡面 --&gt;
&lt;div id=&quot;a&quot;&gt;書名：&lt;span itemprop=&quot;name&quot;&gt;改革歷程&lt;/span&gt;&lt;/div&gt;
&lt;div id=&quot;b&quot;&gt;價格：&lt;span itemprop=&quot;price&quot;&gt;$12&lt;/span&gt;&lt;/div&gt;
</code></pre>
<p>Microdata 也定義了 DOM API，目前只有 Firefox 與 Opera 支持，用途不太大，可以在 Firefox 的終端里測試一下：</p>
<pre><code class="lang-js">document.getItems()
document.getItems(&#39;http://schema.org/Article&#39;)
</code></pre>
<h2>Microdata 與 Schema.org</h2>
<p>Microdata 作為規範，定義好了語法，其中 <strong>itemtype</strong> 表示事物的類型。如果每一家都自己定義 <strong>itemtype</strong> 的話，結局將相當糟糕，網站開發者也將頭疼不已。於是 Google, Bing, Yandex, Yahoo! 合作創建了 Schema.org 用以統一規範 Microdata。</p>
<p>Schema.org 不是標準化組織，所做的卻是標準化的事情。查閱 <a href="https://schema.org/docs/gs.html">Schema.org 快速入門</a>文檔，瞭解如何使用。例如你正在看的這篇文章所在的頁面便在使用 <a href="http://schema.org/Article">schema.org/Article</a> 這個 itemtype，你可以查看一下本頁面的源碼。</p>
<p>Schema.org 定義了<a href="http://schema.org/docs/full.html">許多類型</a>，仍然在<a href="https://github.com/schemaorg/schemaorg">創建更多的類型</a>。這些定義對後端開發也有意義，幫助你理解業務模型，瞭解某一模型應該包含哪些數據，亦是不小的啓發。</p>
<p>比如我們來賣個車看看：<a href="http://schema.org/Car">schema.org/Car</a></p>
<pre><code class="lang-html">&lt;div itemscope itemtype=&quot;http://schema.org/Car&quot;&gt;
  &lt;h2 itemprop=&quot;name&quot;&gt;奇瑞QQ&lt;/h2&gt;
  &lt;p itemprop=&quot;description&quot;&gt;中國汽車製造商奇瑞汽車公司於2003年推出的一款微型車(...)&lt;/p&gt;
  &lt;img itemprop=&quot;image&quot; href=&quot;2003_qq.png&quot; /&gt;
  &lt;div&gt;
    &lt;strong&gt;顏色&lt;/strong&gt;
    &lt;span itemprop=&quot;color&quot;&gt;黑色&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;strong&gt;齒輪數&lt;/strong&gt;
    &lt;span itemprop=&quot;numberOfForwardGears&quot;&gt;6&lt;/span&gt;
  &lt;/div&gt;
  &lt;div itemprop=&quot;vehicleEngine&quot; itemscope itemtype=&quot;http://schema.org/EngineSpecification&quot;&gt;
    &lt;div&gt;
      &lt;strong&gt;引擎&lt;/strong&gt;
      &lt;span itemprop=&quot;name&quot;&gt;1.1 L SQR472F I4 DOHC 16v — 50 kW at 6000 rpm, 90 N·m at 3500 rpm&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;strong&gt;氣囊數&lt;/strong&gt;
    &lt;span itemprop=&quot;airbags&quot;&gt;4&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2>RDFa, Microformats 與 JSON-LD</h2>
<p>結構化數據在 Microdata 出來之前就已經有了，比如 RDFa，比如 Microformats。Microdata 正是站在他們肩膀上，總結他們的得失利弊發展起來的。</p>
<p>Schema.org 的示例通常包含 Microdata，RDFa 與 JSON-LD 格式。RDFa 主要引入了 vocab, typeof 與 property 作為 attributes。這裡不再談 RDFa 的格式與實現，推薦使用 Microdata。但是需知 RDFa 仍然在被使用，比如豆瓣網，因為創建時間早，又沒有升級代碼，仍然使用著 RDFa，他們使用的字典集是 <a href="http://www.data-vocabulary.org/">www.data-vocabulary.org/</a>。</p>
<p>Microformats 已經十年了，這是一套使用 class 輔以其它屬性來標記事物的方案。比如這篇文章的這個頁面亦使用 Microformats 做了標注，類型是 <a href="http://microformats.org/wiki/hentry">hentry</a>。Microformats 現在推出了 2.0 版本，預測支持性不會太好，但是仍然值得一讀，當作指導前端的 class 命名也不錯。正在使用的 hentry 是 1.0:</p>
<pre><code class="lang-html">&lt;div class=&quot;hentry&quot;&gt;
  &lt;h1 class=&quot;entry-title&quot;&gt;前端的基礎修養：Microdata&lt;/h1&gt;
  &lt;div class=&quot;entry-content&quot;&gt;...&lt;/div&gt;
  ...
&lt;/div&gt;
</code></pre>
<p>JSON-LD 誕生的時間更晚，是一套使用 JSON 格式標注數據的方案。最大的優點是 JSON 格式便於解析，缺點是數據冗余，尤其是在需要 HTML 展示大段內容的情況下。</p>
<h2>Microdata &amp; Schema.org 的現狀與未來</h2>
<p>目前 Google, Bing, Yandex, Yahoo! 都支援 Microdata，但是進度不一效果不一，支援度最好的還是 Google。據說<a href="http://www.zhihu.com/question/19918861">百度也是支持的</a>。</p>
<p>各個搜索引擎商的接入文檔：</p>
<ol>
<li><a href="https://developers.google.com/structured-data/">developers.google.com/structured-data/</a></li>
<li><a href="http://www.bing.com/webmaster/help/marking-up-your-site-with-structured-data-3a93e731">www.bing.com/webmaster/help/marking-up-your-site-with-structured-data-3a93e731</a></li>
<li><a href="https://help.yandex.com/webmaster/microdata/what-is-microdata.xml">help.yandex.com/webmaster/microdata/what-is-microdata.xml</a></li>
<li><a href="https://help.yandex.com/webmaster/schema-org/what-is-schema-org.xml">help.yandex.com/webmaster/schema-org/what-is-schema-org.xml</a></li>
</ol>
<p>結構化的數據不僅僅能被這些 Web 搜索引擎使用，還能被諸如 Siri, Cortana 等語音設備使用，當然，他們也能被當作搜索引擎。例如我問 Siri 最近有什麼電影可看，於是找到了《模仿遊戲》</p>
<figure><img src="//dn-lepture.qbox.me/blog/siri-movie.jpg" alt="電影展示" /><figcaption>Siri 展示的模仿遊戲</figcaption></figure><p>這個內容來自<a href="http://www.rottentomatoes.com/">爛番茄</a>，爛番茄的網頁有使用 Schema.org 的 Microdata 標注，不知道 Siri 是否解析了 Microdata，還是專門為爛番茄作了解析。</p>
<p>再次詢問 Siri 附近吃飯的地方，返回了大眾點評的數據：</p>
<figure><img src="//dn-lepture.qbox.me/blog/siri-restaurants.jpg" alt="餐廳列表" /><figcaption>Siri 展示的餐廳列表</figcaption></figure><p>查看大眾點評的網頁，亦是使用 Schema.org 的 Microdata 標注的。</p>
<p>因為沒有 Android 與 Windows 手機，無法展示 Google Now 與 Cortana 的效果。查閱 <a href="https://msdn.microsoft.com/en-us/library/dn632191.aspx">Microsoft Cortana 的文檔</a>可知其是支持 Schema.org 的。Google Now 就更不必說了。</p>
<p>結構化的數據在未來相當有吸引力，方便未來的各種設備接入。比如「智能廚房」，你告訴它你要做什麼菜，於是它從<a href="http://www.xiachufang.com/">下廚房</a>找到了菜譜，因為下廚房使用了結構化數據，「智能廚房」就能直接列出需要的材料與材料的份量。</p>
<p>目前正在應用的點有很多，比如日曆、地圖、郵件等。尤其值得一提的是郵件，這個古老的通訊方式也許會在結構化數據下煥然一新。Gmail 已經在做<a href="https://developers.google.com/schemas/tutorials/embedding-schemas-in-emails">一系列嘗試</a>了，比如從郵件里提取出你的行程以及日程安排，比如匯總你的收據。</p>
<p>寫作此篇時發現國內不少網站已經在應用 Microdata 了，頗感欣慰。然而國內大廠們依舊我行我素，走著自己的獨木橋。</p>
<h2>索引</h2>
<ul>
<li>Microdata: <a href="http://www.w3.org/TR/microdata/">www.w3.org/TR/microdata/</a></li>
<li>JSON-LD: <a href="http://www.w3.org/TR/json-ld/">www.w3.org/TR/json-ld/</a></li>
<li>RDFa: <a href="http://www.w3.org/TR/xhtml-rdfa-primer/">www.w3.org/TR/xhtml-rdfa-primer/</a></li>
<li>Microformats: <a href="http://microformats.org/">microformats.org/</a></li>
<li>Embed Schemas in Emails: <a href="https://developers.google.com/schemas/tutorials/embedding-schemas-in-emails">developers.google.com/schemas/tutorials/embedding-schemas-in-emails</a></li>
</ul>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[戴珍珠耳環的美少女]]></title>
        <link href="http://lepture.com/zh/2015/meisje-met-de-parel"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2015-04-16T18:30:00+08:00</updated>
        <published>2015-04-16T18:30:00+08:00</published>
        <id>http://lepture.com/zh/2015/meisje-met-de-parel</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>我很早以前看過《戴珍珠耳環的少女》這部電影，情節已經忘卻了。最近又看了一次書，是我<a href="./one-week-at-qingdao">離開青島</a>後到杭州，在良渚文化村這邊的咖啡館辦公時看的。</p>
<p>然而我並不想談書。這部虛構的小說巧妙地將 Vermeer 的多幅作品以及作品裏的人物結合起來，編織出了一個彷彿真實發生的故事。我卻只想談談畫，當我看到書裏 Griet 與她父親描述<a href="http://en.wikipedia.org/wiki/View_of_Delft">《台夫特的風景》</a>時，也有一種想要像這樣描述畫作的衝動。</p>
<p>他們聊天時這樣描述：</p>
<blockquote><p>我們看到一幅畫，畫著台夫特的風景，是從鹿特丹和席丹城門的方向看出去的角度。畫中的天空佔了好大一部分，陽光照著其中幾棟房子。
而且顔料中混了沙子，使磚牆和屋頂看起來有粗糙的感覺。
水面上有長長的倒影，幾個小小的人站在河岸邊，離我們最近。</p>
</blockquote><p>只是簡單幾句，沒有畫家想要表達什麼，單純地覺得美就足夠了。現代藝術卻執著於思想，抽象得毫無美感，直呼着「你看，我在表現X，我在表現Y」。可是你還不敢批評，因爲你不懂呀。</p>
<p>我欣賞古典的畫作、音樂、詩歌，因爲他們真誠，因爲他們容易理解，正如白居易的寫給老奶奶聽的詩一般。</p>
<figure><img src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Meisje_met_de_parel.jpg/875px-Meisje_met_de_parel.jpg" alt="Girl with a Pearl Earring" /><figcaption>戴珍珠耳環的少女</figcaption></figure><p>戴珍珠耳環的少女是這樣一幅畫，你完完全全覺得美麗的畫作。黑色背景的畫布，光線從左上角斜射下來，稍稍從畫裏射向畫外，照亮少女的頭巾、前額、內側的面頰、脣與下巴。眼睛的左上角閃爍着，正是陽光照過來的方向。內側的面頰呈現出陰影，因爲沒有光的接觸。珍珠耳環也處於這陰影裏，餘輝卻照亮了它的左上，整體呈現出銀光的光澤。藍色頭巾裹住了頭髮，也裹住了大半的耳朵。於頭巾頂結成土色的一束，直垂到後背。光線，陰影，頭巾與衣服的褶皺的處理都好極了。</p>
<p>第一眼望過去時，總免不了自作多情地覺得少女正看着你，可是再細看一下便有些失望了。她是那種什麼都沒看的眼神，就像你在想心事時的樣子。最讓人著迷的莫過於少女的嘴脣了。微啓的雙脣，彷彿微笑着，又彷彿沒有，因爲光線，也因爲胭脂，脣上閃動着光，簡直就想吻上去。</p>
<p>偶爾想到最初的畫作會不會不是黑色的背景，像 Vermeer 的其他人物作品一樣，也有各種裝飾，只是後來修改成了這樣。畫家描繪的是他們眼中的世界，最初也許像《倒牛奶的女僕》那樣，有牆壁，有桌子。可是到了後來，畫家眼中只剩下了少女本人，旁的雜物已經黯淡無光了。</p>
<p>等到看到書的很後面時，書裏描寫的彷彿一開始便是黑色的背景，「這幅畫一點都不像他其他的畫，上面只有我——我的頭和肩膀，沒有桌子或窗簾、沒有窗戶或粉刷來緩和或分散視線」。</p>
<p>他後來也有純黑背景的作品，但是《戴珍珠耳環的少女》是他第一幅這樣的畫作，也是後來者無法超越的存在。比如他另作的一幅仿《戴珍珠耳環的少女》的畫作《少女》，重點是主人公不如戴珍珠耳環的少女。</p>
<figure><img src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Vermeer-Portrait_of_a_Young_Woman.jpg/800px-Vermeer-Portrait_of_a_Young_Woman.jpg" alt="少女" /><figcaption>Portrait of a Young Woman</figcaption></figure><p>所以人美也是關鍵。我們看電影《戴珍珠耳環的少女》的劇照，看仿畫部分的劇照，結果便很不如人意。不如<a href="https://www.youtube.com/watch?v=dpNvNjl9OM8">武井咲扮演的</a>優雅。</p>
<figure><img src="http://dn-lepture.qbox.me/blog/girl-with-a-pearl-earring-movie-photo.jpg" alt="戴珍珠耳環的少女劇照" /></figure>
<p>沒能見到真跡真是遺憾，許多細節都無法觀察到。比如像書中描寫的，「後來我再去看那幅畫，在我左眼之上，他加了一縷從藍布底下偷溜出來的頭髮」。然而我卻如何也發現不了這「偷溜出來的頭髮」。也許有一天能一睹真顔，那時再細細分辨吧。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[青島小住]]></title>
        <link href="http://lepture.com/zh/2015/one-week-at-qingdao"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2015-03-29T20:42:00+08:00</updated>
        <published>2015-03-29T20:42:00+08:00</published>
        <id>http://lepture.com/zh/2015/one-week-at-qingdao</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>上海的租房特別冷，空調不工作，夜晚的時候，瑟瑟躲在被子裏，聽窗外車來車往，不時又是幾聲汽車的鳴笛，時常難以入睡。</p>
<p>年後回上海，短暫待了幾天就逃到北京去了，在公司的民居裏住了兩周。一時又不太願意回上海，正好去青島的機票便宜，北京到青島與青島到上海的機票加起來仍然比北京到上海的高鐵便宜，於是便過去小住一週。</p>
<p>第一次來青島還是大一的暑假，那時是第一次出省，坐了一晚上的火車才到阿姨家。去嶗山，觀雲水，去海邊，看風帆。後來又來過一次，記憶卻很模糊。這次是第三次了。</p>
<p>阿姨家在海邊，出了小區走幾步便到海岸線了。青島的海算是國內少有的看着還算乾淨的海了。</p>
<figure><a href="https://www.flickr.com/photos/lepture/16685078337/"><img src="//dn-lepture.qbox.me/blog/rocks-in-sea.jpg/thumbnail" alt="海中岩石" /></a><figcaption>青島的海 by Olympus E-PL5</figcaption></figure><p>工作日的早晨，一般七點多起牀，看 Slack 上只有 slackbot 與我兩個人在線，先看一下 GitHub，有沒有需要處理的 issue 與 pull request，再看一眼 Trello，想想今天要做點什麼。然後吃個早餐洗漱一下，便開始了一天的編碼工作。</p>
<p>要做的事情很明確的時候，寫代碼就成了一種享受。沒有人在旁邊聊天，沒有人會突然跑過來找你，你只需要構思清楚，然後一點一點實現，一個接一個的 pull request，沉浸其中，只覺得這一天沒有虛度。當然這樣好的狀態也不是常有，也會有耗在一個小問題上很長時間的時候，到了晚上便有點「今天什麼也沒有做」的沮喪感。</p>
<p>這些天的天氣並不好，海上霧氣一直很濃。後來下了一場雨，起了些風，終於吹淡了些許。下午四點多的時候，寫了一天代碼，眼睛也有點累了，伸個懶腰，到海邊放個風。</p>
<figure><a href="https://www.flickr.com/photos/lepture/16673050299/"><img src="//dn-lepture.qbox.me/blog/shearwater-mist-day.jpg/thumbnail" alt="陰天時海鷗" /></a><figcaption>陰天時拍攝的海鷗 by iPhone 6</figcaption></figure><figure><a href="https://www.flickr.com/photos/lepture/16704832398/"><img src="//dn-lepture.qbox.me/blog/shearwaters-sunny-day.jpg/thumbnail" alt="晴天時海鷗" /></a><figcaption>晴天時拍攝的海鷗 by iPhone 6</figcaption></figure><p>這個時節頗多海鷗，可是沒有長焦鏡頭，相機與手機的差距並不明顯。週末的時候，在奧帆中心看別人長焦拍攝，海鷗浮在水上，遊動時身前兩撇水紋清晰可見，一條條弧線優雅盪開。雖然想買，不過一想到攜帶不便，就猶豫了起來。</p>
<figure><a href="https://www.flickr.com/photos/lepture/16685079697/"><img src="//dn-lepture.qbox.me/blog/sunset-at-aofan.jpg/thumbnail" alt="奧帆中心夕陽" /></a><figcaption>在奧帆中心附近拍攝的夕陽 by iPhone 6</figcaption></figure><p>還沒到旅遊旺季，海邊的遊客很少，多是本地住戶。小夫妻們提着個小桶，在海邊的水窪裏搜尋着海螺和小魚。小孩子拿着鏟子在沙灘上挖坑，旁邊的母親們坐着聊聊天。還有出來遛狗的，黑白的蘇牧，雪白的薩摩耶，歡快地在海邊奔跑着。還有坐在海岩上孤獨沉思的老者。</p>
<figure><a href="https://www.flickr.com/photos/lepture/16705011880/"><img src="//dn-lepture.qbox.me/blog/thinking-over-sea.jpg/thumbnail" alt="海岩上孤獨沉思的老者" /></a><figcaption>海岩上孤獨沉思的老者 by Olympus E-PL5</figcaption></figure><p>夜晚的時候，坐了一天也腰酸背痛了，需要運動運動，於是沿着海岸線跑跑步。路燈微黃，海風吹拂，稍微跑一跑，出點汗，不亦快哉。</p>
<figure><a href="https://www.flickr.com/photos/lepture/16685096857/"><img src="//dn-lepture.qbox.me/blog/qingdao-bay.jpg/thumbnail" alt="海岸線" /></a><figcaption>海岸線 by iPhone 6</figcaption></figure><p>最近正在玩 <a href="https://www.duolingo.com/lepture">Duolingo</a>，臨睡前學一點西班牙語，十一點左右的時候便入睡了。不像在上海的時候，總是要到十二點以後，甚至一點以後才能入睡。</p>
<p>青島小住，工作日的一天大抵如此。</p>
<p>這段時間裏開始整理 Flickr 了，打算照片用 Flickr 來管理，歡迎 <a href="https://www.flickr.com/photos/lepture/">Follow 我的 Flickr</a>。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[東北偏北，漠河之美]]></title>
        <link href="http://lepture.com/zh/2015/a-trip-in-mohe"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2015-01-25T19:25:00+08:00</updated>
        <published>2015-01-25T19:25:00+08:00</published>
        <id>http://lepture.com/zh/2015/a-trip-in-mohe</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>車廂里的溫度稍嫌高了，羽絨衣是不能穿的，即使只是襯衫外加一件單薄的羊絨毛衣，也有點熱得喘不過氣來。清晨醒來的時候，車窗內側卻還是結冰了，窗沿邊一層白色小丘，凹下去又凸起來，圍著一圈透明膠似的冰凍。窗外幾處房屋，天色尚早，再過一些時候便是炊煙裊裊，隔著模糊的車窗望去，彷彿舊電影的質感。</p>
<figure><img src="//dn-lepture.qbox.me/blog/frozen-window.jpg/thumbnail" alt="結冰的車窗" /><figcaption>結冰的車窗 by iPhone 6</figcaption></figure><p>我已經好久沒有坐過熬夜的硬座了，彷彿睡著了，又彷彿一直醒著，睡眠當然是一個問題，但是還可以接受。最大的問題是總有人在車廂里吸煙，真是討厭，可是這種火車不像高鐵動車一樣是禁煙的，沒有辦法。返程的時候改乘飛機，第一次坐了中國產的螺旋槳民航飛機。暮色里的古蓮機場，藍色的天幕，黃色的照明，手機隨手拍一張也很有感覺的樣子。</p>
<figure><img src="//dn-lepture.qbox.me/blog/plane-mohe-harbin.jpg/thumbnail" alt="漠河飛往哈爾濱的飛機" /><figcaption>漠河飛往哈爾濱的中國產螺旋槳民航飛機 by iPhone 6，無修圖</figcaption></figure><p>魚邀我去漠河時已經臨近出發時間了。中午上海飛哈爾濱，當晚便乘火車哈爾濱到漠河。我們那時在火車站候車，兩個登山包彼此靠著放在地上，魚去買雪糕回來時遇到了接下來一起玩耍的小夥伴。他們來找人拼車，正好我們一點攻略都沒有做，沒有訂車，沒有訂住處，自然欣然應允了。我一向沒有做攻略的習慣，觀光而已，到目的地後自然什麼信息都會有的，這也是以往的經驗。但是有提前訂好的車，還是能省去不少事。</p>
<p>這一天都是在交通工具上度過的。火車到達漠河後，大家在車站匯合，馬上就坐上聯繫好的汽車奔赴北極村，簡直一刻也不肯停歇。雖然黑乎乎的，一吃完晚飯，大家便往江邊跑。江邊有一個廣場，叫北極廣場，一排冰雕的牆與門立在一旁，未完成的雕塑落坐在中間，另一側的冰雕彷彿祭壇，第二天一早便吸引著一波波遊人在其下拍照。北極廣場亦是我們次日的第一站觀光點。</p>
<figure><img src="//dn-lepture.qbox.me/blog/morning-snow-at-beiji.jpg/thumbnail" alt="北極廣場的江雪" /><figcaption>清晨江邊遠眺，陽光下閃爍的白雪 by iPhone 6</figcaption></figure><p>漠河的雪很奇怪，像乾麵粉一般，揉不成團。一顆一顆的，在陽光下閃耀著。根本沒有辦法打雪仗，只能戲水一樣，向前拋撒，白麵般散開又落到地上。</p>
<p>上午的時光都在北極村的各處景點閒逛，拍拍照。跑去江上，到國界線拍照留戀。江對岸便是俄羅斯，竪直的陡峭，與這邊的風光全然不同。立著的山，黑白的參差，像國畫的潑墨。</p>
<p>中午便趕到龍江第一灣，其時已經餓透了，在東北唯一一次吃得特別乾淨的一餐。大家上廁所，外表典雅的廁所，裡面沒有馬桶，屎尿直接落下，冰淇淋一般立起，大家都惡趣味地拍照。可是卻放過了這廁所外的白樺樹，倒下的樹枝與站著的樹枝合成的幾何形態。</p>
<figure><img src="//dn-lepture.qbox.me/blog/white-birches.jpg/thumbnail" alt="白樺樹的幾何形態" /><figcaption>白樺樹的幾何形態 by iPhone 6</figcaption></figure><p>龍江第一灣的主題是登山。山並不算高，沿著台階很容易便上去了。上山時還天氣還好，可是在快要登頂時卻狂風大作，雪粉飛舞，眼前的景色會隔了一層白色簾幕的遮掩。等到下山時，天色已經黯淡下來了。今晚還要趕去北紅村，據說這才是最北的村子。</p>
<figure><img src="//dn-lepture.qbox.me/blog/mountain-at-longjiang.jpg/thumbnail" alt="龍江第一灣登山" /><figcaption>龍江第一灣登山 by iPhone 6</figcaption></figure><hr>
<p>日間行車已經過於驚心了，不曾想夜間更是動魄。公路被白雪覆蓋著，中間是兩條被車碾壓實的雪道，兩側還是蓬松的高聳的雪層，隔一段路後出現一條分叉的實線，是兩車相遇時要用到的。遠遠地看到對面有車開過來，然後便在分叉道上停著，等對面的車通過後再繼續前行。</p>
<p>其間便出了一次意外，沒有匯車線，我們的車開到了邊上的雪層里，怎麼使力都開不出來，大家只好下車推車。可是夜間的經歷卻全然不同，不需要我們出力，只是一顆心懸著，不安，緊張，與激動。</p>
<p>車到最北點時已經黑得不像樣了。有一個石塊落在這裡，寫著「找到北了」，我們到這裡時還有遊客在石塊處拍照。師傅要從此處下江，在江冰上行駛。下江處很是陡峭，我們都下了車，車向前開去，車頭開始下傾，車輪已經停止旋轉，像坐滑梯一樣，整個車滑下江去，整個心都跟著顫抖。我們自己走下雪坡時都緊張死了，何況是開車。</p>
<hr>
<p>北紅村是個沒有 Wi-Fi 的小村子。吃過晚飯後，大家去小賣部買雪糕吃，凍山楂，藍梅酒，晚上玩乾瞪眼時的食物。裕買了煙火，說要晚上放。</p>
<figure><img src="//dn-lepture.qbox.me/blog/beihong-in-morning.jpg/thumbnail" alt="北紅村的清晨" /><figcaption>北紅村的清晨，炊煙裊裊 by iPhone 6 無修圖</figcaption></figure><p>正好是農歷十五，蟹色天幕里一輪圓月，幾點星光，可惜沒有璀璨銀河。魚與勳架好了相機，調整曝光，先拍拍冷月當作測試。裕早已準備好了煙火，它靜靜躺在雪地裡，只待燃起的那一刻。</p>
<p>五，四，三，二，一。一束光射向天空，訇然迸裂，化作一圈又一圈紅黃火星從中心四處散開，然後又隱沒在了天色里。一顆，兩顆，煙火衝上半空，又消散得不著蹤跡，才剛開始就已經結束了。</p>
<p>去看他們的拍照，雖然精心準備了，結果沒有出彩的照片。煙火時間太短，一瞬而逝，可是人窮志短，燒不起這個錢，只得作罷。</p>
<hr>
<p>次日的行程，到白樺林，我終於使用上了我的相機。一邊哼著樸樹的「白樺林」一邊到處拍拍。</p>
<figure><img src="//dn-lepture.qbox.me/blog/birches-and-sky.jpg/thumbnail" alt="白樺林的天空" /><figcaption>白樺林的天空 by Olympus EP 5</figcaption></figure><figure><img src="//dn-lepture.qbox.me/blog/sun-shine-in-birches.jpg/thumbnail" alt="白樺林的閃爍" /><figcaption>白樺林的閃爍 by Olympus EP 5</figcaption></figure><figure><img src="//dn-lepture.qbox.me/blog/wen-in-birches.jpg/thumbnail" alt="白樺林里的雯" /><figcaption>白樺林里的雯 by Olympus EP 5</figcaption></figure><p>「雪依然在下，那天空依然安祥，年輕的人們，消失在白樺林」</p>
<hr>
<p>我沒有記日記的習慣，遊記又總是拖著，等到快要忘卻時才流水賬般記錄下來。整理照片，跟隨照片去回憶。魚卻會記日記，他有一個 Moleskine 的筆記本，筆記本設計好了一天記一頁的日記。晚上的時候，他一邊回憶著行程，一邊記錄著，很快一頁紙便用完了，接著分配給明天的紙也用完了。</p>
<figure><img src="//dn-lepture.qbox.me/blog/lxyu-is-showing.jpg/thumbnail" alt="魚向姑娘們展示照片" /><figcaption>魚向姑娘們展示照片 by iPhone 6</figcaption></figure><p>想一想，確實發生了好多事，可是於我而言並沒有深邃的感悟，我也並不需要深邃的感悟。親眼看看這個世界就已經足夠了。</p>
<figure><img src="//dn-lepture.qbox.me/blog/sunrise-snow-road.jpg/thumbnail" alt="日出在雪地公路上" /><figcaption>日出在雪地公路上 by Olympus EP 5</figcaption></figure><figure><img src="//dn-lepture.qbox.me/blog/car-on-snow-road.jpg/thumbnail" alt="雪地公路上的汽車" /><figcaption>雪地公路上的汽車 by Olympus EP 5</figcaption></figure><p>照片里留下的只是河山裡的片段，更多的景色留在了腦海裡，自動美化著，又或者遺忘著，時間走得太快，來不及道別。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google 的初見面]]></title>
        <link href="http://lepture.com/zh/2014/first-sight-of-google"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-12-28T19:20:00+08:00</updated>
        <published>2014-12-28T19:20:00+08:00</published>
        <id>http://lepture.com/zh/2014/first-sight-of-google</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>我接觸互聯網的時間比較晚，認真算來應該是大學時候了。電腦倒是一早就接觸了，那時剛讀初中，城裏的堂弟帶我去網吧，第一次就呆了一晚上，只是玩玩遊戲而已。</p>
<p>一直到大學前，電腦也只是另一種形式的遊戲機。我遊戲玩得不好，不擅長操作類的遊戲，偏好於解迷，但是大家一起玩的時候，還是會跟着一起玩魔獸爭霸這一類遊戲，總是拖隊友的後腿，也不知他們私底下該怎麼埋怨我了。</p>
<p>大學時選了圖書館的一門選修課，本來的課程名字已經忘卻了，內容是講搜索的，不是搜索引擎原理這樣的理論課，是純粹應用型的，講如何高效地使用搜索引擎。從此對電腦有了新的認識。</p>
<p>講課的是一位女老師，上了一點年紀，現在想來就覺得不可思議，一般看來年輕人才容易接受新事物，講這門課的居然是年長的女老師。說是講搜索引擎的使用，其實只有講 Google 的使用，這門課也開了有幾年了，大約因爲教學不談八卦娛樂，所以不舉百度的例子吧。</p>
<p>這是我第一次聽說 Google，知道它是一個數字，是 10 的 100 次方。如果我當時知道 Geek 這個詞的話，也許禁不住會感嘆一下，「真是太 Geek 了」。那個時候它還沒有中文名，即使後來有了「谷歌」這個名字，我還是喜歡寫作 Google。當你使用 Google 這個詞的時候，感受到的是工程師文化，10 的 100 次方哦，「谷歌」太過文藝了，彷彿在慶祝豐收。</p>
<p>課程的內容現在有部分已經過時了，比如<a href="http://www.google.com/advanced_search">高級搜索</a>那個時候還在搜索框的右邊，不像現在連一個入口都沒有。當時的課程還教大家使用關鍵詞來搜索，老師講如何提煉出關鍵詞，諄諄教誨不要使用完整的一句話，使用關鍵詞更有效率，不像現在你可以搜索<a href="http://www.baidu.com/s?wd=%E8%B0%A2%E9%9C%86%E9%94%8B%E7%9A%84%E7%88%B8%E7%88%B8%E7%9A%84%E5%84%BF%E5%AD%90%E7%9A%84%E5%89%8D%E5%A6%BB">謝霆鋒的爸爸的兒子的前妻</a>。到現在我還保留着使用關鍵詞搜索的習慣。但是有一些內容我一直都不曾使用，比如使用 OR 這樣的條件詞。</p>
<p>作爲一門選修課，一門有學分的課，自然不會這樣簡單，總要講一點理論方面的內容，比如 Page Rank，總要講一點學術相關的內容，比如 Google 的學術搜索，這個是老師盛贊的服務。</p>
<p>圖書館的電腦對上網是有管控的，只能訪問教育網內容，各種郵箱服務，以及部分外部網站，而 Google 便是這少量外部網站中的一員。像 QQ 之類的娛樂性質的服務是無法訪問的。註冊 Gmail 的原因正是因爲無法使用 QQ，一同上這門課的室友發現 Gmail 裏有一個聊天功能，於是這才註冊了 Gmail，兩個人互加了好友，上課的時候偷偷聊着天。</p>
<p>後來又發現了 Google 的翻譯服務，可以輸入一個網址，Google 翻譯會把整個網頁翻譯過來。依靠 Google 的翻譯功能，我可以在圖書館裏查看那些無法打開的網頁內容，雖然原網頁是中文的，但是翻譯時還是可以選擇翻譯成中文。當時激動的心情彷彿荒漠裏突然出現了一片綠洲。</p>
<p>過了一段時間 Google 的賬戶頁面出現了已開啓的服務列表，但是它又不曾列出 Google 到底有哪些服務，從此踏上了探索 Google 服務的征程。像做遊戲一樣，努力發現與點亮每一個 Google 的服務，即使是 Orkut 這樣不會去用的服務。</p>
<p>那個時候已經有 GFW 了，可是直到大二下學期時，我才聽說它。其時它還不像現在這般喪心病狂，對生活的影響微乎其微。</p>
<p>現在 Google 完全無法訪問了，也不知道圖書館的這門課程現在還有沒有，大約可能應該沒有了吧。假使這門課程還存在的話，那要使用什麼搜索引擎呢？在課程裏教大家搜索「謝霆鋒的爸爸的兒子的前妻」似乎不太妥當吧。</p>
<p>猶記得第一堂課時，老師講我們現在是信息時代，講掌握搜索技巧的重要性。我不知道我們現在還算信息時代麼？</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[看不懂的文字]]></title>
        <link href="http://lepture.com/zh/2014/love-of-nonsense"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-11-10T18:00:00+08:00</updated>
        <published>2014-11-10T18:00:00+08:00</published>
        <id>http://lepture.com/zh/2014/love-of-nonsense</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>人們說，一切看不懂的留言都當作表白<br>
不用去想不用去猜<br>
書的扉頁正是寄託情思的所在</p>
<p>異國的風情遮掩筆者的膽怯<br>
他鄉的平凡掩飾詞藻的欠缺</p>
<p>我如果用日語，淡淡一句<br>
今天的晚霞真美<br>
可是我沒有夏目漱石的婉轉</p>
<p>我如果用法語，解構相思時的情境<br>
遠離的卻是我，留下的才是你<br>
但是我沒有羅蘭巴特的深沈</p>
<p>我如果用英語<br>
哦，親愛的如何說出口<br>
況且，這世界語，你都看得懂</p>
<p>用中文吧，寫點古體詩吧</p>
<p>可是</p>
<p>我想說的，詩經說的比我還要赤裸<br>
我想寫的，唐人寫的比我還要瑰麗</p>
<p>萬般思緒，卻無從下筆</p>
<p>最後化作筆端的只是<br>
一點看不懂的不能稱作詩歌的亂語</p>
<hr>
<p>這是「為你寫詩」的第一篇，記錄每一次的靈感。本來加過了腳注，但是想想，給自己的寫作加註釋也是蠻奇怪的。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不被重視的 HTML：Accessibility]]></title>
        <link href="http://lepture.com/zh/2014/talk-on-accessibility-jsdc2014"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-10-12T10:40:00+08:00</updated>
        <published>2014-10-12T10:40:00+08:00</published>
        <id>http://lepture.com/zh/2014/talk-on-accessibility-jsdc2014</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <ul>
<li>Slide: <a href="http://lab.lepture.com/jsdc-2014/slide.html">lab.lepture.com/jsdc-2014/slide.html</a></li>
<li>Repo: <a href="https://github.com/lepture/jsdc-2014">github.com/lepture/jsdc-2014</a></li>
</ul>
<p>大家好，我今天談一點 Web 可訪問性的話題，主要是 HTML 相關的，與 JS 的關係並不是很大。</p>
<p>（自我介紹略）</p>
<p>那我要講可訪問性，當然是因爲它很重要，比如說它有經濟價值，因爲生活中有許多某種能力缺失的人。比如說有些國家的法律規定了，你必須實現 Web 的可訪問性。但是最重要的是，做爲開發者，你本來就應該做這些事。爲什麼呢？因爲這是標準規範，你所需要的只是遵循這些標準與規範而已。</p>
<p>我們舉點現實生活中可訪問性的例子，比如捷運都有一個可容輪椅的入口，這方便殘疾人通過，比如說小便池有一個比較低，這方便小朋友。但是還有一些事情就不太如意了，比如說紅綠燈。我們看這樣一個交通燈，對紅綠色盲來說就沒有識別度了。</p>
<p>我們看看色盲這一塊，這個圖片你們能看到上面是什麼數字麼？如果你看到的不是 74 的話，那你可能就是色盲了。那這一塊呢，其實在現實生活中是做得挺差的。參見中華民國《道路交通安全規則》第六十四條，對考駕照者有一項要求，即能辨別紅、黃、綠色，也就是說紅綠色盲是不能考駕照者。這當然可以理解，但是只要我們的紅綠燈稍微改變一下，比如給紅綠燈加上形狀，那紅綠色盲者不就能識別了麼。你要知道，全世界有大約 8% 的人是紅綠色盲呢。現實挺不公平的，要改變也需要花費更多的人力與時間。</p>
<p>但是互聯網不一樣。互聯網意味着自由平等，它從一開始就是爲所有人設計的，所有人理應都能正常的使用互聯網。我們舉個好一點的例子。大家知道 Trello 吧，不知道也沒關係，它是一個項目管理工具。Trello 的個人設置裏有一個選項叫色盲友好(Color Blind Friendly)，開啓之後 label 的背景就是不純色了，比如你看這個綠色裏有斜線，這樣就不會和紅色的 label 混淆了。</p>
<p>本來講這個話題，我是挺擔心的，怕是班門弄斧了。不過用了一下臺灣的一些公共服務網站後，發現這個擔心有點多餘了。我之前以爲只有大陸的這類網站難用，原來臺灣的也一樣嘛。</p>
<p>可訪問性其實是一個很大的話題，它應該從設計之初就被重視起來，比如前面提到的 Trello 的例子，它是一個設計方面的實現。當我們談可訪問性時，不僅僅只是只視覺障礙者，也包括其它感觀有問題的人，比如說聽覺，甚至也包括所有感觀都正常的人。例如在現在的屏幕分辨率下，還有許多網站的文章正文字體大小居然是 12px，根本就看不清楚嘛，這也可以說是可訪問性差。關於閱讀性文字，我有寫一個 CSS 庫，<a href="http://lab.lepture.com/yue.css/">yue.css</a>，大家有興趣可以看看。</p>
<p>在可訪問性這一塊，我們有些官方網站確實有在做。但是他們的做法都是錯的，基本相當於形象工程。比如說人民網，這個是大陸的一個官方媒體網站。他們專門爲盲人開設了專欄，就會有語音讀內容了。還有一些政府網站也是差不多，給你專門開設一個盲人用的網站，好像獻愛心一樣。但是他們的網站其實正常人用起來都很費勁啦。</p>
<p>這種特殊對待的方案都是錯誤的做法，大家也不怎麼埋單。因爲並沒有什麼特殊的地方，Web 在設計時就已經考慮到這些問題了，也都有通用的解決方案。</p>
<p>我們講可訪問性，這個話題的內容有點多，不會在這裏細講。我們單講點與前端，與寫代碼有點關係的。雖然這件事應該從設計之初就要考慮。</p>
<p>所謂工與善其事，必先利其器。所謂知已知彼，百戰不怠。我們看看盲人上網用什麼，用讀屏軟件嘛。Mac 在這一塊做得就比較好，系統自帶的 Voice Over 挺好用的。Windows 我沒有怎麼用過，也沒聽人說用 Windows 自帶的工具，一般都是另外買的。因爲我是用 Mac 的，只需要了解一下 Voice Over 就夠了。</p>
<p>那現在有 Mac 的同學們可以看看 Voice Over 怎麼用的，Command + F5 就可以開啓了。</p>
<p>（演示 Voice Over）</p>
<p>其實 Accessibility 的實踐是件很簡單的事，並不需要花多少時間與精力，只需要做一點點小改變就可以提高不少。</p>
<p>那我們舉個很簡單的例子。許多網站都有用 icon font 來做圖標，很流行哦，看起來都很不錯的樣子。可是許多時候就忽略了可訪問性了。比如有的圖標，你根本就猜不出來它是什麼意思，這對視力正常的人來說都沒有可訪問性，你需要加個 tooltip 之類的來解釋一下。那我這裏的這個例子是一個齒輪圖標，大家都知道它是 settings 的意思啦，那對視力正常的人來說還好，但是假如你看不見的話，你根本就不知道它是個什麼東西。</p>
<p>那我們給這個圖標一個很簡單的屬性（attribute）aria-label=“Settings”，我們來看看 demo。</p>
<p>（使用 Voice Over 演示一下兩者的區別）</p>
<p>上面這個例子是不是很簡單？我們現在就可以開始做出改變了。比如零時政府不是有一個萌典網站麼，我們看看萌典的網站，上面不是有很多 icon font 麼，大家可以給它加上 aria-label。</p>
<p>我們再舉一個簡單的例子，Landmarks。</p>
<p>這個也是個挺簡單的東西，內容也不多，就這麼幾個（見 slide），但是作用卻很大，使用 Voice Over 可以方便的跳轉。那我們來看一個例子，其實就是給相應的 block element 標上相應的 role 就好了。我們先看一下 Voice Over 的設置，需要它支持 Landmarks，把這個勾上就好了。那我們看這個 demo，我們開啓 Voice Over，Command + F5，然後用 Web Rotor 快速定位 landmarks，VO + U，也就是 Control + Option + U，那如果沒有出現 Landmarks 的選項的話，就按一下左右鍵。那這個時候就可以很方便的定位了，比如你看一篇文章，那就是在 main 區域裏，那你要跳轉頁面的話，就跳到 navigation 裏去咯。</p>
<p>我們再演示一個 aria live region 的例子。我們看這個 demo，只需要打開 Voice Over 就好了，它會自己提示你有新訊息。如果沒有效果的話，檢查一下 Voice Over，看看是否打開了 live region 的支持。這個功能在 Twitter 的信息流裏有用到哦。</p>
<p>但是要真的做好可訪問性，又是一件很困難的事。它的困難主要還是在複雜度上面，你需要考慮的東西太多了。那這裏舉一個 UI widget 方面的例子，tablist。我們簡單看一下它的 HTML 結構，這裏使用的 attributes 就多很多了，我們看到有 role，有 aria-selected，aria-controls 之類的。看起來會比較複雜。同時我們還要考慮正常的視覺效果，這裏有個小 tricks，我們把 aria-hidden=true 設置爲 display none，這樣讀屏軟體讀不到，視覺上也會看不到。</p>
<p>（演示 tablist demo）</p>
<p>那這樣一個小的 UI widget 看起來就有點麻煩了，那想想整個網站，是不是會更無從下手呢。</p>
<p>除了複雜以外，還有一些歷史問題。比如說這個 aria-required 與 required。aria-required 是給讀屏軟體用的，required 是 HTML5 新加的特性。那我們應該用什麼呢！放在今天來看的就，當然是用 required 就可以了。這裏就會有一個可訪問性上的 attributes 與 HTML5 的重複，我會激進一點，傾向於只用 HTML5 的部分，其實大多數瀏覽器已經支持得挺好了。那我們來看一下 aria required 的 demo。</p>
<p>(演示 aria-required demo）</p>
<p>那你還可能需要考慮一下 keyboard binding，就是鍵盤快捷鍵。有些需要滑鼠操作的才能工作的地方，你可能就需要設計一些 key binding 来幫助别人使用。那對於盲人來說呢，使用鍵盤是比使用滑鼠要方便多了的。</p>
<p>然後還有驗證碼，就是你註冊時經常會出現的那個東西。比如這個，這個是支付寶登錄時的驗證碼，它是個扭曲的字符，K8WM，我們也許看得清楚，但是如果看不到的話，那怎麼處理呢。這是我聽說的，據說有一個 QQ 羣，你把圖片 copy 一下，發到羣裏，然後會有視力正常的人告訴你這是個什麼東西，挺麻煩的吧。但是在臺灣就不用這麼麻煩了，你們知道 reCaptcha 這個項目吧，現在是 Google 的了。我們看一下 reCaptcha，它不僅有圖片，還是聲音驗證碼，就是這裏，你點這個地方就會有語音，那這樣看不到的人就可以用聽的了。這個服務挺方便的，但是在大陸就用不成，因爲被牆了嘛。但是臺灣沒有呀，如果大家自己有做網站，需要用到驗證碼的話，就儘量使用 reCaptcha，也比你自己寫一套 Captcha 要方便。</p>
<p>那我說到提升可訪問性是件很簡單的事，也是件很困難的事。做一點點改變是很簡單的，比如之前說的給 icon font 加上 aria-label，真的挺簡單的。可是你要一口氣做得很完美的話，那幾乎就不可能了。我們一點一點改變，慢慢來，總是好的。不積跬步無以至千裏嘛。</p>
<p>同時它也能幫你更好的組織整理你的 HTML 結構，能幫助搜索引擎更好的索引。它對你寫 HTML 有一定的指導意義。（略）</p>
<p>最重要的還是我們開發者，身爲開發者應該有的驕傲。我們有能力去實現這些標準，那我們就會做咯，這是基本的職業素養。下面這些鏈接都是不錯的資源，大家可以都看看。</p>
<p>謝謝。那我就講完了。</p>
<p>哦。 One more thing，這個 slide 本身也是 accessible 的。</p>
<p>（演示 slide 的可訪問性）</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python on A Hard Wheel]]></title>
        <link href="http://lepture.com/en/2014/python-on-a-hard-wheel"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-08-19T16:00:00+08:00</updated>
        <published>2014-08-19T16:00:00+08:00</published>
        <id>http://lepture.com/en/2014/python-on-a-hard-wheel</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>Wheel is a distribution file format for Python, which was introduced a few
years ago with <a href="http://legacy.python.org/dev/peps/pep-0427/">PEP427</a>. In
case you have no knowledge about wheel, you should read the PEP. If you are
a fan of Armin Ronacher, you might like to read <a href="http://lucumr.pocoo.org/2014/1/27/python-on-wheels/">Python on Wheels</a>.</p>
<p>The wheel format is designed as a binary package format. I had never tried
<code>bdist_rpm</code>, because I don't use Red Hat based systems. I had never tried
eggs, which I believe belongs to the old world. Actually, I had never tried
to upload any binary package to PyPI. When I publish a libary, I publish it
as a source package.</p>
<p>I had <a href="https://github.com/lepture/mistune/issues/3">a try on wheel</a> recently.
It wasn't a pleasant experience. It takes me too much time to create the
powerful format for a binary library:</p>
<pre><code>macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.whl
</code></pre>
<p>If you take a look at <a href="https://pypi.python.org/pypi/Cython">Cython PyPI</a>,
you would find the wheels end with this format. But you can't simply build
the wheel yourself.</p>
<hr>
<p>PyPI currently only allows uploading platform-specific wheels for Windows
and Mac OS X. Linux is not included. But it is still useful to create
wheels for these platforms, better than nothing.</p>
<p>For pure Python, a wheel would be something like:</p>
<pre><code class="lang-bash"># python setup.py bdist_wheel --universal
mistune-0.4-py2.py3-none-any.whl
</code></pre>
<p>Building wheels for pure Python is easy. Building binary wheels for all Mac
OSX is not. At the very first, I created wheels for <a href="https://github.com/lepture/mistune">mistune</a>:</p>
<pre><code>mistune-0.4-cp27-none-macosx_10_4_x86_64.whl
</code></pre>
<p>It is good. But I've seen the wheel for Cython, Pandas and Numpy. They all
end with the complex filename. WTF. Did I miss something? The PEP describes
the file name format as:</p>
<pre><code>{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl
</code></pre>
<p>The different ending is platform tag:</p>
<ol>
<li><code>mistune</code> is the distribution name</li>
<li><code>0.4</code> is package version</li>
<li><code>cp27</code> is python tag</li>
<li><code>none</code> is ABI tag</li>
<li><code>macosx_10_4_x86_64</code> is platform tag</li>
</ol>
<p>I've read the source code of <code>bdist_wheel.py</code>, it turned out that the platform tag
was generated by <code>distutils.util.get_platform()</code>. Why is my platform tag <code>macosx_10_4_x86_64</code>?
Why can't I build a <code>macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.whl</code>?
I've googled a lot. The result was not good enough. After all, I've found what I need,
<a href="https://github.com/MacPython/wiki/wiki/Spinning-wheels">Spinning wheels</a>. In this
very wiki, I've learnt the popular Pythons and their platform tags.</p>
<table>
<thead><tr>
<th>Python source</th>
<th>Python version</th>
<th>OSX version</th>
<th><code>get_platform()</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>Python.org</td>
<td>2.7</td>
<td>10.9</td>
<td>macosx-10.6-intel</td>
</tr>
<tr>
<td>System Python</td>
<td>2.7</td>
<td>10.9</td>
<td>macosx-10.9-intel</td>
</tr>
<tr>
<td>Macports</td>
<td>2.7</td>
<td>10.9</td>
<td>macosx-10.9-x86_64</td>
</tr>
<tr>
<td>Homebrew</td>
<td>2.7</td>
<td>10.9</td>
<td>macosx-10.9-x86_64</td>
</tr>
<tr>
<td>Python.org</td>
<td>3.4</td>
<td>10.9</td>
<td>macosx-10.6-intel</td>
</tr>
<tr>
<td>Python.org</td>
<td>2.7</td>
<td>10.7</td>
<td>macosx-10.6-intel</td>
</tr>
<tr>
<td>System Python</td>
<td>2.7</td>
<td>10.7</td>
<td>macosx-10.7-intel</td>
</tr>
</tbody>
</table>
<p>My platform tag is not in the table, because I was using the Python created by
<a href="https://github.com/yyuu/pyenv">pyenv</a>. When I tried the System Python, the
wheel turned out:</p>
<pre><code>mistune-0.4-cp27-none-macosx_10_9_intel.whl
</code></pre>
<p>In the wiki of <a href="https://github.com/MacPython/wiki/wiki/Spinning-wheels">Spinning wheels</a>,
I've learnt the very important idea, a <code>macosx_10_6_intel</code> would be compatible
with <code>macosx_10_9_intel</code> and <code>macosx_10_9_x86_64</code>. In this case, you can simply
rename the filename from <code>macosx_10_6_intel</code> to:</p>
<pre><code>macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64
</code></pre>
<blockquote><p>Because having a fat binary includes having x86_64, so is compatible with
x86_64-only builds. Stuff compiled with the 10.6 SDK should also be
compatible with stuff built against later SDK versions
(up to and including 10.9). </p>
</blockquote><p>In the wiki <a href="https://github.com/MacPython/wiki/wiki/Wheel-building">MacPython OSX wheel building</a>,
a Travis CI approach is teached to you. You can build the idea wheel with
Travis CI, which is exactly the way <a href="https://github.com/MacPython/pandas-wheels">pandas</a>
and <a href="https://github.com/MacPython/numpy-wheels">numpy</a> are using.</p>
<hr>
<p>But what if I want to build the wheels on my own machine? All I need is a
Python with platform <code>macosx_10_6_intel</code>. But why did pyenv create the python
with platform tag <code>macosx_10_4_x86_64</code>?</p>
<p>The source code of pythonz tells me that <code>macosx_10_4</code> is defined by environ
variable <code>MACOSX_DEPLOYMENT_TARGET</code>, and <code>intel</code> can be created by configure
options <code>--enable-universalsdk=/ --with-universal-archs=intel</code> when building
Python. Since I've switched to pyenv, it would be done with the shell profile:</p>
<pre><code class="lang-bash"># bash and zsh
export MACOSX_DEPLOYMENT_TARGET=&quot;10.6&quot;
export PYTHON_CONFIGURE_OPTS=&quot;--enable-universalsdk=/ --with-universal-archs=intel&quot;
</code></pre>
<p>Installing python with pyenv:</p>
<pre><code>$ pyenv install 2.7.8
</code></pre>
<p>The compiled python would be <code>macosx_10_6_intel</code> now. Check the platform tag:</p>
<pre><code class="lang-python">&gt;&gt;&gt; import distutils.util
&gt;&gt;&gt; print(distutils.util.get_platform())
macosx-10.6-intel
</code></pre>
<p>You can install as many pythons as you like, such as 3.3.5 and 3.4.1, so that
you can create wheels for Python 3.3 and Python 3.4.</p>
<hr>
<p>The final patch for <code>setup.py</code> would make it easy to create powerful Mac
wheels:</p>
<pre><code class="lang-python">try:
    from wheel.bdist_wheel import bdist_wheel

    class _bdist_wheel(bdist_wheel):
        def get_tag(self):
            tag = bdist_wheel.get_tag(self)
            repl = &#39;macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64&#39;
            if tag[2] == &#39;macosx_10_6_intel&#39;:
                tag = (tag[0], tag[1], repl)
            return tag

    cmdclass = {&#39;bdist_wheel&#39;: _bdist_wheel}
except ImportError:
    cmdclass = {}

setup(
    # ...
    cmdclass=cmdclass,
    # ...
)
</code></pre>
<p>I would suggest that you use this patch for binary wheel. A simple renaming
is not as good as this one patch. This patch would change the platform tag,
and write the information to the wheel meta:</p>
<pre><code># file: mistune-0.4.dist-info/WHEEL
Wheel-Version: 1.0
Generator: bdist_wheel (0.24.0)
Root-Is-Purelib: false
Tag: cp27-none-macosx_10_6_intel
Tag: cp27-none-macosx_10_9_intel
Tag: cp27-none-macosx_10_9_x86_64
</code></pre>
<p>But a simple renaming would not add those tags to wheel meta. If you dare
have a look at pandas wheel meta:</p>
<pre><code># file: pandas-0.14.1.dist-info/WHEEL
Wheel-Version: 1.0
Generator: bdist_wheel (0.24.0)
Root-Is-Purelib: false
Tag: cp27-none-macosx_10_6_intel
</code></pre>
<p>It has no tag for <code>macosx_10_9_intel</code> and <code>macosx_10_9_x86_64</code>.</p>
<p>This is how I created <a href="https://pypi.python.org/pypi/mistune">wheels for mistune</a>.
I'd try windows later (or never).</p>
<pre><code class="lang-bash">$ python setup.py bdist_wheel upload
</code></pre>
<hr>
<p>Update: I am using Travis CI to build wheels for mistune now. It will upload
the wheels to GitHub releases.</p>
<p>Checkout <a href="https://github.com/lepture/python-wheels">github.com/lepture/python-wheels</a>.</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[別樣經歷搭車記]]></title>
        <link href="http://lepture.com/zh/2014/unexpected-journey-with-lift"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-05-28T02:35:00+08:00</updated>
        <published>2014-05-28T02:35:00+08:00</published>
        <id>http://lepture.com/zh/2014/unexpected-journey-with-lift</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>我與阿國是在西寧相遇的。</p>
<p>清晨的時候，出門去吃早點，正踫着他尋過來。他那時一身暗橘色右衽上衣，下面是尼泊爾掉襠大褲，背一個超大型黑色雨罩登山包，攔腰抱了個鼓，走過來問我客棧在哪裏。</p>
<p>我向後指了指：「走到底，那個上面有很多彩旗的就是。」其實不是彩旗，是經幡，紅的綠的黃的藍的。</p>
<p>早飯後我們昨天相約的一行人便包車去青海湖遊玩了，第二次再見時是兩天後。未曾料到接下來的旅程將會一路相伴。</p>
<p>回來西寧的晚上，他在用客棧的電腦查路線或者攻略。客棧電腦在茶室邊上，我沒有太在意，和茶室裏的其他人在聊天。有一個姑娘會彈吉他，拿了老闆的琴，彈幾首民謠，大家一起隨意唱唱。</p>
<figure><img src="//dn-lepture.qbox.me/blog/yalaso-girl.jpg/thumbnail" alt="在客棧拍照" /><figcaption>在客棧拍照，後面的男生真討厭</figcaption></figure><p>晚上睡覺的時候聊起明天的行程，我們同去張掖，這便開始了我的搭車經歷。</p>
<hr>
<p>我知道很多搭車出行的故事，可是自己卻不曾搭過，一路上汽車包車列車飛機地走過來的。阿國卻是從拉薩一路搭車到西寧的，頗有點經驗。</p>
<p>清早時分坐公交車去中心廣場，轉乘城際公交車去大通縣，而後在大通縣再轉公交去鄉下，到良教鄉下車，一邊走一邊等過往的車輛。遇到有車駛過便伸出手，握個拳，豎起大拇指，彷彿「你好棒」的樣子，這是搭車常用手勢。</p>
<p>阿國說要到鄉下地方才好搭到車，城裏是不會有人搭你的。這當然是經驗之談。</p>
<p>這一趟搭車算是比較順利，雖然一輛輛的車駛過，完全不理會我們，可是車流量大，終於有一輛轎車停下來了。這個地方是阿國選的，正好是去往張掖的唯一一條國道，車流量較大，更容易搭到車。搭車是個概率事件，需要更大的數據來支撐。</p>
<p>司機大哥說他在拉薩載過許多搭車的人，但是他不到張掖，只能載了我們十多公里，到三叉路口放我們下車，他要去往另一方向。我們沿去張掖的國道走走停停，不一時又搭上了一輛去張掖的大卡車，紅色外皮的空車，師傅要去張掖運貨。這種大卡車我還是第一次坐，人長得矮，幾乎都爬不上去，坐在卡車上，俯視前方，頗有點君臨天下的意思。</p>
<p>去往張掖的路上，蜿蜒崎嶇的山路，上上下下，時而飛雪，時而細雨，時而又是豔陽。一路上天氣變化多端，飛雪多是在山上，細雨與殘陽也許是在山腰也許是在山底。有一處山頂積雪不夠厚實，於白色之間雜了一條條土紅，斑馬紋路似的，頗像原始部落裏的紋身。可惜隔了車窗玻璃，又不能停下來選取合適的角度，拍不了相片。</p>
<p>在嘉峪關搭車更是順利，一到高速路口便搭到了一輛。</p>
<p>他們青年小夥去新疆做通訊網絡，好像是軍方的項目，不方便多說，一車的各種儀器。開車小哥以前是騎行的，也常常在外面遊玩，特別熱心。我們剛下公交車，到高速路口，他正好經過就停下車，問我們去哪裏。其時後座亦堆滿了儀器，他們便下車，摞了一部分到後備箱。</p>
<p>車行一半，在高速路上遇到了拋錨的車，似乎沒油了，他們也主動停下車，施以援手，載他們司機到下一個加油站。</p>
<p>我們在瓜州下車，橫穿高速公路，翻越到國道，繼續搭車到敦煌。高速路下有一片地，龜裂的地表，稀稀疏疏生幾叢草。我們沿國道往敦煌方向走，不久便又搭到車。師傅是四川綿陽人，在敦煌這邊的中石油上班。聊起來，他也在川藏線上載過搭車的人。</p>
<p>他對敦煌是有點意見的，有一點我也深表認同，敦煌估計是全國唯一一個在火車站與城市之間修收費站的，就是火車站前一點點。如果你要送人去火車站，還不得不過一趟收費站，真是收錢收瘋了。</p>
<p>細細想來，一路上施以援手的多是之前已經搭過他人的。因爲有過經歷，更能接受一些。</p>
<p>當然也有不順利的時候。比如在張掖搭車去敦煌，在高速路口處攔車。車流量偏少，一輛輛駛過去，沒有停下來的意思。等了許久也不曾搭到，最好的時候是停下來告訴我們沒有地方坐了。</p>
<p>高速入口處有一欄大廣告牌，我等得不耐煩了，便坐在陰涼處，拿了 Kindle 看《The Kite Runner》，這是第二遍閱讀了，看 Amir 到 Kabul 找 Sohrab，看 Amir 與 Assef 的對峙，看 Sohrab 射瞎了 Assef 的眼睛，完成了乃父的豪言。</p>
<p>阿國也席地而坐，豎起他的尼泊爾鼓，敲打着節拍，唱《藍蓮花》。</p>
<p>後來終於搭到了一輛去高臺的貨車，而高臺交通情況更糟糕，幾乎不可能搭到車。看看時間，只能買了火車票去嘉峪關。</p>
<p>於我而言搭車過於浪費時間，經濟上考慮並不合算。可是畢竟是另一番經歷，是另一番體驗。敦煌相別後，我便又迴歸正軌，開始了列車之旅。</p>
<p>與阿國一起的旅途還有其它別樣的經歷，留待下回再敘。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[冰與火之歌寧夏記]]></title>
        <link href="http://lepture.com/zh/2014/a-trip-in-ningxia"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-05-15T00:56:00+08:00</updated>
        <published>2014-05-15T00:56:00+08:00</published>
        <id>http://lepture.com/zh/2014/a-trip-in-ningxia</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>我未曾想過要帶厚一點的衣服出門。深圳的春天陽光和煦，西南也是一片明媚，後來輾轉成都北京，又是怡人天氣。畢竟入夏了嘛。也不知是幸運還是不幸，在這五月天裏竟然遇到落雪。倒是賞心美景，只嫌衣着單薄。</p>
<p>早晨的時候，銀川還有幾點陽光。從客棧出發，乘公車轉遊二線去賀蘭山觀岩畫。但是一直等不到遊二線公車，正巧有輛包車經過，問我去哪裏，便捎上了我。同車的四位要去蘇峪口，我便修改了行程，隨他們去蘇峪口國家森林公園了。</p>
<p>蘇峪口這邊的山也是賀蘭山脈的一部分，與昨日見到的賀蘭山不同，蘇峪口的山披了綠，全然沒有荒涼之感。</p>
<p>我們一行人買過票，乘景區公車進去，到松濤山莊下車。第一站是崖壁棧道，崖壁者名不虛實，整個棧道由鋼筋水泥澆築於山壁之上，據聞全長五千兩百米，隨山脈蜿蜒盤旋，可惜最頂處封鎖着，不讓上去。</p>
<p>走在棧道上，一級級階梯時而平緩時而陡峭。行不多時，忽然有幾點冰粒打到臉上，涼颼颼的，隨階梯而上，不一時便見着稀稀落落下着的霰雪了。他們有三人不太想往上爬了，半山涼亭處便停下來了，只留我與另一人繼續登高。山風瑟瑟，越往上爬雪籽下得越大，而遊客紛紛留照合影，只怕也拍不出什麼風景。</p>
<p>岩壁上偶爾點綴的幾朵白色小花，黃色花蕊，綠葉襯托，旁邊是破壁而出的幾株小松，還有石上落着的霰雪冰粒。這樣的小景被多數遊客忽略了，這許多的小驚喜卻給我的登山憑添了幾分樂趣。</p>
<figure><img src="//dn-lepture.qbox.me/blog/suyukou-little-flowers.jpg/thumbnail" alt="岩壁上的幾朵小花" /><figcaption>岩壁上偶爾點綴的幾朵白色小花</figcaption></figure><p>可惜最頂端的棧道一直不曾開放，我們到開放路段的最頂處時，正好開始封山。隨手拍拍雪景，拍松針上的落雪，可惜效果並不太好。</p>
<p>下棧道後，霰雪便停了。我們隨後匯合，又去登青松嶺，到半山時又開始下雪。這一次便不是雪籽了，已經化作了雪花。到得青松嶺正是雪花極盛之時，成片成片地在風中飛舞。只恨自己攝影技術太爛，只恨自己攝影器材普通，拍不了此情此景。隨手拍拍，昏暗的畫面裏幾個白點，實在不像話。也只是隨手拍拍，手便冰冷了，大家都不曾料到，單薄的兩件衣服，直凍得哆嗦。</p>
<p>青松嶺邊上有一處號爲天下第一橋，懸在兩山之間，在這風雪中飄搖。</p>
<p>從青松嶺下山，走另一邊的櫻桃谷，看漫山櫻花，看雪花飛舞，才覺得此番沒有白來。石階兩邊櫻花盛開，正是雪色花瓣，透露幾筆粉嫩。谷裏風亂，雪花橫飛，甚至時而斜上，往高空飛去。櫻白，雪白，漫山飛舞的白。<a href="http://fz0512.com/">傅真</a>寫博客說有些景色無法描述，需要照片來述說。可是還有一些景色需要親自體驗，它是動態的，相片的靜態無法體現出它的美。也許只是我無法拍出來。</p>
<figure><img src="//dn-lepture.qbox.me/blog/suyukou-sakura.jpg/thumbnail" alt="櫻桃谷漫山櫻花" /><figcaption>櫻桃谷漫山櫻花</figcaption></figure><p>讀書的時候，到櫻花盛開時，風聞武大櫻花之名的遊客紛紛趕過來，直把校園擠得水泄不通，那時沒有賞櫻的興致。而此刻，在武大櫻花早已謝去時，在這西北，在這雪中，觀賞雪花點綴着的櫻花，頓覺心曠神怡。</p>
<figure><img src="//dn-lepture.qbox.me/blog/suyukou-snow-sakura.jpg/thumbnail" alt="櫻花與雪花" /><figcaption>雪花點綴着的櫻花</figcaption></figure><p>櫻桃谷又是一段長路，上坡下坡，走了許久終於出得山來，正好在公路上遇到回程的大巴。這一路，也不知走過了多少級階梯，怕是不下萬級吧。此番蘇峪口之旅便是寧夏的冰之歌。</p>
<hr>
<p>寧夏素有塞上江南的美稱，載我們去沙坡頭的司機道：「天下黃河富寧夏首富中衛。」此言確實不虛。假使氣候不這麼乾燥，以中衛的植被面積，中衛的水流湖泊，你也會誤以爲自己身處江南。</p>
<p>但是我們要去的沙坡頭卻是一片沙漠，旁邊是黃河。剛到銀川的第一天，去沙湖遊玩，也是一片沙漠，而另一邊卻是湖水。沙漠的光景相仿，遊玩項目亦相仿，沙湖是一個人去的，不比沙坡頭多人一起有趣。</p>
<figure><img src="//dn-lepture.qbox.me/blog/shahu-birds-island.jpg/thumbnail" alt="沙湖鳥島鳥籠" /><figcaption>沙湖鳥島鳥籠看起來倒是挺有特色的</figcaption></figure><p>湖南衛視有一個節目叫作「爸爸去哪兒」，有一集便是在沙坡頭拍攝的，中衛各處廣告牌便是「爸爸去哪兒，就去沙坡頭」。我們四人在客棧相約，結伴包車去沙坡頭。客棧是中衛唯一的國際青年旅舍（申請中），叫中衛西北偏北國際青年旅舍，離火車站非常近，老闆是同齡的四川妹子，名字卻顯得男生，喚作陳浩蘭。前一天晚上到客棧時，有早住的陳利嫻姑娘相約明日一起去沙坡頭。</p>
<p>黃河之水略嫌髒了點，景區遊玩，順流而上，見到沙漠時是一處陡坡沙丘。嫻姑娘說需要兩小時，也太誇張了點，我們脫了鞋爬沙丘，不過二十分鐘，只有金霞姑娘拖了後腿。到沙丘之上，遠觀黃河，觀黃河至彎處，沙漠，綠林，河水，黃綠黃的夾層。在沙丘上拍照，一二三跳，腳向外張開，相機連拍，留下空中佇留瞬間。</p>
<figure><img src="//dn-lepture.qbox.me/blog/shapotou-desert-camels.jpg/thumbnail" alt="沙漠中的駝隊" /><figcaption>沙漠中的駝隊</figcaption></figure><p>沙漠多娛樂項目，滑沙，滑草，滑索，駱駝，摩托，越野等等，可惜只騎過了駱駝。可是卻做過了一少有人做的事，深入沙漠一小時。嫻姑娘玩笑，說穿越沙漠去通湖草原吃烤全羊。一路說笑，打鬧遊玩，拍拍照。中途遇到一位返程的小哥，遠遠的在另一條道上，一人行於藍天與黃沙之間，彷彿天下只剩一人，荒涼的孤獨。</p>
<figure><img src="//dn-lepture.qbox.me/blog/shapotou-loneliness.jpg/thumbnail" alt="沙漠中的小哥" /><figcaption>沙漠中孤獨的小哥</figcaption></figure><p>最讓人欣喜的是這沙漠中偶爾冒出的幾點小草，不比花棒之類的樹，看起來那麼脆弱的生命也頑強地生存着。烈日炎炎，沙粒燙腳，在這樣的環境裏頑強地生存着。還有沙漠裏的小甲蟲，頂一弧黑色甲殼，歡快地在沙中奔爬着，也不知道有什麼食物可吃的。</p>
<figure><img src="//dn-lepture.qbox.me/blog/shapotou-desert-grass.jpg/thumbnail" alt="沙漠中的小草" /><figcaption>沙漠中的小草</figcaption></figure><figure><img src="//dn-lepture.qbox.me/blog/shapotou-desert-tree.jpg/thumbnail" alt="沙漠中的花棒樹" /><figcaption>沙漠中的花棒樹</figcaption></figure><p>最讓人興奮的卻是滚沙坡，看嫻姑娘放過「滚沙漠」的視頻後，我便時刻惦記着，想體驗一下。終於在沙漠深處尋了一處緩坡，只有我與嫻姑娘兩人，小羅與金霞都沒有興趣。</p>
<p>我們取下眼鏡，橫躺於沙丘之上，雙手抱頭，稍一使力，打個圈，沿了沙坡就勢滾下，一圈兩圈三圈四圈，頭腦便隨了這滾圈發暈起來，天旋地轉，到受不了了時再使點力阻攔滾落的勢頭，稍微又滾了兩圈才肯定住。這個時候是萬萬站不起來的，只覺得腦海裏有一片天，一直不停旋轉旋轉旋轉。我們便躺在沙上，等候身體恢復。</p>
<figure><img src="//dn-lepture.qbox.me/blog/shapotou-we-are-here.jpg/thumbnail" alt="沙漠中合影" /><figcaption>沙漠中合影</figcaption></figure><p>一路說笑，打鬧遊玩，拍拍照，也不知行了多遠，不知有幾分之幾了，看看時間略嫌晚了，於是返程。在這返程途中，用相機定時拍照，留下了唯一的四人合影。沙坡頭之旅便喚作寧夏的火之歌。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[適合閱讀的中文字體]]></title>
        <link href="http://lepture.com/zh/2014/chinese-fonts-and-yue-css"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-05-09T15:35:00+08:00</updated>
        <published>2014-05-09T15:35:00+08:00</published>
        <id>http://lepture.com/zh/2014/chinese-fonts-and-yue-css</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>我時常更新自己的博客程序，也時常更新自己的博客主題。偏右言：「世上有兩種前端工程師，寫博客的，和寫博客的。」我之謂也。我的博客主題一直保持着簡潔的樣式，保持着我認爲適合閱讀的文字排版。</p>
<p>中文閱讀上，我以爲最大的問題便是字體。不像英文，使用 Web Fonts 的代價相當低廉，中文因爲文字量大的原因，整個字體文件偏大，暫不適合使用 Web Fonts。在這樣的情形下，我們只能儘量利用作業系統自身的字體了。</p>
<h2>Mac</h2>
<p>Mac 上默認的中文字體是華文黑體（STHeiti）與華文宋體，我個人認爲質量是不錯的。紙質書的印刷，普遍使用的是宋體，然而在現在的顯示器上，宋體的表現並不令人滿意。</p>
<p>宋體的結構相比於黑體要複雜許多，比如橫線起筆處微小的回鉤，橫豎撇捺點鉤都沒有那麼簡單。這些細膩的處理在現在的顯示器上都無法完美地體現，也許等到 Retina 普及後，宋體才能重拾其在紙質書的光輝。</p>
<p>而黑體則不一樣，結構簡潔，形體勻稱，合適在顯示器上閱讀。所以目前我的選擇是黑體。Mac 上還有一款讚譽頗多的黑體，冬青黑體（Hiragino Sans GB）。</p>
<figure><img src="//dn-lepture.qbox.me/blog/18px-mac-stheiti.png" alt="華文黑體" /><figcaption>Mac 上 18px 的華文黑體</figcaption></figure><figure><img src="//dn-lepture.qbox.me/blog/18px-mac-hiragino.png" alt="冬青黑體" /><figcaption>Mac 上 18px 的冬青黑體</figcaption></figure><p>我個人以爲兩者都還不錯，冬青黑體整體看來更爲飽滿，偏扁平，而華文黑體則偏瘦一點，比如你看兩者的「口」字。我個人隨大流，選擇了讚譽頗多的冬青黑體。</p>
<h2>Windows</h2>
<p>因爲我個人一直使用的是 Mac，對視窗系統沒有太多了解，只知道中易宋體與微軟雅黑。所以只能對這兩者做對比。</p>
<figure><img src="//dn-lepture.qbox.me/blog/18px-win-yahei.png" alt="微軟雅黑" /><figcaption>Windows 上 18px 的微軟雅黑</figcaption></figure><p>也許只是個人原因，微軟雅黑看起來不夠圓潤，甚至有鋸齒感。當然，這與 Windows 的字體渲染有關，非微軟雅黑字體之過。但是也有人覺得 Windows 上的微軟雅黑比 Mac 上的冬青黑體更好，嫌棄 Mac 的字體渲染太模糊。我個人認爲 16px 的中易宋體在 Windows 上是更好的選擇。</p>
<figure><img src="//dn-lepture.qbox.me/blog/16px-win-simsun.png" alt="中易宋體" /><figcaption>Windows 上 16px 的中易宋體</figcaption></figure><p>Windows 的字體渲染偏銳利，微軟雅黑的顯示就有點尷尬，但是中易宋體是點陣字體，正好利用到了 Windows 的字體渲染優勢。我們看到中易宋體的內容非常清晰悅目。</p>
<figure><img src="//dn-lepture.qbox.me/blog/18px-win-simsun.png" alt="中易宋體" /><figcaption>Windows 上 18px 的中易宋體</figcaption></figure><p>但是受限於點陣字體，一旦到 18px 時，渲染效果就沒法看了。所以使用中易宋體時就必須保證字體大小在 18px 以下。</p>
<p>那麼，在 Windows 上，我的選擇是 16px 的中易宋體。但是我並非實際使用者，有 Windows 使用者反饋說微軟雅黑挺好的。還是希望能有更多的 Windows 使用者的反饋。</p>
<h2>Linux</h2>
<p>在使用 Mac 之前，我一直使用的是 Ubuntu，所有的經驗也都停留在那一時期。也不知道過了這許多年，Linux 上的字體渲染發展得如何了。</p>
<p>Linux 上我的選擇是 18px 的 <del>文泉驛微米黑</del> Droid Sans Fallback。因爲 Linux 用戶自己喜歡折騰，我的選擇也許無關痛癢。</p>
<h2>The Code</h2>
<p>這些經驗最終彙集到了 <a href="https://github.com/lepture/yue.css">yue.css</a> 這個樣式庫。尤其是對 Windows 的處理，反反覆覆，時而會把微軟雅黑添加進來，時而又移出。到寫作此文時，字體樣式便成了：</p>
<pre><code class="lang-css">.yue {
  font: 400 18px/1.62 &quot;Georgia&quot;, &quot;Xin Gothic&quot;, &quot;Hiragino Sans GB&quot;, &quot;Droid Sans Fallback&quot;, &quot;Microsoft YaHei&quot;, sans-serif;
}
.windows .yue {
  font-size: 16px;
  font-family: &quot;Georgia&quot;, &quot;SimSun&quot;, sans-serif;
}
</code></pre>
<p>Windows 使用 16px 是爲了兼容 Windows XP。在 XP 上，沒有微軟雅黑只有中易宋體，在這種情況下會 Fallback 到中易宋體，而 18px 會導致字體變形。你可能需要一句 JavaScript 來添加 <code>.windows</code> 的 class：</p>
<pre><code class="lang-javascript">if(/windows/i.test(navigator.userAgent)){
  document.getElementsByTagName(&#39;html&#39;)[0].className += &#39; windows&#39;
}
</code></pre>
<p>至於 16px，我個人以爲偏小。但是還有許多網站在使用 14px，甚至於還有 12px 的。以現在顯示器的分辨率，14px 的文字閱讀起來就有點吃力了。當然，也有可能我高估了高分屏的普及率了。</p>
<h2>Criticism</h2>
<ol>
<li>豆瓣的日誌影評書評等內容皆是 12px 的，必須點名批評一下。現在已經是 2014 年了，這個字體大小真的看起來很累。</li>
<li>知乎的內容是 13px 的，比起 12px 也好不了多少。不過專欄字體大小有 16px 了，還算不錯。</li>
<li>簡書用 18px 的宋體，這個在 Windows 下是沒有辦法忍受的。但是最不能忍受的還是楷體的標題。</li>
</ol>
<h2>yue.css</h2>
<p>對於文字排版，我並沒有專業的素養。愚之所言，不過個人經驗罷了。最後這些經驗彙集成了樣式集 <a href="https://github.com/lepture/yue.css">yue.css</a>。</p>
<p>yue.css 不是一個樣式重置(reset)，不會影響到其它標籤的樣式。你所需要的只是給內容區域加上 <code>.yue</code> 的 class。簡潔實用，目前用於我的博客，<a href="https://yuehu.io/">閱乎</a>，當然還有別的朋友在用。</p>
<p>如果你對文字排版有興趣，可以使用 yue.css。如果你對 yue.css 有意見，也歡迎反饋給我。</p>
<hr>
<p>注：本文只關注字體，稍微關注大小，但是賞心的文字排版還包括行高顏色等。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[沒有時間的大理]]></title>
        <link href="http://lepture.com/zh/2014/wander-in-dali"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-04-29T19:26:00+08:00</updated>
        <published>2014-04-29T19:26:00+08:00</published>
        <id>http://lepture.com/zh/2014/wander-in-dali</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>大理古城閒步時，偶爾與人搭話，被問及「何時來大理」又「打算呆多久」時，我總是輕描一句「忘記了」又或者「不知道」。假使不刻意去想想的話，還真無法可知。譬如我是什麼時候離開昆明的，如果沒有 <a href="/zh/2014/a-trip-in-kunming">昆明的遊記</a> 在這裏，也許是真的想不起來了。</p>
<p>在大理，時間是一件挺無關緊要的事物，只在這催人前行催人寫下一篇遊記的時刻才顯得實實在在。更多的時候，時間被人遺忘，留下的是如畫風景，是過往人事。</p>
<p>大理最有名的是洱海與蒼山，有蒼洱一日遊的旅遊線路。我從來沒有想過要跟團旅遊，可是在第二日便跟團出遊了，結果意外地感覺不錯，拍了幾張還滿意的照片，因爲不擅長又懶於後期處理，只隨便整理了幾張洱海風景。</p>
<figure><img src="http://dn-lepture.qbox.me/blog/pure-erhai.jpg/thumbnail" alt="洱海與遠山" /><figcaption>洱海與遠山 by Epl-5</figcaption></figure><figure><img src="http://dn-lepture.qbox.me/blog/erhai-and-vallige.jpg/thumbnail" alt="洱海與村落" /><figcaption>洱海與村落 by Epl-5</figcaption></figure><figure><img src="http://dn-lepture.qbox.me/blog/erhai-and-border.jpg/thumbnail" alt="洱海" /><figcaption>洱海 by Epl-5</figcaption></figure><p>還有蒼山遠眺的風景。乘纜車上蒼山，入天龍洞，拾級而上，一路行人各處留影。洞中光線不好，小彩燈的點綴並不適合拍照，而遊客相機不停，只管留下「到此一遊」的足跡。待得出洞後，心胸頓時開闊，遠眺山下洱海，斜入洱海的幾爿地，遍布白牆青瓦的村子又或者鬱鬱蔥蔥的田地。洱海對面的羣山躺在白雲遮蔽的陰影裏，近處是土黃的未有種植的格子田，田邊又是這白牆青瓦的村落橫躺在國道旁。</p>
<hr>
<p>蒼洱一日遊有三條線，我們這條是民俗線，是同住的三個妹子的朋友幫忙訂的。她們一行與我同日到大理，我們是在下關到大理古城的公車上認識的。到古城時，天色已經黑，我陪她們找客棧入住。她們已經預訂好了一家，叫「石門客棧」，可是無論百度地圖亦或高德地圖，循着地圖走到目的地總是撲個空。而且「石門客棧」的電話又打不通，我們傾向於認爲這家客棧是不存在的，最後只好放棄，隨處找找，選定了人民路上段與博愛路相交處的「大熊餐吧（杭州人家）」。</p>
<p>這條線路整體感覺還行<sup class="footnote-ref" id="fnref-1"><a href="#fn-1" rel="footnote">1</a></sup>，中途有兩個購物點，一是玉器，一是銀器。早晨十點出發，下午六點回城。一路上介紹白族特色，講大理是「男人的天堂，女人的天下」，講大理的「風花雪月」<sup class="footnote-ref" id="fnref-2"><a href="#fn-2" rel="footnote">2</a></sup>。導遊是白族人，戴一環扁平的銀手鐲，喜歡用一些驚人的詞彙，比如「刁民」指「雕民」，比如「嫖客」指「漂客」。白族民居同漢族民居頗不相同，是坐南朝北，進門有一屏白壁，白壁鉓以水墨畫，大約因爲日照過甚，只以這白壁反光照亮堂室。</p>
<p>旅途中下過水，上過山，賞過秀，品過茶。到得旅程結束，在古城裏見到了她們另一羣朋友，抱着在路上撿到的小狗，給這小狗找主人呢。幫我們訂票的朋友也在，叫高翔，又煩他陪我們去買褲子。在護國路上段一家白族人那裏買的，洋人街與人民路這邊的攤鋪始終砍不下價錢。賣衣服的「金花」打趣高翔，問靖雅是不是他女朋友。結果深夜遊玩結束，回到就寝處便發生了尷尬的表白事件。</p>
<hr>
<p>這一路與許多人聊過天，比如擺攤賣明信片的，他讀工科，畢業後就不曾工作，一直在路上，自己拍點照片印成明信片來賣，據說也有日入千圓的經歷，我也光顧了他一下，給朋友寄去的明信片便是在他這兒買的。他也偶爾幫人拍拍寫真。像今天，他身邊便有個姑娘，大約等到下午些時候便要去拍寫真。</p>
<figure><img src="//dn-lepture.qbox.me/blog/me-with-postcards.jpg/thumbnail" alt="我在大理" /><figcaption>走在寄明信片的路上 by iPhone</figcaption></figure><p>比如走在路上，被擺地攤賣襪子的姑娘叫住，說是認識我，之前在 <a href="/zh/2014/a-trip-in-kunming">昆明傾城青年旅舍</a> 和他們打過招呼。他們男女朋友一起辭職出來玩，一邊又擺攤賣點東西，賺點旅費。我便坐下與他們聊聊天。到收攤時，問他們住在哪裏，結果竟然是我們不曾找到的「石門客棧」。我隨後便同他們去這客棧瞧瞧，這個時候曉霞、靖雅、小巧她們已經離開古城了。</p>
<p>在客棧處又意外地遇到的拍寫真的姑娘，也遇到了後來一起去雙廊的凌雲與阿友。客棧老闆是 90 後，和我一樣是湖北人。客棧地理位置特別偏僻，已經出了古城，與地圖上的位置風牛馬不相及，網上預訂需慎重啊。因爲便宜，隔天我也搬了過來住，還順帶了一個小伙。</p>
<p>我們是在早點鋪子裏認識的，他昨天剛到大理，現在已經準備離開了，覺得大理不好玩。我同他聊了聊，講大理的好，講風景，講人物，講擺攤的人，講有意思的店鋪，講大理不能急要細細品味。結果他便留了下來，隨我去住了便宜的床位，這一住下來就住了好幾天，到我離開古城時，他還沒有離開大理。</p>
<p>他帶我去一家木制玩具店玩。這家店在人民路上，據說洋人街也有。各式木制玩具，許多是拼圖類的，還有華容道，可以免費試玩。我們玩得倒是不亦樂乎，後來還假裝店員，幫忙推銷——「這款是我們店賣得最好的，只要八十六，你可以搭配這款一起，買兩個可以九折」。</p>
<hr>
<p>中午的時候，我們去博愛路南端的一然堂吃齋飯。一然堂 5 圓一人隨便吃，但是不能剩飯剩菜。一然堂是佛門之地，我們一邊吃素，一邊看講經的電視。淨空法師講道：「佛不是神仙，他是人，佛只是一種學位，佛好比是博士，菩薩是碩士，阿修羅是學士。」<sup class="footnote-ref" id="fnref-3"><a href="#fn-3" rel="footnote">3</a></sup>他又講：「佛的學位叫無上正等正覺。」淨空法師講得通俗易懂，觀念又貼近生活，挺有意思的。</p>
<p>後來又隨同客棧的朋友一起去慈緣齋素食館吃飯，這家素食館就更有趣了，是完全免費的，隨便吃，也是不能剩飯剩菜，吃完歸還餐盤就可以走了，而且這裏的飯菜比一然堂味道更好。沿着博愛路往南走，出了偏南門，擡頭便能見到。他們家也放電視，有不同的人講經，我們看的還是淨空法師，但是內容是《了凡四訓》。</p>
<hr>
<figure><img src="//dn-lepture.qbox.me/blog/shuanglang-erhai.jpg/thumbnail" alt="雙廊的洱海" /><figcaption>雙廊的洱海 by Epl-5</figcaption></figure><p>洱海一圈遍布着古村古鎮，比如說喜州，比如說雙廊。剛好同住的朋友要去雙廊，我便隨他們一起去了。跳過了不少地方，頗爲可惜。我們是申時出發的，將到雙廊時，正是落日時分，只能在車上瞟一眼日落，等到下車時，太陽已經隱沒在蒼山裏了。</p>
<p>可是並沒有什麼可惜的，因爲隔天便又見落日了。在暖暖客棧後山遠觀夕陽一點點落下，直到藏身於對面的蒼山。夕陽染醉了山邊的雲層，涂一沫酡紅的酒暈，也染醉了我們，我們像一羣醉酒的人，神經病似地唱着各種各樣的歌。抒情的，戀愛的，勵志的。等到天色已暗，習習涼風，忍不住打個寒噤時才肯罷休。</p>
<p>我們入住的這家暖暖客棧風評不錯，是凌雲帶我們來的，也不清楚她是怎麼知道的。店員妹子們人都特別好，又漂亮又可愛。如果球技不佳，不要和小希打桌球，可以找小向練練手，但是假如你是個高手，記得找老闆瓜哥來一局，也許就免房費了。午餐可以在暖暖搭伙，假使你很能吃的話，也可以挑戰一下五碗飯，興許也免房費了。</p>
<p>途次雙廊，更多的時候是在客棧度過的。因爲雙廊在修建各種房屋，路上散着一堆堆的泥沙，而且多是小巷，行路多有不便，所以只隨便走了走。在客棧打打桌球，玩玩牌，晚上的時候玩「殺人」，一直玩到一兩點。認識了一起去瀘沽湖的朋友，TiTi、春天、阿布還有一起過來的阿友。</p>
<p>格格總不加入我們的遊戲，一直在牆角的木桌安靜地畫畫。她有個小本子，打算在暖暖做義工期間畫滿整個本子。最近她在做「精緻手繪明信片義賣」，鉛筆畫的各式圖案，搭配一枚鳥羽，文藝極了，有點「千里送鵝毛的意思」。</p>
<figure><img src="//dn-lepture.qbox.me/blog/postcards-by-gege.jpg/thumbnail" alt="格格畫的明信片" /><figcaption>格格畫的明信片 from WeChat Moments</figcaption></figure><p>因爲人暖，在暖暖度過了暖暖的時光，離開的時候，是小樣的生日，於是又多留了一日。燭光中的小樣閉眼許願，大家唱着生日歌，畫面定格，手機相機閃爍，留下這一時刻。</p>
<hr>
<p>從瀘沽湖回來，返程回古城前又去了一趟沙溪，可惜時日不多。沙溪是一個適合長住的地方，浮光掠影的一瞥享受不了那份安逸。</p>
<p>沙溪號稱是茶馬古道唯一倖存的古集市，古鎮很小，遊客多集中在有「千年集市」之譽的寺登街。有一條溪流，沿着寺登街，一路淌下來，也許這便是沙溪。這裏外國人尤其多，經營咖啡館小飯店的多非本地人。古鎮一圈繞着多處村莊，閒暇時一個人跑到村子裏去玩了玩，聽當地老人們的聊天。</p>
<p>雖然是小住，卻幸運地遇到了週五的集市。街道兩邊遍佈着攤鋪，賣早點的，賣菜的，賣水果的，賣衣服的。街市上的人背着竹簍子走來走去，尋覓着，還有像我這樣的看客無聊地晃荡着。集市上遇着一位外國小夥，也背着竹簍來趕集，身邊是當地的老奶奶，他已在村子裏的「奶奶」家住了一個月了。</p>
<p>早餐在集市吃了份豌豆涼粉，挺美味的，當地人都會買一大份回家當菜吃。可惜時間催人，中午便要離開了。</p>
<hr>
<p>一路過來，最喜歡的還是大理。真羨慕奚媛妹子，住在了這樣一個山青水秀人傑地靈的地方。在大理的時光，還要感謝奚媛帶我去吃當地美食，又煩她一起爬山，去桃溪谷探探山泉，回三文筆茶場的莫催茶室喝茶。</p>
<p>品着茶，從半山腰的茶室遠眺洱海蒼山，遠眺山下大理，觀茶室姑娘練毛筆字，練蘇軾的《赤壁賦》，生活多麼愜意。多想留在大理住下，可惜我不是歸人，是個過客。</p>
<div class="footnotes">
<hr>
<ol><li id="fn-1"><p>因爲沒有跟團的經歷，沒有比較，只是個人感覺。<a href="#fnref-1" rev="footnote">&#8617;</a></p></li>
<li id="fn-2"><p>下关风，上关花，苍山雪，洱海月。<a href="#fnref-2" rev="footnote">&#8617;</a></p></li>
<li id="fn-3"><p>那個時候我還不知道淨空法師，是 <a href="https://twitter.com/mathena/status/453141498993733632">徐宥告訴我的</a>。<a href="#fnref-3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[到昆明看看天空]]></title>
        <link href="http://lepture.com/zh/2014/a-trip-in-kunming"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-04-05T00:59:00+08:00</updated>
        <published>2014-04-05T00:59:00+08:00</published>
        <id>http://lepture.com/zh/2014/a-trip-in-kunming</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>離開深圳前的幾天，每天下着雨，時而點綴兩三點，時而又傾盆如瀉。天陰沉沉的，整個人也陰沉沉的，渾身散發着一股懶洋洋的氣息，寫不了代碼，寫不了文章，每日裏只以電視與動畫度日，一口氣看完了《半澤直樹》與《Fate/Zero》。</p>
<p>大清早去趕飛機，在機場麥記吃早餐，忽而雷鳴，訇然乍響，又聽得麥記員工談前一天飛機延誤的事，立馬擔心航班是否會取消，結果卻是意外的準點。</p>
<p>到昆明後，一出機場便遇見了藍天，以及藍天裏飄着的幾團白雲。雖然睡眼矇矓，心情卻是格外好了。於是開始尋找住處，最後選定了翠湖附近的這家「昆明傾城青年旅舍」。</p>
<p>沿旅舍門口的公路下去，大約兩三分鍾便到翠湖公園。進門兩邊是水塘，一邊在曬塘，裸露的灰土地，縱橫耙過的格子襯衫般的幾條橫線，時而落下數只白鷺，修長的腳，修長的脖子，修長的冠羽，閒步於塘間，啄食於塘間。另一邊卻是滿池水的荷塘，也有白鷺紅嘴鷗<sup class="footnote-ref" id="fnref-gull"><a href="#fn-gull" rel="footnote">1</a></sup>漫步於荷上，迫暮的時候，七八位老爺子蹲於水塘邊，手持了半臂長鏡頭的相機，正拍攝着紅嘴鷗的閒步、展翅、飛翔。</p>
<p>路兩邊的花壇裏種滿了三色堇<sup class="footnote-ref" id="fnref-viola"><a href="#fn-viola" rel="footnote">2</a></sup>，紅黃紫白藍的底，中間染一抹深色。道兩旁隔幾步便是三五老爺子老奶奶一起，小提琴，二胡，琵琶，鼓，或是唱歌，或是戲曲。順路去九龍塘看黑天鵝，路遇一家子在公園遊玩，小姑娘又是異樣的可愛，齊劉海的直髮，扎了個馬尾，一雙黑亮的眼睛，蹦蹦跳跳着。在九龍塘喂食黑天鵝，小姑娘時而分我幾片饅頭，用以喂食天鵝或者塘裏的魚。</p>
<p>夕陽晚照，醉染的雲層，道兩旁的拂柳，微風吹過，襯衣也跟着擺起來，愜意快哉。</p>
<figure><img src="//dn-lepture.qbox.me/blog/green-lake-in-sunset.jpg/thumbnail" alt="夕陽下的翠湖" /><figcaption>夕陽下的翠湖</figcaption></figure><hr>
<p>雲南大學離湖不遠，我是第二日中午些時候去的。校園閒逛，倒沒什麼可敘的。可是有這樣清澈的藍天，連成一片的白雲，身處何處已經無所謂了。中午的太陽稍嫌熱了點，可是當它隱在了大片的雲層裏，一時半會又不能出來，氣溫一下子就降了下來，稍稍吹點風，也不禁會打個冷噤。</p>
<p>太陽藏身於雲層裏，有時也憐憫世人地從縫隙裏漏幾筆光，直把雲層邊緣照得發亮，邊緣是乾乾淨淨的白，裏面卻稍顯烏青了點。</p>
<figure><img src="//dn-lepture.qbox.me/blog/yunnan-university.jpg/thumbnail" alt="雲南大學" /></figure>
<hr>
<p>在昆明，我並沒有刻意地逛景點，只是隨便走走，看看藍天，看看白雲，生活就已經足夠愜意了。更多的時候，我是呆在這家「傾城青年旅舍」，在二樓的咖啡廳裏，上上網，經營一下 <a href="https://yuehu.io/">閱乎</a>，或者點杯咖啡，寫幾行代碼，又或者隨便找兩三人搭幾句話。</p>
<p>店員都是美麗可愛的姑娘，與我同齡的，十八歲的。有姐妹，召慧、召芳，十八歲的小蓉，有酒窩的盼盼，都是賣萌的齊劉海。大家隨便聊聊，打打檯球，像熟人一般，甚至我也曾被誤會成店員了。</p>
<p>有在咖啡廳裏準備複試考研的女生，有開電腦看電視劇的，聊天的，看書的，打桌球的。長得異域風情的實際又是華人的普通話不太利索的英國姑娘 Alice，中文說得異常流利梳一尾辮子的荷蘭漢子 Fred，為了能發彈舌音而做手術矯正舌頭的俄羅斯老頭安德烈。向晚的時候，甚至還有西藏來的喇嘛過來吃飯聊天。</p>
<p>我時常在想我是內向的還是外向的，彷彿沒有定數。有時羞於與人相談，有時又相談甚歡。今晚是在昆明的最後一晚，明天就去 <a href="/zh/2014/wander-in-dali">大理</a> 了。但是，也許明早我又決定先不走了，誰知道呢！</p>
<hr>
<p>Extra Tips:</p>
<ol>
<li>昆明的公共交通不好，很難等到公交車</li>
<li>昆明的飯菜裏常有薄荷，如果不喜歡，記得提前說</li>
<li>昆明氣候偏乾燥，從溼潤地過來的人注意保溼</li>
</ol>
<div class="footnotes">
<hr>
<ol><li id="fn-gull"><p>紅嘴鷗是昆明冬季的一大特色，現在正是紅嘴鷗離開昆明的時間。<a href="#fnref-gull" rev="footnote">&#8617;</a></p></li>
<li id="fn-viola"><p>有一個生物學的博士同學真好，每每遇到不認識的植物，拍照問問總能得到正確答案。<a href="#fnref-viola" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[閱乎，你好]]></title>
        <link href="http://lepture.com/zh/2014/introduce-yuehu"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-03-31T02:30:00+08:00</updated>
        <published>2014-03-31T02:30:00+08:00</published>
        <id>http://lepture.com/zh/2014/introduce-yuehu</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>這篇文章放在草稿箱裏已經兩週了，標題改了又改刪了又刪，始終無法起一個滿意的標題，也始終無法動筆寫下正文。一方面是因爲近來中文閱讀量太少，缺乏中文語感，另一方面也是因爲 <a href="https://yuehu.io/">閱乎</a> 做得還不夠好。</p>
<p>可是看到 <a href="http://yedingding.com/2014/03/12/bootstrapping-your-startup-idea.html">@yedingding 說</a>：</p>
<blockquote><p>我们每天都能给自己找很多理由说发布时机未到，比如产品不够完美需要再改进，比如怕给用户的第一印象不好， 比如如果有某些新功能会更好，比如还需要再多测试一会，尤其是当资金暂时充足时。请放弃这些想法，ship it，ship it，不要怕。</p>
</blockquote><p>雖然這並不是創業，閱乎對我而言是一個 side project，我仍然需要一份工作來養活自己。但是道理是一樣的，也許我應該寫一篇介紹閱乎的「軟文」了。</p>
<h2>閱乎是什麼</h2>
<p>你從名字就可以看出來，<a href="https://yuehu.io/">閱乎</a> 是一個閱讀的地方，但是這樣一個解釋是毫無意義的。要解釋閱乎是什麼，就不得不談一談閱乎的歷史。</p>
<p>2012 年夏末，我們短暫嘗試過由少量編輯每日推薦中文互聯網上的精華文章，每篇文章都包含我們的推薦語。那個時候，我們的域名是 <a href="https://yuehu.io/">yuehu.me</a>。</p>
<figure><img src="//dn-lepture.qbox.me/blog/original-yuehu.png/thumbnail" alt="最初的閱乎" /><figcaption>最初的閱乎，每篇文章都包含我們的推薦語</figcaption></figure><p><a href="http://lishun.me/">李順</a> 是這樣描述的，「一篇文章 + 我們的推薦語 = 閱乎」。但是寫推薦語是一件挺耗費腦力的事，尤其是像我，沒有 <a href="http://imquyi.com">@rangerqu</a> 的才華，沒有 <a href="http://www.fangkc.cn">方可成</a> 的洞見，沒有 <a href="http://ritawu.me/blog/">@rita</a> 的學識，總害怕寫出的東西毫無意義。除了挖苦與諷刺，我能寫點什麼呢！這樣耗費人力而又沒有收入的事很難長久，加上大家都是有身份證的人，時間總是不夠用的。</p>
<p>後來的改版我便去掉了寫推薦語，改爲展示摘要，畢竟推薦的主體還是文章，讀者想看的也是文章。但是我們做了一件額外的事——更良好的閱讀體驗，也做了一件多餘的事——在閱乎寫作。這些變化與錯誤，你都可以在 <a href="https://yuehu.io/about/1">關於閱乎</a> 一文裏察覺到。</p>
<p>現在的閱乎，套用李順的定義：一篇推薦 + 更好的閱讀體驗 = 閱乎。當我說更好的閱讀體驗時，其實並沒有太大的底氣，許多網站的閱讀體驗都不錯的，比如我的個人博客，比如你看到的這篇文章。但是還有一些時候是這樣的：</p>
<figure><img src="//dn-lepture.qbox.me/blog/yuehu-vs-sina.png/thumbnail" alt="新浪與閱乎" /><figcaption>新浪博客應該是我見過的最爛的博客服務商了，但是不明白爲何有這麼多人用</figcaption></figure><p>真實效果對比 <a href="http://blog.sina.com.cn/s/blog_4cd5148f01018amn.html">新浪</a> vs <a href="http://yuehu.io/editors-picks/77">閱乎</a>，或者 <a href="//dn-lepture.qbox.me/blog/yuehu-vs-sina.png">查看大圖</a>。</p>
<h2>道德困境</h2>
<p>閱乎會抓取網頁，解析出該網頁的正文內容，在閱乎展示，以達到「更好的閱讀體驗」。但是這樣的做法，就我個人而言是不妥的，近乎於盜竊。我自己的博客內容當然是無所謂的，但是你可能並不樂意。</p>
<p>一方面我希望你能在閱乎有一個愉快的閱讀體驗，一方面我也希望閱乎能給別人帶去讀者。這兩者之間有矛盾，但又不僅僅只有矛盾。比如前幾天推薦的 <a href="http://yuehu.io/editors-picks/124">我爲什麼是一個悲觀主義者</a> 便爲木遙 <a href="https://twitter.com/lepture/status/448347448423882752">帶去了</a> <a href="http://guojing.me/blog/2014/03/25/i-am-still-blogging/">讀者</a>。</p>
<p>我曾嘗試過在閱讀文章頁面載入原網頁的 iframe，默認展示原網頁，在頂部提供一個「在閱乎閱讀」的按鈕，當點擊該按鈕後，展示閱乎解析後的內容。但是許多網站是不允許作爲 iframe 被載入的，於是你可能 <a href="https://twitter.com/acgtyrant/status/445467368383193088">看到的是一片空白</a>。</p>
<p>在嘗試了幾種方案後，現在的形式是儘可能的鏈接到原文，同時也提供在閱乎閱讀的功能。比如你看 <a href="http://yuehu.io/editors-picks">編輯推薦</a>，當你瀏覽該頁面時，點標題會跳轉到原網頁，而標題正是讀者最喜歡點擊的部分，將標題鏈接設爲原網頁，正好體現了「儘可能的鏈接到原文」。假如你在閱乎閱讀，假如你要在閱乎閱讀  <a href="http://yuehu.io/editors-picks/130">清人笔记里的广东“老举”</a>  這篇文章，假如你沒有註冊閱乎，沒有登錄閱乎，你將無法看到全文內容，你只能看到摘要。這樣做並非爲了逼迫讀者註冊閱乎，大多數時候，讀者是懶得註冊的，設置這樣一個門檻正是爲了爲原文帶去讀者。</p>
<p>我也不知道怎麼樣的方式更好，一種「又要當婊子，又想立牌坊」的尷尬。如果你有更好的方案，歡迎反饋給我。</p>
<h2>推薦什麼</h2>
<p>閱乎目前主打的功能是「合輯」，這是一個由多人（也可以是一人）編輯維護的文章集，代表了某類話題下這些編輯的口味。推薦什麼內容由人決定，而不是機器與算法。</p>
<p>李順曾在最初的關於閱乎裏寫道：</p>
<blockquote><p>聪明的软件工程师、科学家们在研究“推荐算法”，就是为了能够从互联网上挖掘出值得一读的内容。
这要是成功了，就可以用极低的成本解决上面说的问题。利用现有的技术，你已经能够每天读到一份由机器自动生成的，只属于你个人的“杂志”了。</p>
</blockquote><p>這種「只屬於你個人的雜誌」不會在閱乎出現。一是我並沒有這份實力，二是我並不認同這一概念。木遙在 <a href="http://blog.farmostwood.net/697.html">我爲什麼是一個悲觀主義者</a> 一文裏提到了「社會的極化」這樣一個觀點：</p>
<blockquote><p>一旦每个人可以定制自己的视野，他就会放弃倾听、宽容和讨论的责任，只是躲在自己的天地里任性地选择自己喜欢的声音。长此以往，每个人都会沿着自己的方向走向极端。</p>
</blockquote><p>由人來推薦，這種對「個性化」的擔憂則不必了。因爲人總會有自己偏見，這些偏見保證了你總能接觸到非個性化的觀點，而它們便會體現在這「合輯」裏。</p>
<p>如果你有興趣經營一份合輯，主題將由你自己來決定，它可以是某一領域內的文章推薦，比如 <a href="https://yuehu.io/pythonic-notes">Pythonic Notes</a>，它也可以是無法言寓的人文類主題，比如 <a href="https://yuehu.io/editors-picks">編輯推薦</a>。</p>
<p>我將主要維護 <a href="https://yuehu.io/editors-picks">編輯推薦</a> 與 <a href="https://yuehu.io/be-a-programmer">我們都是程序員</a> 。這兩個合輯都是開放合輯，歡迎大家投遞文章。</p>
<h2>新的開始</h2>
<p>閱乎誕生很久了，然而我從未在自己的博客上寫過。這裏寫下閱乎的第一篇「軟文」，表明它已經到了能被自己認可的地步了。</p>
<p>古人云，一鼓作氣，再而衰，三而竭。已經改過數次版了，幾乎到了「三而竭」的地步。於是更新了域名，從 .me 換作了 .io，假裝是一個新的開始，而不至於立馬就竭了。</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[當我談開源時我談些什麼]]></title>
        <link href="http://lepture.com/zh/2014/my-thought-on-opensource"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-03-12T18:10:00+08:00</updated>
        <published>2014-03-12T18:10:00+08:00</published>
        <id>http://lepture.com/zh/2014/my-thought-on-opensource</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>哦，不要在意這個標題。我知道你們看過《當我談跑步時我談些什麼》，也看過《當我們談論愛情時我們在談論什麼》。</p>
<p>那麼當我談開源時我要談些什麼呢？我以爲第一點要弄清楚的是開源是什麼。一般人眼裏的開源是怎麼樣的，我不知道，只能不懷惡意地揣測，大抵是指免費的可以查看到源代碼的軟體吧。</p>
<p>當然，這不過是我個人的猜測。我眼中的開源遠不止如此，開源不僅僅只有軟體和代碼。英文的開源一詞乃 Open Source，至於 Source 是什麼，並沒有明確的限定。它可以是 Open-source software<sup class="footnote-ref" id="fnref-open-source"><a href="#fn-open-source" rel="footnote">1</a></sup>，可以是 Open-source content，可以是 Open-source journalism，可以是 Open-source university，甚至於 <a href="http://en.wikipedia.org/wiki/Open_politics">Open-source politics</a>。</p>
<p>例如我曾閒暇無聊時整理過<a href="https://github.com/lepture/chinalaw">中華人民共和國的法律</a>，它不是軟體，不是代碼，但是我一樣認爲這是一個開源庫。本質上來說，它甚至不是源<sup class="footnote-ref" id="fnref-source"><a href="#fn-source" rel="footnote">2</a></sup>。但是換一個角度來看，它又是第一個整理成 Markdown 格式的法律集，那麼從這個角度來說，也可看作是源了。</p>
<p>因爲職業的關係，我所能談的也只有 Open-source code 了。但是萬不要以爲開源就只有代碼，你可以開源任何事物。</p>
<hr>
<p>你也許不知道，我曾是 GitHub 上最活躍的大陸華人<sup class="footnote-ref" id="fnref-github-top"><a href="#fn-github-top" rel="footnote">3</a></sup>。創建了一個又一個的開源庫，挖了許多坑，也填了許多坑。這樣看來彷彿我挺熱衷於開源的，其實不然，我是屬於消極開源的一類人。</p>
<p>例如我曾在 <a href="/en/2013/unpleasant-open-source">The Unpleasant Part of Open Source</a> 一文裏提到：</p>
<blockquote><p>We open source not because people need us. We just happen to open source things that solve our problems, and wish it may help other people.
Open source can be a business for a company, but not for individuals.</p>
</blockquote><p>開源對我來說是一件順便的事，沒有什麼崇高的目的。與理想無關，更多的是一種實用主義。我寫了一個 Python 庫，順便放在 GitHub 上做管理，順便發布到 PyPI 裏方便下載安裝。一切都是因爲順便。有時覺得對別人會挺有用的，便會特地去<a href="http://www.reddit.com/r/Python/comments/1yz7bl/markdown_parsers_in_python/">宣傳宣傳</a>。比如最近寫的一個 <a href="/en/2014/markdown-parsers-in-python">Markdown 解析器</a> <a href="https://github.com/lepture/mistune">mistune</a>。但是更多的時候，我並不會刻意去做太多，沒有那麼多精力。</p>
<p>聽起來彷彿挺沒有責任心。其實不然，我寫的東西還是很不錯的。雖然是順便爲之，測試用例、文檔卻是一樣都不會少的，而且代碼也寫得漂亮<sup class="footnote-ref" id="fnref-code-style"><a href="#fn-code-style" rel="footnote">4</a></sup>。既然有打算給別人用，文檔是必不可少的，許多程序員不喜歡寫文檔，我不在其列，我認爲沒有文檔的程序不叫開源程序。如果你有興趣，可以隨便看看我寫的文檔：</p>
<ul>
<li><a href="https://github.com/lepture/flask-oauthlib">Flask-OAuthlib</a>: <a href="https://flask-oauthlib.readthedocs.org/">flask-oauthlib.readthedocs.org/</a></li>
<li><a href="https://github.com/lepture/otpauth">otpauth</a>: <a href="https://pythonhosted.org/otpauth/">pythonhosted.org/otpauth/</a></li>
</ul>
<hr>
<p>開源代碼分兩類，一類是 Software(Application)，一類是 Library（庫）。Software 是針對使用者的，是一個可直接使用的程序；Library 是針對開發者的，爲開發者編寫代碼提供便利。比如 Gitlab 是一個 Open Source Software，而 Gitlab 使用的 Rails 框架則是一個 Library。對一般人來說，接觸的更多的應該是開源軟體。</p>
<p>初入行時，我寫過一個運行在 GAE 上的博客，這是 Software。後來慢慢就不再寫 Software 了，改寫 Library 了。因爲 Software 很容易讓我廢棄掉，一旦不再使用，就沒有動力去更新了。而 Library 則不然，你輕易不會廢棄掉，即使你不再使用，因爲功能單一明確，很容易讓別人接手。比如 <a href="https://github.com/lepture/flask-wtf">lepture/flask-wtf</a> 這個庫便是從旁人那裏接手過來的。</p>
<p>自己使用<sup class="footnote-ref" id="fnref-dog-food"><a href="#fn-dog-food" rel="footnote">5</a></sup>是一個很重要的原則。如果一個庫自己不再使用，而有其他人來提 Bug 或者 feature，我是懶得搭理的。沒有金錢收入，自己又不用，哪裏有心思修改刪增呢！以前寫了一個 Python 庫，叫 Livereload，是一個 Software。剛開始時用了一段時間，後來便廢棄了。然而不時還有人來提 issue，因爲我暫時用不着，便不太搭理人。而後靈光乍現，<a href="/en/2013/new-life-of-livereload">將 Livereload 從 Software 改成 Library</a>，便又能吃自己的狗糧了。也下定了決心，以後要少寫軟體，多寫庫。</p>
<p>但是我偶爾還會寫一些開源軟體，專注於單一的功能，代碼量足夠小。這樣即使我不再使用它，只需要花少量的時間就能了解它，修改它。最近的例子就是 <a href="https://github.com/lepture/rewatch">rewatch</a>，區區 80 幾行代碼，賞心悅目。</p>
<hr>
<p>有的同學可能覺得開源是一件很偉大的事，我頗不以爲然。大可不必看得太重，當然也不可輕賤。看得太重，便會生怯，妄自菲薄，以爲這樣崇高的事自己是做不了的。假使有志於做點貢獻，我也有些許建議。</p>
<ul>
<li>首先註冊一個 GitHub 賬戶，學習一下 Git 的使用。現在多數開源庫都託管在  GitHub 上的。</li>
<li>從使用別人的庫開始，在 GitHub 上 Star 一下別人的庫，讓開發者知道有人關注他寫的東西。</li>
<li>遇到好東西，幫忙作者宣傳一下，也算是在做貢獻</li>
<li>在使用過程中，你不可避免的會遇到各種各樣的問題，即時反饋給開發者。</li>
<li>有能力的話，不妨修復這些問題，然後給作者發 pull request，說明清楚你解決了什麼問題。</li>
<li>你遇到了一個問題，又找不到好的方案，於是你開始自己解決這些問題，同時公開了你的解決方案。</li>
</ul>
<p>我並不贊同刻意地參與，最有效的參與便是使用。在使用過程中發現問題，反饋問題，解決問題。開始的時候，多關注一些小項目，更少的代碼量有助於你理解它，發現它的問題，複雜的項目會讓人望而生怯，讓你裹足不前。</p>
<p>我並不總是在寫自己的代碼，也會給別人<a href="https://github.com/hhatto/python-hoedown/issues/5">提問題</a>，也會給別人<a href="https://github.com/chjj/marked/pull/129">發 patch</a>。但是前提是，我在使用，而且在使用過程中遇到了問題。也許你發現的並不是什麼大問題，比如文檔裏的某個單詞寫錯了，沒有關係，大膽地給作者發 pull request 吧。</p>
<p>最後，在參與的過程中注意一下「<a href="https://github.com/seajs/seajs/blob/master/CONTRIBUTING.md">如何向开源社区提问题</a>」。</p>
<div class="footnotes">
<hr>
<ol><li id="fn-open-source"><p>開源軟體，這大約就是一般人眼裏的開源，也就是所謂狹義的開源。<a href="#fnref-open-source" rev="footnote">&#8617;</a></p></li>
<li id="fn-source"><p>Source 的本意即是來源、出處、根源。<a href="#fnref-source" rev="footnote">&#8617;</a></p></li>
<li id="fn-github-top"><p>最活躍並不代表什麼，說起來也沒有什麼特別拿得出手的東西。最近活躍度變低了，名次一直在掉，但是截止到寫這篇文章依舊是大陸區第一。<a href="#fnref-github-top" rev="footnote">&#8617;</a></p></li>
<li id="fn-code-style"><p>我喜歡漂亮的代碼。漂亮多半時候指的是代碼風格，也偶爾指漂亮的邏輯。<a href="#fnref-code-style" rev="footnote">&#8617;</a></p></li>
<li id="fn-dog-food"><p>所謂 Eat your own dog food 是也。<a href="#fnref-dog-food" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown Parsers in Python]]></title>
        <link href="http://lepture.com/en/2014/markdown-parsers-in-python"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-02-26T16:55:00+08:00</updated>
        <published>2014-02-26T16:55:00+08:00</published>
        <id>http://lepture.com/en/2014/markdown-parsers-in-python</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>There are many markdown parsers in Python. Misaka was my favorite one.
However, misaka is deprecated now, and the successor which is called
hoedown still has issues to solve. That's why it is a <strong>was</strong>. But I still
love it.</p>
<p>Here is a list of markdown parsers for Python in my knowledge:</p>
<ul>
<li>Misaka: A python binding for Sundown. (CPython required)</li>
<li>Hoedown: A python binding for Hoedown, successor of Misaka.</li>
<li>Discount: A python binding for Discount. (CPython required)</li>
<li>cMarkdown: Markdown for Python, accelerated by C. (CPython required)</li>
<li>Markdown: A pure markdown parser, the very first implementation.</li>
<li>Markdown2: Another pure markdown parser.</li>
</ul>
<p>And I've just released another pure markdown parser too, which is called
<strong><a href="https://github.com/lepture/mistune">mistune</a></strong>.</p>
<h2>Misaka</h2>
<p><a href="https://github.com/FSX/misaka">Misaka</a> was my favorite markdown parser. It
is a python binding of Sundown, which means that it has all the features
that Sundown provides.</p>
<p>It is super fast! Actually, it is the top one in my benchmarks. Since it is
a binding of a C library, no wonder that it is this fast. If speed is what
you want, you should try misaka, and as well as other bindings of a C library.</p>
<p>But misaka is more than speed. It is the custom renderer feature that catches
my heart. I am so fond of it, that's why I implement the custom renderer
feature in my own markdown parser <strong>mistune</strong>.</p>
<p>A quick and very useful sample is <a href="http://misaka.61924.nl/manual/#toc_15">code highlighting</a>.</p>
<p>However, it is a binding of a C libary. It requires CPython, if you prefer
PyPy, you have no access to it. Some App Engines have a limitation on compiling
C libraries too, you can't use misaka in this case. And even if you are
using CPython, it is still difficult to install it on a Windows OS.</p>
<blockquote><p>Visual Studio's support for C is not optimal and most VS compilers are
missing stdint.h, which is needed to compile Misaka.</p>
</blockquote><p>If you are on a Windows, may god helps you. I don't care it a shit.</p>
<p>Footnote feature is missing in Misaka. Maybe many of you don't need such a
thing, in this case, misaka has nothing bad. It is stable, efficient, and
has many GFM features.</p>
<p>The only trouble is Sundown is deprecated.<sup class="footnote-ref" id="fnref-sundown-deprecated"><a href="#fn-sundown-deprecated" rel="footnote">1</a></sup></p>
<h2>Hoedown</h2>
<p>Because the Sundown library is deprecated, here comes hoedown<sup class="footnote-ref" id="fnref-c-hoedown"><a href="#fn-c-hoedown" rel="footnote">2</a></sup>,
which is the fork of the original Sundown. It has a Python binding also
called as hoedown.</p>
<p>Since Hoedown is the successor of Sundown, and <a href="https://github.com/hhatto/python-hoedown">python-hoedown</a> is the successor of Misaka, all features
that misaka has, python-hoedown has them too. But python-hoedown is more
than that.</p>
<ol>
<li>It is PyPy compatible.</li>
<li>It has footnote feature.</li>
</ol>
<p>It looks promissing, and even misaka's author recommends it. I've tried it,
but failed with one issue, <a href="https://github.com/hhatto/python-hoedown/issues/5">a magic error</a> that I can't do anything:</p>
<pre><code>terminated by signal SIGSEGV (Address boundary error)
</code></pre>
<p>This isssue is not fixed yet. Once it does, <del>hoedown would be a good choice</del>
for non-AE users.</p>
<p><em>Updated at Jun 23, 2014</em>: you can use <a href="https://github.com/Anomareh/Hoep">Hoep</a> as the Python Binding.</p>
<h2>cMarkdown &amp; Discount</h2>
<p><a href="https://github.com/paulsmith/cMarkdown">cMarkdown</a> is much like Misaka,
except that it is based on upskirt<sup class="footnote-ref" id="fnref-upskirt"><a href="#fn-upskirt" rel="footnote">3</a></sup> rather than sundown. The
history is very interesting, sundown is a fork of upskirt, hoedown is a
fork of sundown. And now, sundown is deprecated, upskirt is missing. The
new markdown parser that vmg promised is still not available.</p>
<p>cMarkdown has all the disadvantages of Misaka, and it is a little slower
than Misaka. This means you really should use misaka instead of cMarkdown.</p>
<hr>
<p>Discount is a joke for me, I can't even install it successfully! There is
not much to say. But I do know that Discount is slower than Sundown.</p>
<h2>Markdown &amp; Markdown2</h2>
<p><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a> is the very first markdown parser in pure Python. It is
good, except the documentation. However, I miss the renderer feature in
misaka, which is not in Python-Markdown.</p>
<p>Python-Markdown is not that slow as I expected, since Python-Markdown2
calls itself as:</p>
<blockquote><p>A fast and complete implementation of Markdown in Python.</p>
</blockquote><p>But it is not true. Python-Markdown2 is much slower than Python-Markdown.
I have no idea why it says itself fast. All features that 2 has, the older
one has too.</p>
<p>The benchmark shows that Python-Markdown2 is almost twice slower than
Python-Markdown. No wonder it is 2.</p>
<h2>Mistune</h2>
<p><a href="https://github.com/lepture/mistune">Mistune</a> is a new (just released)
markdown parser. It is the <strong>fastest</strong> one in all pure Python implementations.
Almost <strong>4 times faster</strong><sup class="footnote-ref" id="fnref-bench"><a href="#fn-bench" rel="footnote">4</a></sup> than Python-Markdown in pure Python
environment, almost <strong>5 times faster</strong> with Cython's help.</p>
<p>I didn't expect it to be so fast when I wrote it. I know it would be a fast
one, but I didn't know that it would be 4 times faster and even 5 times
faster.</p>
<hr>
<p>I have never thought of creating a Markdown parser my own. But it has been
months since I reported the issue to Hoedown. The issue is still there,
not solved a bit. Because it is a C binding, I am not able to do any help,
the only thing I can do is waiting.</p>
<p>I don't use Python-Markdown or Python-Markdown2, because they have no renderer
feature, and they are slow.</p>
<p>I have <a href="/en/2013/unpleasant-open-source">introduced renderer feature to marked</a>, which is
finally merged. And now I am trying to add the <a href="https://github.com/chjj/marked/pull/351">footnote feature</a>.
It occured to me that I can port marked to Python, since I know marked well,
and I know it is the fastest in all pure JavaScript implementations. It
would be fast in Python too, and it really does.</p>
<hr>
<p>If you are looking for a fast, full featured<sup class="footnote-ref" id="fnref-mistune-features"><a href="#fn-mistune-features" rel="footnote">5</a></sup> and pure
Python implementation, Mistune is a good choice. It also has renderer
feature just like Misaka. You can always influnce the rendering results
with custom renderers.</p>
<pre><code class="lang-python">import mistune
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter

class MyRenderer(mistune.Renderer):
    def block_code(self, code, lang):
        if not lang:
            return &#39;\n&lt;pre&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/pre&gt;\n&#39; % \
                mistune.escape(code.strip())
        lexer = get_lexer_by_name(lang, stripall=True)
        formatter = HtmlFormatter()
        return highlight(code, lexer, formatter)

renderer = MyRenderer()
md = mistune.Markdown(renderer=renderer)
print(md.render(&#39;Some Markdown text.&#39;))
</code></pre>
<h2>Additional Notes</h2>
<p>I did a benchmark on my MacBook Air, <a href="https://github.com/lepture/mistune/issues/1">view the results</a>.
You can run the benchmark script yourself: <a href="https://github.com/lepture/mistune/blob/master/tests/bench.py">bench.py</a></p>
<pre><code>Parsing the Markdown Syntax document 1000 times...
Mistune: 12.7255s
Mistune (with Cython): 9.74075s
Misaka: 0.550502s
Markdown: 46.4342s
Markdown2: 78.2267s
cMarkdown: 0.664128s
Discount is not available
</code></pre>
<hr>
<p>Mistune can be compiled with Cython if you have Cython installed already.</p>
<pre><code>$ pip install cython mistune
</code></pre>
<p>The magic happens in the <code>setup.py</code> script. I'd like to introduce this part
another time.</p>
<p><strong>mistune is used by many great projects such as IPython, Rodeo and crossbar.</strong></p>
<p>*This post and all posts in markdown format on this site are rendered with
mistune.*</p>
<div class="footnotes">
<hr>
<ol><li id="fn-sundown-deprecated"><p>Sundown is deprecated a year ago with a <a href="https://github.com/vmg/sundown/commit/37728fb2d7137ff7c37d0a474cb827a8d6d846d8">commit</a> by vmg, but the new markdown parser is still missing.<a href="#fnref-sundown-deprecated" rev="footnote">&#8617;</a></p></li>
<li id="fn-c-hoedown"><p>Hoedown is a fork of Sundown, it is a C library. It reverted the <a href="https://github.com/hoedown/hoedown/commit/aa43a77283c613662033039eddb477f2e0fd3d63">deprecated message</a> 5 months ago.<a href="#fnref-c-hoedown" rev="footnote">&#8617;</a></p></li>
<li id="fn-upskirt"><p>Links about upskirt are missing now, they are all 404.<a href="#fnref-upskirt" rev="footnote">&#8617;</a></p></li>
<li id="fn-bench"><p>I've did a benchmark on all markdown parsers I know. <a href="https://github.com/lepture/mistune/issues/1">Checkout the Benchmarks</a>.<a href="#fnref-bench" rev="footnote">&#8617;</a></p></li>
<li id="fn-mistune-features"><p>Mistune is full featured, it has autolink, strikethrough, table,
fenced code, footnotes. And you can't disable them. I believe that
it is a good design to enable all these features, since they are the
standards in the real world now.<a href="#fnref-mistune-features" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[成熟這種病]]></title>
        <link href="http://lepture.com/zh/2014/when-you-grow-up"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2014-02-21T00:00:00+08:00</updated>
        <published>2014-02-21T00:00:00+08:00</published>
        <id>http://lepture.com/zh/2014/when-you-grow-up</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <blockquote><p>你這樣做又有什麼用呢？這在天朝算個什麼事！</p>
</blockquote><p>你時常能聽到這樣的聲音吧？或許你就是這聲音的吟誦者。你一點一點長大，失去了好奇心，失去了探索欲，妥協<sup class="footnote-ref" id="fnref-compromise"><a href="#fn-compromise" rel="footnote">1</a></sup>，退讓，連帶着連別人的反抗也要嗤之以鼻了。你把這叫成熟<sup class="footnote-ref" id="fnref-not-accomplished"><a href="#fn-not-accomplished" rel="footnote">2</a></sup>。</p>
<p>哦，這說的不是你，也許是我，未來的我。請你不要介懷。我時常擔心自己也會麻木，需要點自我暗示。有時想想，其實有點多餘，因爲我經常能被稱作幼稚呢！</p>
<hr>
<p>昨天 @chloerei 提了一句「<a href="https://twitter.com/chloerei/status/436499925652602882">自己不做，还要泼别人冷水</a>」。這說的是 V2EX 上的一篇帖子，<a href="https://www.v2ex.com/t/100888?p=1">我向工业信息化部发了一份申诉，为了 GitHub</a>。</p>
<p>其實我並不知道 GitHub 又出問題了，因爲之前出過一次，已經把 fastly 的 CDN 加入到代理列表裏了。可惜沒有邁出投訴的一步。無論如何，有人邁出了這一步，而後還有附議者，總是叫人高興的。</p>
<p>於這幸事之中又不免打擊之言——「我不怀疑，肯定无效」。</p>
<p>也許吧。即使是徒勞的反抗，但那又怎麼樣！有些事的意義不在於做成功了，而在於做的過程。更何況，我是相信有效果的。</p>
<blockquote><p>你可能不是第一个申诉，但也不会是最后一个。</p>
</blockquote><p>这句评论颇有点巴士运动<sup class="footnote-ref" id="fnref-bus-boycott"><a href="#fn-bus-boycott" rel="footnote">3</a></sup>的味道，因为「帕克斯不是第一位在巴士上拒絕讓座給白人的黑人」。Rosa Parks<sup class="footnote-ref" id="fnref-rosa-parks"><a href="#fn-rosa-parks" rel="footnote">4</a></sup> 在当时也不是名人，与「李开复、周鸿祎」更是没得比。</p>
<p>稍晚些時候，收到 rnw.org 的採訪郵件，詢問我對 GitHub 被屏蔽一事的看法，以及此事對我的影響。因爲忙於寫<a href="https://github.com/lepture/mistune">一個庫</a>，沒能及時回覆，深表歉意。</p>
<hr>
<p>這件事倒讓我想起之前的<a href="https://www.v2ex.com/t/57677">每日投诉电信计划</a>了，是關於中國電信在網頁中插廣告的事。結果挺好的，中國電信停止向寬帶用戶推送第三方廣告。（那電信自己的呢？，存疑。）</p>
<p>雖然我不能肯定自己起到了什麼作用，恐怕主要還是靠 @Fenng 等關注者多的人，因爲名人的影響力在那裏嘛。但是做過了，而且堅持了那麼久，還是挺開心的，當作形爲藝術罷。</p>
<p>這過程裏，傷害了不少客服的心，頗過意不去。也收穫了詆譭與讚譽。譭之者不過言「蚍蜉撼大樹」，仿佛我不知道似的。</p>
<hr>
<p>知乎有一句廣告辭——<strong>認真你就贏了</strong>。深得我心。成熟卻讓你失去了較真的勇氣，總是在關鍵時刻提醒著你：這樣做又有什麼用呢？更何況，還有「被送快遞」的風險。</p>
<p>政治味稍微多了點，談一個更生活化的例子。比如說智能手機，即使你一遍遍地教過了父母，但是他們依然手足無措。你給一個小孩子玩，什麼都不用教，過會兒他就會用了，即使他還不識字。</p>
<p>小孩子無所畏懼，拿到手上左按按右按按，按得多了也就會了。但是父母不會，他們從不左按右按，總是依照你所教的步驟一步一步按下去，還總是擔心按錯了。這就是成熟病呀。他們不曾想，即使按錯了也沒什麼大不了的。正如你想多了一樣，「查水表」這種事並不會輕易發生。</p>
<p>你看，雖然我寫得一塌糊涂，完全不知所云，但是仍然有發表出來的勇氣，也見得暫未患這成熟病了。最後送上顾城的一首詩，望君喜歡。</p>
<blockquote><p>天是灰色的<br>
路是灰色的<br>
楼是灰色的<br>
雨是灰色的<br>
在一片死灰中<br>
走过两个孩子<br>
一个鲜红<br>
一个淡绿</p>
</blockquote><div class="footnotes">
<hr>
<ol><li id="fn-compromise"><p>中文妥協一詞與英文 compromise 頗不相同，中文的妥協更多時候只是一方的退讓。<a href="#fnref-compromise" rev="footnote">&#8617;</a></p></li>
<li id="fn-not-accomplished"><p>當我談成熟時，這個成熟只限定於本文的意義。它是非普適的，亦不是你認爲的意義。<a href="#fnref-not-accomplished" rev="footnote">&#8617;</a></p></li>
<li id="fn-bus-boycott"><p>The Montgomery Bus Boycott, a seminal event in the U.S. civil rights movement, was a political and social protest campaign against the policy of racial segregation on the public transit system of Montgomery, Alabama.<a href="#fnref-bus-boycott" rev="footnote">&#8617;</a></p></li>
<li id="fn-rosa-parks"><p>Rosa Louise McCauley Parks was an African-American civil rights activist, whom the United States Congress called "the first lady of civil rights" and "the mother of the freedom movement".<a href="#fnref-rosa-parks" rev="footnote">&#8617;</a></p></li>
</ol>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[New life of livereload]]></title>
        <link href="http://lepture.com/en/2013/new-life-of-livereload"/>
        <author>
            <name>Hsiaoming Yang</name>
        </author>
        <updated>2013-12-31T13:30:00+08:00</updated>
        <published>2013-12-31T13:30:00+08:00</published>
        <id>http://lepture.com/en/2013/new-life-of-livereload</id>
        <content type="html" xml:base="http://lepture.com/" xml:lang="en">
            <![CDATA[ <p>I created <a href="https://github.com/lepture/python-livereload">livereload</a>
(implemented in Python) one year and 8 months ago. The first version was
released on May 4th, 2012. I had been working on it for a while, but I
didn't enjoy it myself.</p>
<p><a href="http://livereload.com/">LiveReload</a> is a Mac software that monitors
changes in the file system. A quote from the official website:</p>
<blockquote><p>As soon as you save a file, it is preprocessed as needed, and the browser
is refreshed.</p>
</blockquote><p>And my implementation in Python is a command line tool that simulates the
behavior of LiveReload, a bit like <a href="https://github.com/guard/guard">guard</a>.</p>
<p>The reason why I created this project is pretty simple. I was working in a
Python-only development environment, it would be nice that everything is
in Python. However, things changed in the last year, I am more a front end
developer than a back end pythonist. I enjoy nodejs, I also enjoy other
languages like ruby and golang.</p>
<p>Anyway, I don't like to start another server for watching file changes only,
the original design of Guardfile is not good enough, at least I am not
satisfied. The simulation just doesn't work for me.</p>
<blockquote class="cite-quote"><p>most things have some design behind,
as people copy it, the original design gets obscured and forgotten,
the original design might no longer apply</p>
<cite>Armin Ronacher</cite>
</blockquote><p>This is a slide of a talk by Armin Ronacher — <a href="https://speakerdeck.com/mitsuhiko/thinking-outside-the-box">Thinking Outside The Box</a>.</p>
<h2>Create something I will use in the daily life</h2>
<p>The original copied one has nothing new, nothing special for Python that
I would use it in my daily life. This makes me sad. So I have no much
enthusiasm in the maintainence of it.</p>
<p>But I do believe that livereload is a good idea. Maybe I just did it wrong.
One day, a brilliant idea came to me — livereload for wsgi.</p>
<p>A simple example of the idea:</p>
<pre><code class="lang-python">from livereload import Server

server = Server(wsgi_app)
server.watch(&#39;static/app.css&#39;)
server.serve()
</code></pre>
<p>Wow, that looks good. It seems something that I will use in my daily life.
Since I prefer Flask, I can write the scripts with Flask-Script in a
<code>manage.py</code> file:</p>
<pre><code class="lang-python">app = create_app()

@manager.command
def liveserver(port=5000):
    from livereload import Server
    server = Server(app.wsgi_app)
    server.watch(&#39;static/*.css&#39;)
    server.serve(port=port)
</code></pre>
<p>And whenenver a css file changes, the browser will refresh it itself.</p>
<p>Actually, my environment of front end development is far more complex,
I use rework for css processing, component for javascript modular. The
real example would be gorgeous.</p>
<p>Take a peep of my scripts:</p>
<pre><code class="lang-python">@manager.command
def liveserver(port=5000):
    from livereload import Server

    server = Server(app.wsgi_app)
    server.watch(&#39;assets/styles/*.css&#39;, &#39;make -C assets rework&#39;)
    server.watch(&#39;assets/lib/*.js&#39;, &#39;make -C assets build&#39;)
    server.watch(&#39;app/templates&#39;)
    server.serve(port)
</code></pre>
<h2>Do one job, and do it well</h2>
<p>Version 2.0 of livereload is more a library rather than an application.
Which means other libraries in Python can easily bundle it in. I hope it
can be a great library.</p>
<p>The executable command line tool is removed from livereload. It may come
back again, but not soon. The compilers like uglifyjs, lesscss, slim,
CoffeeScript are removed from livereload too.</p>
<p>For now, livereload will focus on one thing — livereload. And livereload
well.</p>
<p>The lack of compilers does not affect much. Since livereload provides you
a way to execute shell command. As you can see in the above example that
<code>server.watch</code> supports executing shell commands, so that we can do:</p>
<pre><code class="lang-python">server.watch(&#39;src/foo.js&#39;, &#39;uglifyjs src/foo.js -m -o build/foo.js&#39;)
</code></pre>
<p>That's why compilers are removed, since every compiler is some sort of a
shell command, there is no reason for wrapping them in Python any more.</p>
<p>By removing compilers, livereload focuses on the server implementation,
and file watcher. The core code is much simple now.</p>
<h2>Take advantage of existed tools</h2>
<p>We programers like to reinvent tools. Sometimes we create things better
than the old ones, sometimes we fail. The most valuable tool I learned
in the last two years is Makefile.</p>
<p>I think every programer should know Makefile, and take the advantage of
it. Like what I did/do in my daily life. The examples above are using
Makefile:</p>
<pre><code>server.watch('assets/styles/*.css', 'make -C assets rework')
</code></pre>
<h2>The future</h2>
<p>The rewritted version 2.0 of livereload was released days ago. There are
features not implmented, bugs not fixed, but the concept works well. It
is not just an implementation <strong>of Python</strong>, it is an implementation
<strong>for Python</strong>.</p>
<p>The code is much more pretty than before. It is well documented and tested.
I hope people will enjoy it. It is a library now, I am looking forward to
libraries that depend on this project and making the web development of
more fun.</p>
 ]]>
        </content>
    </entry>
</feed>